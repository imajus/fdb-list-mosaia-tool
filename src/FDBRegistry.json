{
  "address": "0xDB9aD1c0e38567CB5b8334451f235027e9f1c4a4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pandoraServer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FDBRegistry__EmptyName",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FDBRegistry__EmptySymbol",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FDBRegistry__InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FDBRegistry__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FDBRegistry__InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FDBRegistry__NotCollectionOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FDBRegistry__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "privateColumns",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "publicColumns",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proofSetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "CollectionStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NFTPurchased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_TOKEN_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPLOYER_FEE_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAYMENTS_FEE_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVE_PERIOD_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "batchMintNFTs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "privateColumns",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicColumns",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "proofSetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "createCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCollections",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "getCollectionEffectivePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "getCollectionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "privateColumns",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicColumns",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "privateCid",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "proofSetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct FDBRegistry.Collection",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "getCollectionReserveCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCollections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserCollectionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserCollections",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "privateColumns",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicColumns",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicCid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "privateCid",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "proofSetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct FDBRegistry.Collection[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "hasNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isCollectionOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "publicCid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "privateCid",
          "type": "string"
        }
      ],
      "name": "setCollectionCid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        }
      ],
      "name": "toggleCollectionStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6708eeb0d8e2a6e5fd54809bec747060ebb6b0609581674232c3671fa8b3137",
  "receipt": {
    "to": null,
    "from": "0xBE4eD3d81274DECad0d05AAa5F7828E828Ea1af9",
    "contractAddress": "0xDB9aD1c0e38567CB5b8334451f235027e9f1c4a4",
    "transactionIndex": 2,
    "gasUsed": "121266643",
    "logsBloom": "0x
    "blockHash": "0x371921a7a0c926ba9a20ff269270a1a58bb4c7b5872bff5113f79efd505b2e0c",
    "transactionHash": "0xe6708eeb0d8e2a6e5fd54809bec747060ebb6b0609581674232c3671fa8b3137",
    "logs": [],
    "blockNumber": 2811001,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb3042734b608a1B16e9e86B374A3f3e389B4cDf0",
    "0xAB187e95508699b36b91b727365E1B24362eFaA6"
  ],
  "numDeployments": 1,
  "solcInputHash": "ef53b16a8aa0f256c9a0a958ec5d83e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pandoraServer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FDBRegistry__EmptyName\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FDBRegistry__EmptySymbol\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FDBRegistry__InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FDBRegistry__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FDBRegistry__InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FDBRegistry__NotCollectionOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FDBRegistry__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"privateColumns\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"publicColumns\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proofSetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"CollectionStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_TOKEN_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMENTS_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_PERIOD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"batchMintNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateColumns\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicColumns\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proofSetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCollections\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getCollectionEffectivePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getCollectionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateColumns\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicColumns\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proofSetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct FDBRegistry.Collection\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getCollectionReserveCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserCollectionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserCollections\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateColumns\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicColumns\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateCid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"proofSetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct FDBRegistry.Collection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"hasNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isCollectionOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"publicCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateCid\",\"type\":\"string\"}],\"name\":\"setCollectionCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"toggleCollectionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FDBRegistry.sol\":\"FDBRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5267\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd45a5b1d0e451376b08e1bc7e332426c24382053300acf0ac667be1b8abb6cc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xddab643169f47a2c5291afafcbfdca045d9e6835553307d090bc048b6dabd0ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\\n     */\\n    function toDataWithIntendedValidatorHash(\\n        address validator,\\n        bytes32 messageHash\\n    ) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, hex\\\"19_00\\\")\\n            mstore(0x02, shl(96, validator))\\n            mstore(0x16, messageHash)\\n            digest := keccak256(0x00, 0x36)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Parse time-weighted average price (TWAP) from two consecutive price updates for the given `priceIds`.\\n    ///\\n    /// This method calculates TWAP between two data points by processing the difference in cumulative price values\\n    /// divided by the time period. It requires exactly two updates that contain valid price information\\n    /// for all the requested price IDs.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the updateData array.\\n    ///\\n    /// @dev Reverts if:\\n    /// - The transferred fee is not sufficient\\n    /// - The updateData is invalid or malformed\\n    /// - The updateData array does not contain exactly 2 updates\\n    /// - There is no update for any of the given `priceIds`\\n    /// - The time ordering between data points is invalid (start time must be before end time)\\n    /// @param updateData Array containing exactly two price updates (start and end points for TWAP calculation)\\n    /// @param priceIds Array of price ids to calculate TWAP for\\n    /// @return twapPriceFeeds Array of TWAP price feeds corresponding to the given `priceIds` (with the same order)\\n    function parseTwapPriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds\\n    )\\n        external\\n        payable\\n        returns (PythStructs.TwapPriceFeed[] memory twapPriceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @dev Same as `parsePriceFeedUpdates`, but also returns the Pythnet slot\\n    /// associated with each price update.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    /// @return slots Array of the Pythnet slot corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesWithSlots(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    )\\n        external\\n        payable\\n        returns (\\n            PythStructs.PriceFeed[] memory priceFeeds,\\n            uint64[] memory slots\\n        );\\n}\\n\",\"keccak256\":\"0x2252ae4ecda607c5e6bc121334075ec6b6e619c5b73e9ceb4b57d3fba7762055\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when the TWAP price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param startTime Start time of the TWAP.\\n    /// @param endTime End time of the TWAP.\\n    /// @param twapPrice Price of the TWAP.\\n    /// @param twapConf Confidence interval of the TWAP.\\n    /// @param downSlotsRatio Down slot ratio of the TWAP.\\n    event TwapPriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 startTime,\\n        uint64 endTime,\\n        int64 twapPrice,\\n        uint64 twapConf,\\n        uint32 downSlotsRatio\\n    );\\n}\\n\",\"keccak256\":\"0xd67239becd2c39bd9d065830be24e70606f5747ab31b8818bea849d09ac17ddc\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n\\n    struct TwapPriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Start time of the TWAP\\n        uint64 startTime;\\n        // End time of the TWAP\\n        uint64 endTime;\\n        // TWAP price\\n        Price twap;\\n        // Down slot ratio represents the ratio of price feed updates that were missed or unavailable\\n        // during the TWAP period, expressed as a fixed-point number between 0 and 1e6 (100%).\\n        // For example:\\n        //   - 0 means all price updates were available\\n        //   - 500_000 means 50% of updates were missed\\n        //   - 1_000_000 means all updates were missed\\n        // This can be used to assess the quality/reliability of the TWAP calculation.\\n        // Applications should define a maximum acceptable ratio (e.g. 100000 for 10%)\\n        // and revert if downSlotsRatio exceeds it.\\n        uint32 downSlotsRatio;\\n    }\\n\\n    // Information used to calculate time-weighted average prices (TWAP)\\n    struct TwapPriceInfo {\\n        // slot 1\\n        int128 cumulativePrice;\\n        uint128 cumulativeConf;\\n        // slot 2\\n        uint64 numDownSlots;\\n        uint64 publishSlot;\\n        uint64 publishTime;\\n        uint64 prevPublishTime;\\n        // slot 3\\n        int32 expo;\\n    }\\n}\\n\",\"keccak256\":\"0x474436bf0d558cc9b2c00a9d0ce318147acdf7963f34ef4acadb9248e65bbc7b\",\"license\":\"Apache-2.0\"},\"contracts/FDBRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./NFT.sol\\\";\\nimport \\\"./fws/payments/Payments.sol\\\";\\nimport \\\"./fws/PandoraService.sol\\\";\\n\\nerror FDBRegistry__EmptyName();\\nerror FDBRegistry__EmptySymbol();\\nerror FDBRegistry__NotCollectionOwner();\\nerror FDBRegistry__InsufficientPayment();\\nerror FDBRegistry__InsufficientBalance();\\nerror FDBRegistry__TransferFailed();\\nerror FDBRegistry__InsufficientAllowance();\\n\\ncontract FDBRegistry {\\n    string public constant BASE_TOKEN_URI =\\n        \\\"https://pub-f1180ac09e05439c9475cf61f4ce0099.r2.dev/metadata/\\\";\\n\\n    // Fee distribution constants (in percentage)\\n    uint256 public constant DEPLOYER_FEE_PERCENT = 10; // 10% to deployer\\n    uint256 public constant PAYMENTS_FEE_PERCENT = 10; // 10% to FWS payments\\n    \\n    // Reserve cost calculation constants\\n    uint256 public constant RESERVE_PERIOD_DAYS = 7; // 7 days reserve period\\n\\n    // ERC20 token used for payments\\n    IERC20 private immutable paymentToken;\\n\\n    // PandoraService contract reference\\n    PandoraService private immutable pandoraService;\\n\\n    // Contract deployer address for fee collection\\n    address private immutable deployer;\\n\\n    struct Collection {\\n        address nftContract;\\n        address owner;\\n        string name;\\n        string symbol;\\n        string description;\\n        string privateColumns;\\n        string publicColumns;\\n        string publicCid;\\n        string privateCid;\\n        uint256 proofSetId;\\n        uint256 price;\\n        uint256 size;\\n        uint256 createdAt;\\n        bool isActive;\\n    }\\n\\n    mapping(address => Collection[]) private s_userCollections;\\n    mapping(address => Collection) private s_collectionInfo;\\n    mapping(address => uint256) private s_balances;\\n    address[] private s_allCollections;\\n    uint256 private s_totalCollections;\\n\\n    event CollectionCreated(\\n        address indexed nftContract,\\n        address indexed owner,\\n        string name,\\n        string symbol,\\n        string description,\\n        string privateColumns,\\n        string publicColumns,\\n        uint256 proofSetId,\\n        uint256 price,\\n        uint256 size,\\n        uint256 indexed collectionId\\n    );\\n\\n    event CollectionStatusUpdated(address indexed nftContract, bool isActive);\\n\\n    event NFTPurchased(\\n        address indexed nftContract,\\n        address indexed buyer,\\n        uint256 indexed tokenId,\\n        uint256 price\\n    );\\n\\n    event BalanceWithdrawn(address indexed owner, uint256 amount);\\n\\n    constructor(address _paymentToken, address _pandoraServer) {\\n        require(_paymentToken != address(0), \\\"FDBRegistry: Payment token address cannot be zero\\\");\\n        require(_pandoraServer != address(0), \\\"FDBRegistry: PandoraServer address cannot be zero\\\");\\n\\n        paymentToken = IERC20(_paymentToken);\\n        pandoraService = PandoraService(_pandoraServer);\\n        deployer = msg.sender;\\n    }\\n\\n    function createCollection(\\n        string memory name,\\n        string memory symbol,\\n        string memory description,\\n        string memory privateColumns,\\n        string memory publicColumns,\\n        uint256 proofSetId,\\n        uint256 price,\\n        uint256 size\\n    ) external returns (address) {\\n        if (bytes(name).length == 0) {\\n            revert FDBRegistry__EmptyName();\\n        }\\n        if (bytes(symbol).length == 0) {\\n            revert FDBRegistry__EmptySymbol();\\n        }\\n\\n        NFT newNFT = new NFT(name, symbol, BASE_TOKEN_URI);\\n        address nftAddress = address(newNFT);\\n\\n        Collection memory newCollection = Collection({\\n            nftContract: nftAddress,\\n            owner: msg.sender,\\n            name: name,\\n            symbol: symbol,\\n            description: description,\\n            privateColumns: privateColumns,\\n            publicColumns: publicColumns,\\n            publicCid: \\\"\\\",\\n            privateCid: \\\"\\\",\\n            proofSetId: proofSetId,\\n            price: price,\\n            size: size,\\n            createdAt: block.timestamp,\\n            isActive: false\\n        });\\n\\n        s_userCollections[msg.sender].push(newCollection);\\n        s_collectionInfo[nftAddress] = newCollection;\\n        s_allCollections.push(nftAddress);\\n        s_totalCollections++;\\n\\n        emit CollectionCreated(\\n            nftAddress,\\n            msg.sender,\\n            name,\\n            symbol,\\n            description,\\n            privateColumns,\\n            publicColumns,\\n            proofSetId,\\n            price,\\n            size,\\n            s_totalCollections - 1\\n        );\\n\\n        return nftAddress;\\n    }\\n\\n    function purchase(address nftContract) external returns (uint256) {\\n        Collection storage collection = s_collectionInfo[nftContract];\\n        require(collection.nftContract != address(0), \\\"FDBRegistry: Collection does not exist\\\");\\n        require(collection.isActive, \\\"FDBRegistry: Collection is not active\\\");\\n\\n        // Calculate total payment amount (collection price + reserve cost)\\n        uint256 reserveCost = this.getCollectionReserveCost(nftContract);\\n        uint256 totalPayment = collection.price + reserveCost;\\n\\n        // Check if buyer has sufficient token balance\\n        if (paymentToken.balanceOf(msg.sender) < totalPayment) {\\n            revert FDBRegistry__InsufficientPayment();\\n        }\\n\\n        // Check if buyer has given sufficient allowance\\n        if (paymentToken.allowance(msg.sender, address(this)) < totalPayment) {\\n            revert FDBRegistry__InsufficientAllowance();\\n        }\\n\\n        // Transfer tokens from buyer to contract\\n        bool success = paymentToken.transferFrom(msg.sender, address(this), totalPayment);\\n        if (!success) {\\n            revert FDBRegistry__TransferFailed();\\n        }\\n\\n        NFT nft = NFT(nftContract);\\n        uint256 tokenId = nft.mint(msg.sender);\\n\\n        // Split payment: deployer fee from collection price, reserve cost to owner, rest to data provider\\n        uint256 deployerFee = (collection.price * DEPLOYER_FEE_PERCENT) / 100;\\n        uint256 lockupPeriodIncrement = pandoraService.EPOCHS_PER_DAY() * RESERVE_PERIOD_DAYS;\\n        uint256 ownerAmount = collection.price - deployerFee + reserveCost; // Owner gets collection price portion + reserve cost\\n\\n        // Add deployer fee to deployer's balance\\n        s_balances[deployer] += deployerFee;\\n\\n        // Increase rail lockup period through PandoraService (no token transfer, just period extension)\\n        pandoraService.increaseLockupPeriod(collection.proofSetId, lockupPeriodIncrement);\\n\\n        // Add collection amount plus reserve cost to collection owner's balance\\n        s_balances[collection.owner] += ownerAmount;\\n\\n        emit NFTPurchased(nftContract, msg.sender, tokenId, totalPayment);\\n\\n        return tokenId;\\n    }\\n\\n    function withdraw() external {\\n        uint256 balance = s_balances[msg.sender];\\n        if (balance == 0) {\\n            revert FDBRegistry__InsufficientBalance();\\n        }\\n\\n        s_balances[msg.sender] = 0;\\n\\n        bool success = paymentToken.transfer(msg.sender, balance);\\n        if (!success) {\\n            s_balances[msg.sender] = balance;\\n            revert FDBRegistry__TransferFailed();\\n        }\\n\\n        emit BalanceWithdrawn(msg.sender, balance);\\n    }\\n\\n    function hasNFT(address nftContract) external view returns (bool) {\\n        Collection storage collection = s_collectionInfo[nftContract];\\n        require(collection.nftContract != address(0), \\\"FDBRegistry: Collection does not exist\\\");\\n\\n        NFT nft = NFT(nftContract);\\n        return nft.balanceOf(msg.sender) > 0;\\n    }\\n\\n    function mintNFT(address nftContract, address to) external returns (uint256) {\\n        Collection storage collection = s_collectionInfo[nftContract];\\n        if (collection.owner != msg.sender) {\\n            revert FDBRegistry__NotCollectionOwner();\\n        }\\n        require(collection.isActive, \\\"FDBRegistry: Collection is not active\\\");\\n\\n        NFT nft = NFT(nftContract);\\n        uint256 tokenId = nft.mint(to);\\n\\n        return tokenId;\\n    }\\n\\n    function batchMintNFTs(\\n        address nftContract,\\n        address[] memory recipients\\n    ) external returns (uint256[] memory) {\\n        Collection storage collection = s_collectionInfo[nftContract];\\n        if (collection.owner != msg.sender) {\\n            revert FDBRegistry__NotCollectionOwner();\\n        }\\n        require(collection.isActive, \\\"FDBRegistry: Collection is not active\\\");\\n        require(recipients.length > 0, \\\"FDBRegistry: No recipients provided\\\");\\n        require(recipients.length <= 100, \\\"FDBRegistry: Too many recipients\\\");\\n\\n        NFT nft = NFT(nftContract);\\n        uint256[] memory tokenIds = new uint256[](recipients.length);\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            tokenIds[i] = nft.mint(recipients[i]);\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    function toggleCollectionStatus(address nftContract) external {\\n        Collection storage collection = s_collectionInfo[nftContract];\\n        if (collection.owner != msg.sender) {\\n            revert FDBRegistry__NotCollectionOwner();\\n        }\\n\\n        collection.isActive = !collection.isActive;\\n\\n        emit CollectionStatusUpdated(nftContract, collection.isActive);\\n    }\\n\\n    function getUserCollections(address user) external view returns (Collection[] memory) {\\n        return s_userCollections[user];\\n    } \\n\\n    function getCollectionInfo(address nftContract) external view returns (Collection memory) {\\n        return s_collectionInfo[nftContract];\\n    }\\n\\n    function getAllCollections() external view returns (address[] memory) {\\n        return s_allCollections;\\n    }\\n\\n    function getTotalCollections() external view returns (uint256) {\\n        return s_totalCollections;\\n    }\\n\\n    function isCollectionOwner(address nftContract, address user) external view returns (bool) {\\n        return s_collectionInfo[nftContract].owner == user;\\n    }\\n\\n    function getUserCollectionCount(address user) external view returns (uint256) {\\n        return s_userCollections[user].length;\\n    }\\n\\n    function getActiveCollections() external view returns (address[] memory) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 0; i < s_allCollections.length; i++) {\\n            if (s_collectionInfo[s_allCollections[i]].isActive) {\\n                activeCount++;\\n            }\\n        }\\n\\n        address[] memory activeCollections = new address[](activeCount);\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 i = 0; i < s_allCollections.length; i++) {\\n            if (s_collectionInfo[s_allCollections[i]].isActive) {\\n                activeCollections[currentIndex] = s_allCollections[i];\\n                currentIndex++;\\n            }\\n        }\\n\\n        return activeCollections;\\n    }\\n\\n    function setCollectionCid(\\n        address nftContract,\\n        string memory publicCid,\\n        string memory privateCid\\n    ) external {\\n        Collection storage collection = s_collectionInfo[nftContract];\\n        if (collection.owner != msg.sender) {\\n            revert FDBRegistry__NotCollectionOwner();\\n        }\\n        collection.publicCid = publicCid;\\n        collection.privateCid = privateCid;\\n\\n        if (!collection.isActive) {\\n            collection.isActive = true;\\n            emit CollectionStatusUpdated(nftContract, true);\\n        }\\n    }\\n\\n    function getBalance(address user) external view returns (uint256) {\\n        return s_balances[user];\\n    }\\n\\n    function getPaymentToken() external view returns (address) {\\n        return address(paymentToken);\\n    }\\n\\n    function getCollectionReserveCost(address nftContract) external view returns (uint256) {\\n        uint256 proofSetId = s_collectionInfo[nftContract].proofSetId;\\n        uint256 dailyCost = pandoraService.getProofSetDailyCost(proofSetId);\\n        return dailyCost * RESERVE_PERIOD_DAYS;\\n    }\\n\\n    function getCollectionEffectivePrice(address nftContract) external view returns (uint256) {\\n        uint256 collectionPrice = s_collectionInfo[nftContract].price;\\n        uint256 reserveCost = this.getCollectionReserveCost(nftContract);\\n        return collectionPrice + reserveCost;\\n    }\\n}\\n\",\"keccak256\":\"0x0ca9b5eca22a67af6f9e8ad7e8aa3ad33d61c0dc1c37e120c1549b5d2d998a5e\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract NFT is ERC721, Ownable {\\n    string private _baseTokenURI;\\n    uint256 private _currentTokenId;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) Ownable(msg.sender) {\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    function mint(address to) public onlyOwner returns (uint256) {\\n        uint256 tokenId = _currentTokenId;\\n        _currentTokenId++;\\n        _safeMint(to, tokenId);\\n        return tokenId;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0xa61261106510f954fdf5c7ce581934e2422a3e1a3a2e3056cc44a605c4959181\",\"license\":\"MIT\"},\"contracts/fws/PandoraService.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {PDPVerifier, PDPListener} from \\\"../pdp/PDPVerifier.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {Payments, IArbiter} from \\\"./payments/Payments.sol\\\";\\n\\n/// @title PandoraService\\n/// @notice An implementation of PDP Listener with payment integration.\\n/// @dev This contract extends SimplePDPService by adding payment functionality\\n/// using the Payments contract. It creates payment rails for storage providers\\n/// and adjusts payment rates based on storage size. Also implements arbitration\\n/// to reduce payments for faulted epochs.\\ncontract PandoraService is\\n    PDPListener,\\n    IArbiter,\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    EIP712Upgradeable\\n{\\n    event FaultRecord(uint256 indexed proofSetId, uint256 periodsFaulted, uint256 deadline);\\n    event ProofSetRailCreated(\\n        uint256 indexed proofSetId,\\n        uint256 railId,\\n        address payer,\\n        address payee,\\n        bool withCDN\\n    );\\n    event RailRateUpdated(uint256 indexed proofSetId, uint256 railId, uint256 newRate);\\n    event RootMetadataAdded(uint256 indexed proofSetId, uint256 rootId, string metadata);\\n\\n    // Constants\\n    uint256 public constant NO_CHALLENGE_SCHEDULED = 0;\\n    uint256 public constant NO_PROVING_DEADLINE = 0;\\n    uint256 public constant MIB_IN_BYTES = 1024 * 1024; // 1 MiB in bytes\\n    uint256 public constant BYTES_PER_LEAF = 32; // Each leaf is 32 bytes\\n    uint256 public constant COMMISSION_MAX_BPS = 10000; // 100% in basis points\\n    uint256 public constant EPOCHS_PER_DAY = 2880;\\n    uint256 public constant DEFAULT_LOCKUP_PERIOD = EPOCHS_PER_DAY * 10; // 10 days in epochs\\n    uint256 public constant GIB_IN_BYTES = MIB_IN_BYTES * 1024; // 1 GiB in bytes\\n    uint256 public constant TIB_IN_BYTES = GIB_IN_BYTES * 1024; // 1 TiB in bytes\\n    uint256 public constant EPOCHS_PER_MONTH = EPOCHS_PER_DAY * 30;\\n\\n    // Pricing constants\\n    uint256 public constant PRICE_PER_TIB_PER_MONTH_NO_CDN = 2; // 2 USDFC per TiB per month without CDN\\n    uint256 public constant PRICE_PER_TIB_PER_MONTH_WITH_CDN = 3; // 3 USDFC per TiB per month with CDN\\n\\n    // Dynamic fee values based on token decimals\\n    uint256 public PROOFSET_CREATION_FEE; // 0.1 USDFC with correct decimals\\n\\n    // Token decimals\\n    uint8 public tokenDecimals;\\n\\n    // External contract addresses\\n    address public pdpVerifierAddress;\\n    address public paymentsContractAddress;\\n    address public usdfcTokenAddress;\\n\\n    // Commission rate in basis points (100 = 1%)\\n    uint256 public operatorCommissionBps;\\n\\n    // Commission rates for different service types\\n    uint256 public basicServiceCommissionBps; // 5% for basic service (no CDN add-on)\\n    uint256 public cdnServiceCommissionBps; // 40% for CDN service\\n\\n    // Mapping from client address to clientDataSetId\\n    mapping(address => uint256) public clientDataSetIDs;\\n    // Mapping from proof set ID to root ID to metadata\\n    mapping(uint256 => mapping(uint256 => string)) public proofSetRootMetadata;\\n\\n    // Storage for proof set payment information\\n    struct ProofSetInfo {\\n        uint256 railId; // ID of the payment rail\\n        address payer; // Address paying for storage\\n        address payee; // SP's beneficiary address\\n        uint256 commissionBps; // Commission rate for this proof set (dynamic based on whether the client purchases CDN add-on)\\n        string metadata; // General metadata for the proof set\\n        string[] rootMetadata; // Array of metadata for each root\\n        uint256 clientDataSetId; // ClientDataSetID\\n        bool withCDN; // Whether the proof set is registered for CDN add-on\\n    }\\n\\n    // Decode structure for proof set creation extra data\\n    struct ProofSetCreateData {\\n        string metadata;\\n        address payer;\\n        bool withCDN;\\n        bytes signature; // Authentication signature\\n    }\\n\\n    // Structure for service pricing information\\n    struct ServicePricing {\\n        uint256 pricePerTiBPerMonthNoCDN; // Price without CDN add-on (2 USDFC per TiB per month)\\n        uint256 pricePerTiBPerMonthWithCDN; // Price with CDN add-on (3 USDFC per TiB per month)\\n        address tokenAddress; // Address of the USDFC token\\n        uint256 epochsPerMonth; // Number of epochs in a month\\n    }\\n\\n    // Mappings\\n    mapping(uint256 => uint256) public provingDeadlines;\\n    mapping(uint256 => bool) public provenThisPeriod;\\n    mapping(uint256 => ProofSetInfo) public proofSetInfo;\\n    mapping(address => uint256[]) public clientProofSets;\\n\\n    // Mapping from rail ID to proof set ID for arbitration\\n    mapping(uint256 => uint256) public railToProofSet;\\n\\n    // Event for arbitration\\n    event PaymentArbitrated(\\n        uint256 railId,\\n        uint256 proofSetId,\\n        uint256 originalAmount,\\n        uint256 modifiedAmount,\\n        uint256 faultedEpochs\\n    );\\n\\n    // Track which proving periods have valid proofs (proofSetId => periodId => isProven)\\n    mapping(uint256 => mapping(uint256 => bool)) public provenPeriods;\\n\\n    // Track when proving was first activated for each proof set\\n    mapping(uint256 => uint256) public provingActivationEpoch;\\n\\n    // ========== Storage Provider Registry State ==========\\n\\n    uint256 public nextServiceProviderId = 1;\\n\\n    struct ApprovedProviderInfo {\\n        address owner;\\n        string pdpUrl;\\n        string pieceRetrievalUrl;\\n        uint256 registeredAt;\\n        uint256 approvedAt;\\n    }\\n\\n    struct PendingProviderInfo {\\n        string pdpUrl;\\n        string pieceRetrievalUrl;\\n        uint256 registeredAt;\\n    }\\n\\n    mapping(uint256 => ApprovedProviderInfo) public approvedProviders;\\n\\n    mapping(address => bool) public approvedProvidersMap;\\n\\n    mapping(address => PendingProviderInfo) public pendingProviders;\\n\\n    mapping(address => uint256) public providerToId;\\n\\n    // Events for SP registry\\n    event ProviderRegistered(address indexed provider, string pdpUrl, string pieceRetrievalUrl);\\n    event ProviderApproved(address indexed provider, uint256 indexed providerId);\\n    event ProviderRejected(address indexed provider);\\n    event ProviderRemoved(address indexed provider, uint256 indexed providerId);\\n\\n    // EIP-712 Type hashes\\n    bytes32 private constant CREATE_PROOFSET_TYPEHASH =\\n        keccak256(\\\"CreateProofSet(uint256 clientDataSetId,bool withCDN,address payee)\\\");\\n\\n    bytes32 private constant CID_TYPEHASH = keccak256(\\\"Cid(bytes data)\\\");\\n\\n    bytes32 private constant ROOTDATA_TYPEHASH =\\n        keccak256(\\\"RootData(Cid root,uint256 rawSize)Cid(bytes data)\\\");\\n\\n    bytes32 private constant ADD_ROOTS_TYPEHASH =\\n        keccak256(\\n            \\\"AddRoots(uint256 clientDataSetId,uint256 firstAdded,RootData[] rootData)Cid(bytes data)RootData(Cid root,uint256 rawSize)\\\"\\n        );\\n\\n    bytes32 private constant SCHEDULE_REMOVALS_TYPEHASH =\\n        keccak256(\\\"ScheduleRemovals(uint256 clientDataSetId,uint256[] rootIds)\\\");\\n\\n    bytes32 private constant DELETE_PROOFSET_TYPEHASH =\\n        keccak256(\\\"DeleteProofSet(uint256 clientDataSetId)\\\");\\n\\n    // Modifier to ensure only the PDP verifier contract can call certain functions\\n    modifier onlyPDPVerifier() {\\n        require(msg.sender == pdpVerifierAddress, \\\"Caller is not the PDP verifier\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _pdpVerifierAddress,\\n        address _paymentsContractAddress,\\n        address _usdfcTokenAddress,\\n        uint256 _initialOperatorCommissionBps\\n    ) public initializer {\\n        __Ownable_init(msg.sender);\\n        __UUPSUpgradeable_init();\\n        __EIP712_init(\\\"PandoraService\\\", \\\"1\\\");\\n\\n        require(_pdpVerifierAddress != address(0), \\\"PDP verifier address cannot be zero\\\");\\n        require(_paymentsContractAddress != address(0), \\\"Payments contract address cannot be zero\\\");\\n        require(_usdfcTokenAddress != address(0), \\\"USDFC token address cannot be zero\\\");\\n        require(_initialOperatorCommissionBps <= COMMISSION_MAX_BPS, \\\"Commission exceeds maximum\\\");\\n\\n        pdpVerifierAddress = _pdpVerifierAddress;\\n        paymentsContractAddress = _paymentsContractAddress;\\n        usdfcTokenAddress = _usdfcTokenAddress;\\n        operatorCommissionBps = _initialOperatorCommissionBps;\\n\\n        // Set commission rates: 5% for basic, 40% for service w/ CDN add-on\\n        basicServiceCommissionBps = 500; // 5%\\n        cdnServiceCommissionBps = 4000; // 40%\\n\\n        // Read token decimals from the USDFC token contract\\n        tokenDecimals = IERC20Metadata(_usdfcTokenAddress).decimals();\\n\\n        // Initialize the fee constants based on the actual token decimals\\n        PROOFSET_CREATION_FEE = (1 * 10 ** tokenDecimals) / 10; // 0.1 USDFC\\n        nextServiceProviderId = 1;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @notice Updates the service commission rates\\n     * @dev Only callable by the contract owner\\n     * @param newBasicCommissionBps New commission rate for basic service (no CDN) in basis points\\n     * @param newCdnCommissionBps New commission rate for CDN service in basis points\\n     */\\n    function updateServiceCommission(\\n        uint256 newBasicCommissionBps,\\n        uint256 newCdnCommissionBps\\n    ) external onlyOwner {\\n        require(newBasicCommissionBps <= COMMISSION_MAX_BPS, \\\"Basic commission exceeds maximum\\\");\\n        require(newCdnCommissionBps <= COMMISSION_MAX_BPS, \\\"CDN commission exceeds maximum\\\");\\n        basicServiceCommissionBps = newBasicCommissionBps;\\n        cdnServiceCommissionBps = newCdnCommissionBps;\\n    }\\n\\n    // SLA specification functions setting values for PDP service providers\\n    // Max number of epochs between two consecutive proofs\\n    function getMaxProvingPeriod() public pure returns (uint64) {\\n        return 2880;\\n    }\\n\\n    // Number of epochs at the end of a proving period during which a\\n    // proof of possession can be submitted\\n    function challengeWindow() public pure returns (uint256) {\\n        return 60;\\n    }\\n\\n    // Initial value for challenge window start\\n    // Can be used for first call to nextProvingPeriod\\n    function initChallengeWindowStart() public view returns (uint256) {\\n        return block.number + getMaxProvingPeriod() - challengeWindow();\\n    }\\n\\n    // The start of the challenge window for the current proving period\\n    function thisChallengeWindowStart(uint256 setId) public view returns (uint256) {\\n        if (provingDeadlines[setId] == NO_PROVING_DEADLINE) {\\n            revert(\\\"Proving period not yet initialized\\\");\\n        }\\n\\n        uint256 periodsSkipped;\\n        // Proving period is open 0 skipped periods\\n        if (block.number <= provingDeadlines[setId]) {\\n            periodsSkipped = 0;\\n        } else {\\n            // Proving period has closed possibly some skipped periods\\n            periodsSkipped =\\n                1 +\\n                (block.number - (provingDeadlines[setId] + 1)) /\\n                getMaxProvingPeriod();\\n        }\\n        return provingDeadlines[setId] + periodsSkipped * getMaxProvingPeriod() - challengeWindow();\\n    }\\n\\n    // The start of the NEXT OPEN proving period's challenge window\\n    // Useful for querying before nextProvingPeriod to determine challengeEpoch to submit for nextProvingPeriod\\n    function nextChallengeWindowStart(uint256 setId) public view returns (uint256) {\\n        if (provingDeadlines[setId] == NO_PROVING_DEADLINE) {\\n            revert(\\\"Proving period not yet initialized\\\");\\n        }\\n        // If the current period is open this is the next period's challenge window\\n        if (block.number <= provingDeadlines[setId]) {\\n            return thisChallengeWindowStart(setId) + getMaxProvingPeriod();\\n        }\\n        // If the current period is not yet open this is the current period's challenge window\\n        return thisChallengeWindowStart(setId);\\n    }\\n\\n    // Challenges / merkle inclusion proofs provided per proof set\\n    function getChallengesPerProof() public pure returns (uint64) {\\n        return 5;\\n    }\\n\\n    // Getters\\n    function getAllApprovedProviders() external view returns (ApprovedProviderInfo[] memory) {\\n        // Handle edge case: no providers have been registered\\n        if (nextServiceProviderId == 1) {\\n            return new ApprovedProviderInfo[](0);\\n        }\\n\\n        // First pass: Count non-empty providers (those with non-zero owner address)\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i < nextServiceProviderId; i++) {\\n            if (approvedProviders[i].owner != address(0)) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Handle edge case: all providers have been removed\\n        if (activeCount == 0) {\\n            return new ApprovedProviderInfo[](0);\\n        }\\n\\n        // Create correctly-sized array\\n        ApprovedProviderInfo[] memory providers = new ApprovedProviderInfo[](activeCount);\\n\\n        // Second pass: Fill array with only active providers\\n        uint256 currentIndex = 0;\\n        for (uint256 i = 1; i < nextServiceProviderId; i++) {\\n            if (approvedProviders[i].owner != address(0)) {\\n                providers[currentIndex] = approvedProviders[i];\\n                currentIndex++;\\n            }\\n        }\\n\\n        return providers;\\n    }\\n\\n    // Listener interface methods\\n    /**\\n     * @notice Handles proof set creation by creating a payment rail\\n     * @dev Called by the PDPVerifier contract when a new proof set is created\\n     * @param proofSetId The ID of the newly created proof set\\n     * @param creator The address that created the proof set and will receive payments\\n     * @param extraData Encoded data containing metadata, payer information, and signature\\n     */\\n    function proofSetCreated(\\n        uint256 proofSetId,\\n        address creator,\\n        bytes calldata extraData\\n    ) external onlyPDPVerifier {\\n        // Decode the extra data to get the metadata, payer address, and signature\\n        require(extraData.length > 0, \\\"Extra data required for proof set creation\\\");\\n        ProofSetCreateData memory createData = decodeProofSetCreateData(extraData);\\n\\n        // Validate the addresses\\n        require(createData.payer != address(0), \\\"Payer address cannot be zero\\\");\\n        require(creator != address(0), \\\"Creator address cannot be zero\\\");\\n\\n        // Check if the storage provider is whitelisted\\n        require(approvedProvidersMap[creator], \\\"Storage provider not approved\\\");\\n\\n        // Update client state\\n        uint256 clientDataSetId = clientDataSetIDs[createData.payer]++;\\n        clientProofSets[createData.payer].push(proofSetId);\\n\\n        // Verify the client's signature\\n        require(\\n            verifyCreateProofSetSignature(\\n                createData.payer,\\n                clientDataSetId,\\n                creator,\\n                createData.withCDN,\\n                createData.signature\\n            ),\\n            \\\"Invalid signature for proof set creation\\\"\\n        );\\n        // Initialize the ProofSetInfo struct\\n        ProofSetInfo storage info = proofSetInfo[proofSetId];\\n        info.payer = createData.payer;\\n        info.payee = creator; // Using creator as the payee\\n        info.metadata = createData.metadata;\\n        info.commissionBps = createData.withCDN\\n            ? cdnServiceCommissionBps\\n            : basicServiceCommissionBps;\\n        info.clientDataSetId = clientDataSetId;\\n        info.withCDN = createData.withCDN;\\n\\n        // Note: The payer must have pre-approved this contract to spend USDFC tokens before creating the proof set\\n\\n        // Create the payment rail using the Payments contract\\n        Payments payments = Payments(paymentsContractAddress);\\n        uint256 railId = payments.createRail(\\n            usdfcTokenAddress, // token address\\n            createData.payer, // from (payer)\\n            creator, // proofset creator, SPs in  most cases\\n            address(this), // this contract acts as the arbiter\\n            info.commissionBps // commission rate based on CDN usage\\n        );\\n\\n        // Store the rail ID\\n        info.railId = railId;\\n\\n        // Store reverse mapping from rail ID to proof set ID for arbitration\\n        railToProofSet[railId] = proofSetId;\\n\\n        // First, set a lockupFixed value that's at least equal to the one-time payment\\n        // This is necessary because modifyRailPayment requires that lockupFixed >= oneTimePayment\\n        payments.modifyRailLockup(\\n            railId,\\n            DEFAULT_LOCKUP_PERIOD,\\n            PROOFSET_CREATION_FEE // lockupFixed equal to the one-time payment amount\\n        );\\n\\n        // Charge the one-time proof set creation fee\\n        // This is a payment from payer to proofset creator of a fixed amount\\n        payments.modifyRailPayment(\\n            railId,\\n            0, // Initial rate is 0, will be updated when roots are added\\n            PROOFSET_CREATION_FEE // One-time payment amount\\n        );\\n\\n        // Emit event for tracking\\n        emit ProofSetRailCreated(proofSetId, railId, createData.payer, creator, createData.withCDN);\\n    }\\n\\n    /**\\n     * @notice Handles proof set deletion and terminates the payment rail\\n     * @dev Called by the PDPVerifier contract when a proof set is deleted\\n     * @param proofSetId The ID of the proof set being deleted\\n     * @param extraData Signature for authentication\\n     */\\n    function proofSetDeleted(\\n        uint256 proofSetId,\\n        uint256, // deletedLeafCount, - not used\\n        bytes calldata extraData\\n    ) external onlyPDPVerifier {\\n        // Verify the proof set exists in our mapping\\n        ProofSetInfo storage info = proofSetInfo[proofSetId];\\n        require(info.railId != 0, \\\"Proof set not registered with payment system\\\");\\n        bytes memory signature = abi.decode(extraData, (bytes));\\n\\n        // Get the payer address for this proof set\\n        address payer = proofSetInfo[proofSetId].payer;\\n\\n        // Verify the client's signature\\n        require(\\n            verifyDeleteProofSetSignature(payer, info.clientDataSetId, signature),\\n            \\\"Not authorized to delete proof set\\\"\\n        );\\n        // TODO Proofset deletion logic\\n    }\\n\\n    /**\\n     * @notice Handles roots being added to a proof set and stores associated metadata\\n     * @dev Called by the PDPVerifier contract when roots are added to a proof set\\n     * @param proofSetId The ID of the proof set\\n     * @param firstAdded The ID of the first root added\\n     * @param rootData Array of root data objects\\n     * @param extraData Encoded metadata, and signature\\n     */\\n    function rootsAdded(\\n        uint256 proofSetId,\\n        uint256 firstAdded,\\n        PDPVerifier.RootData[] memory rootData,\\n        bytes calldata extraData\\n    ) external onlyPDPVerifier {\\n        // Verify the proof set exists in our mapping\\n        ProofSetInfo storage info = proofSetInfo[proofSetId];\\n        require(info.railId != 0, \\\"Proof set not registered with payment system\\\");\\n\\n        // Get the payer address for this proof set\\n        address payer = info.payer;\\n        require(extraData.length > 0, \\\"Extra data required for adding roots\\\");\\n        // Decode the extra data\\n        (bytes memory signature, string memory metadata) = abi.decode(extraData, (bytes, string));\\n\\n        // Verify the signature\\n        require(\\n            verifyAddRootsSignature(payer, info.clientDataSetId, rootData, firstAdded, signature),\\n            \\\"Invalid signature for adding roots\\\"\\n        );\\n\\n        // Store metadata for each new root\\n        for (uint256 i = 0; i < rootData.length; i++) {\\n            uint256 rootId = firstAdded + i;\\n            proofSetRootMetadata[proofSetId][rootId] = metadata;\\n            emit RootMetadataAdded(proofSetId, rootId, metadata);\\n        }\\n    }\\n\\n    function rootsScheduledRemove(\\n        uint256 proofSetId,\\n        uint256[] memory rootIds,\\n        bytes calldata extraData\\n    ) external onlyPDPVerifier {\\n        // Verify the proof set exists in our mapping\\n        ProofSetInfo storage info = proofSetInfo[proofSetId];\\n        require(info.railId != 0, \\\"Proof set not registered with payment system\\\");\\n\\n        // Get the payer address for this proof set\\n        address payer = info.payer;\\n\\n        // Decode the signature from extraData\\n        require(extraData.length > 0, \\\"Extra data required for scheduling removals\\\");\\n        bytes memory signature = abi.decode(extraData, (bytes));\\n\\n        // Verify the signature\\n        require(\\n            verifyScheduleRemovalsSignature(payer, info.clientDataSetId, rootIds, signature),\\n            \\\"Invalid signature for scheduling root removals\\\"\\n        );\\n\\n        // Additional logic for scheduling removals can be added here\\n    }\\n\\n    // possession proven checks for correct challenge count and reverts if too low\\n    // it also checks that proofs are not late and emits a fault record if so\\n    function possessionProven(\\n        uint256 proofSetId,\\n        uint256 /*challengedLeafCount*/,\\n        uint256 /*seed*/,\\n        uint256 challengeCount\\n    ) external onlyPDPVerifier {\\n        if (provenThisPeriod[proofSetId]) {\\n            revert(\\n                \\\"Only one proof of possession allowed per proving period. Open a new proving period.\\\"\\n            );\\n        }\\n        if (challengeCount < getChallengesPerProof()) {\\n            revert(\\\"Invalid challenge count < 5\\\");\\n        }\\n        if (provingDeadlines[proofSetId] == NO_PROVING_DEADLINE) {\\n            revert(\\\"Proving not yet started\\\");\\n        }\\n        // check for proof outside of challenge window\\n        if (provingDeadlines[proofSetId] < block.number) {\\n            revert(\\\"Current proving period passed. Open a new proving period.\\\");\\n        }\\n\\n        if (provingDeadlines[proofSetId] - challengeWindow() > block.number) {\\n            revert(\\\"Too early. Wait for challenge window to open\\\");\\n        }\\n        provenThisPeriod[proofSetId] = true;\\n        uint256 currentPeriod = getProvingPeriodForEpoch(proofSetId, block.number);\\n        provenPeriods[proofSetId][currentPeriod] = true;\\n    }\\n\\n    // nextProvingPeriod checks for unsubmitted proof in which case it emits a fault event\\n    // Additionally it enforces constraints on the update of its state:\\n    // 1. One update per proving period.\\n    // 2. Next challenge epoch must fall within the challenge window in the last challengeWindow()\\n    //    epochs of the proving period.\\n    //\\n    // In the payment version, it also updates the payment rate based on the current storage size.\\n    function nextProvingPeriod(\\n        uint256 proofSetId,\\n        uint256 challengeEpoch,\\n        uint256 leafCount,\\n        bytes calldata\\n    ) external onlyPDPVerifier {\\n        // initialize state for new proofset\\n        if (provingDeadlines[proofSetId] == NO_PROVING_DEADLINE) {\\n            uint256 firstDeadline = block.number + getMaxProvingPeriod();\\n            if (\\n                challengeEpoch < firstDeadline - challengeWindow() || challengeEpoch > firstDeadline\\n            ) {\\n                revert(\\\"Next challenge epoch must fall within the next challenge window\\\");\\n            }\\n            provingDeadlines[proofSetId] = firstDeadline;\\n            provenThisPeriod[proofSetId] = false;\\n\\n            // Initialize the activation epoch when proving first starts\\n            // This marks when the proof set became active for proving\\n            provingActivationEpoch[proofSetId] = block.number;\\n\\n            // Update the payment rate\\n            updateRailPaymentRate(proofSetId, leafCount);\\n\\n            return;\\n        }\\n\\n        // Revert when proving period not yet open\\n        // Can only get here if calling nextProvingPeriod multiple times within the same proving period\\n        uint256 prevDeadline = provingDeadlines[proofSetId] - getMaxProvingPeriod();\\n        if (block.number <= prevDeadline) {\\n            revert(\\\"One call to nextProvingPeriod allowed per proving period\\\");\\n        }\\n\\n        uint256 periodsSkipped;\\n        // Proving period is open 0 skipped periods\\n        if (block.number <= provingDeadlines[proofSetId]) {\\n            periodsSkipped = 0;\\n        } else {\\n            // Proving period has closed possibly some skipped periods\\n            periodsSkipped =\\n                (block.number - (provingDeadlines[proofSetId] + 1)) /\\n                getMaxProvingPeriod();\\n        }\\n\\n        uint256 nextDeadline;\\n        // the proofset has become empty and provingDeadline is set inactive\\n        if (challengeEpoch == NO_CHALLENGE_SCHEDULED) {\\n            nextDeadline = NO_PROVING_DEADLINE;\\n        } else {\\n            nextDeadline =\\n                provingDeadlines[proofSetId] +\\n                getMaxProvingPeriod() *\\n                (periodsSkipped + 1);\\n            if (\\n                challengeEpoch < nextDeadline - challengeWindow() || challengeEpoch > nextDeadline\\n            ) {\\n                revert(\\\"Next challenge epoch must fall within the next challenge window\\\");\\n            }\\n        }\\n        uint256 faultPeriods = periodsSkipped;\\n        if (!provenThisPeriod[proofSetId]) {\\n            // include previous unproven period\\n            faultPeriods += 1;\\n        }\\n        if (faultPeriods > 0) {\\n            emit FaultRecord(proofSetId, faultPeriods, provingDeadlines[proofSetId]);\\n        }\\n\\n        // Record the status of the current/previous proving period that's ending\\n        if (provingDeadlines[proofSetId] != NO_PROVING_DEADLINE) {\\n            // Determine the period ID that just completed\\n            uint256 completedPeriodId = getProvingPeriodForEpoch(\\n                proofSetId,\\n                provingDeadlines[proofSetId] - 1\\n            );\\n\\n            // Record whether this period was proven\\n            provenPeriods[proofSetId][completedPeriodId] = provenThisPeriod[proofSetId];\\n        }\\n\\n        provingDeadlines[proofSetId] = nextDeadline;\\n        provenThisPeriod[proofSetId] = false;\\n\\n        // Update the payment rate based on current proof set size\\n        updateRailPaymentRate(proofSetId, leafCount);\\n    }\\n\\n    function updateRailPaymentRate(uint256 proofSetId, uint256 leafCount) internal {\\n        // Revert if no payment rail is configured for this proof set\\n        require(proofSetInfo[proofSetId].railId != 0, \\\"No payment rail configured\\\");\\n\\n        uint256 newRatePerEpoch = 0; // Default to 0 for empty proof sets\\n\\n        uint256 totalBytes = getProofSetSizeInBytes(leafCount);\\n        // Get the withCDN flag from the proof set info\\n        bool withCDN = proofSetInfo[proofSetId].withCDN;\\n        newRatePerEpoch = calculateStorageRatePerEpoch(totalBytes, withCDN);\\n\\n        // Update the rail payment rate\\n        Payments payments = Payments(paymentsContractAddress);\\n        uint256 railId = proofSetInfo[proofSetId].railId;\\n\\n        // Call modifyRailPayment with the new rate and no one-time payment\\n        payments.modifyRailPayment(\\n            railId,\\n            newRatePerEpoch,\\n            0 // No one-time payment during rate update\\n        );\\n\\n        emit RailRateUpdated(proofSetId, railId, newRatePerEpoch);\\n    }\\n\\n    /**\\n     * @notice Determines which proving period an epoch belongs to\\n     * @dev For a given epoch, calculates the period ID based on activation time\\n     * @param proofSetId The ID of the proof set\\n     * @param epoch The epoch to check\\n     * @return The period ID this epoch belongs to, or type(uint256).max if before activation\\n     */\\n    function getProvingPeriodForEpoch(\\n        uint256 proofSetId,\\n        uint256 epoch\\n    ) public view returns (uint256) {\\n        uint256 activationEpoch = provingActivationEpoch[proofSetId];\\n\\n        // If proving wasn't activated or epoch is before activation\\n        if (activationEpoch == 0 || epoch < activationEpoch) {\\n            return type(uint256).max; // Invalid period\\n        }\\n\\n        // Calculate periods since activation\\n        // For example, if activation is at epoch 1000 and proving period is 2880:\\n        // - Epoch 1000-3879 is period 0\\n        // - Epoch 3880-6759 is period 1\\n        // and so on\\n        return (epoch - activationEpoch) / getMaxProvingPeriod();\\n    }\\n\\n    /**\\n     * @notice Checks if a specific epoch has been proven\\n     * @dev Returns true only if the epoch belongs to a proven proving period\\n     * @param proofSetId The ID of the proof set to check\\n     * @param epoch The epoch to check\\n     * @return True if the epoch has been proven, false otherwise\\n     */\\n    function isEpochProven(uint256 proofSetId, uint256 epoch) public view returns (bool) {\\n        // Check if proof set is active\\n        if (provingActivationEpoch[proofSetId] == 0) {\\n            return false;\\n        }\\n\\n        // Check if this epoch is before activation\\n        if (epoch < provingActivationEpoch[proofSetId]) {\\n            return false;\\n        }\\n\\n        // Check if this epoch is in the future (beyond current block)\\n        if (epoch > block.number) {\\n            return false;\\n        }\\n\\n        // Get the period this epoch belongs to\\n        uint256 periodId = getProvingPeriodForEpoch(proofSetId, epoch);\\n\\n        // Special case: current ongoing proving period\\n        uint256 currentPeriod = getProvingPeriodForEpoch(proofSetId, block.number);\\n        if (periodId == currentPeriod) {\\n            // For the current period, check if it has been proven already\\n            return provenThisPeriod[proofSetId];\\n        }\\n\\n        // For past periods, check the provenPeriods mapping\\n        return provenPeriods[proofSetId][periodId];\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Calculate the per-epoch rate based on total storage size and CDN usage\\n     * @dev Rate is 2 USDFC per TiB per month without CDN, 3 USDFC per TiB per month with CDN.\\n     * @param totalBytes Total size of the stored data in bytes\\n     * @param withCDN Whether CDN is enabled for the proof set\\n     * @return ratePerEpoch The calculated rate per epoch in the token's smallest unit\\n     */\\n    function calculateStorageRatePerEpoch(\\n        uint256 totalBytes,\\n        bool withCDN\\n    ) public view returns (uint256) {\\n        // Determine the rate based on CDN usage using constants\\n        uint256 ratePerTiBPerMonth = withCDN\\n            ? PRICE_PER_TIB_PER_MONTH_WITH_CDN\\n            : PRICE_PER_TIB_PER_MONTH_NO_CDN;\\n\\n        uint256 numerator = totalBytes * ratePerTiBPerMonth * (10 ** uint256(tokenDecimals));\\n        uint256 denominator = TIB_IN_BYTES * EPOCHS_PER_MONTH;\\n\\n        // Ensure denominator is not zero (shouldn't happen with constants)\\n        require(denominator > 0, \\\"Denominator cannot be zero\\\");\\n\\n        uint256 ratePerEpoch = numerator / denominator;\\n\\n        // Ensure minimum rate is 0.00001 USDFC if calculation results in 0 due to rounding.\\n        // This prevents charging 0 for very small sizes due to integer division.\\n        if (ratePerEpoch == 0 && totalBytes > 0) {\\n            uint256 minRate = (1 * 10 ** uint256(tokenDecimals)) / 100000;\\n            return minRate;\\n        }\\n\\n        return ratePerEpoch;\\n    }\\n\\n    /**\\n     * @notice Decode extra data for proof set creation\\n     * @param extraData The encoded extra data from PDPVerifier\\n     * @return decoded The decoded ProofSetCreateData struct\\n     */\\n    function decodeProofSetCreateData(\\n        bytes calldata extraData\\n    ) internal pure returns (ProofSetCreateData memory) {\\n        (string memory metadata, address payer, bool withCDN, bytes memory signature) = abi.decode(\\n            extraData,\\n            (string, address, bool, bytes)\\n        );\\n\\n        return\\n            ProofSetCreateData({\\n                metadata: metadata,\\n                payer: payer,\\n                withCDN: withCDN,\\n                signature: signature\\n            });\\n    }\\n\\n    /**\\n     * @notice Get the total size of a proof set in bytes\\n     * @param leafCount Number of leaves in the proof set\\n     * @return totalBytes Total size in bytes\\n     */\\n    function getProofSetSizeInBytes(uint256 leafCount) public pure returns (uint256) {\\n        return leafCount * BYTES_PER_LEAF;\\n    }\\n\\n    /**\\n     * @notice Get the leaf count for a given proof set\\n     * @dev Queries PDPVerifier for leaf count\\n     * @param proofSetId The ID of the proof set\\n     * @return The number of leaves in the proof set\\n     */\\n    function getProofSetLeafCount(uint256 proofSetId) external view returns (uint256) {\\n        // Create PDPVerifier instance and get leaf count\\n        PDPVerifier pdpVerifier = PDPVerifier(pdpVerifierAddress);\\n        uint256 leafCount = pdpVerifier.getProofSetLeafCount(proofSetId);\\n        // Return the leaf count directly\\n        return leafCount;\\n    }\\n\\n    // --- Public getter functions ---\\n\\n    /**\\n     * @notice Get proof set information by ID\\n     * @param proofSetId The ID of the proof set\\n     * @return The proof set information struct\\n     */\\n    function getProofSet(uint256 proofSetId) external view returns (ProofSetInfo memory) {\\n        return proofSetInfo[proofSetId];\\n    }\\n\\n    /**\\n     * @notice Get the payment rail ID for a proof set\\n     * @param proofSetId The ID of the proof set\\n     * @return The payment rail ID, or 0 if not found\\n     */\\n    function getProofSetRailId(uint256 proofSetId) external view returns (uint256) {\\n        return proofSetInfo[proofSetId].railId;\\n    }\\n\\n    /**\\n     * @notice Get payer and payee addresses for a proof set\\n     * @param proofSetId The ID of the proof set\\n     * @return payer The address paying for storage\\n     * @return payee The address receiving payments (SP beneficiary)\\n     */\\n    function getProofSetParties(\\n        uint256 proofSetId\\n    ) external view returns (address payer, address payee) {\\n        ProofSetInfo storage info = proofSetInfo[proofSetId];\\n        return (info.payer, info.payee);\\n    }\\n\\n    /**\\n     * @notice Get the metadata for a proof set\\n     * @param proofSetId The ID of the proof set\\n     * @return The metadata string\\n     */\\n    function getProofSetMetadata(uint256 proofSetId) external view returns (string memory) {\\n        return proofSetInfo[proofSetId].metadata;\\n    }\\n\\n    /**\\n     * @notice Get CDN enabled for a proof set\\n     * @param proofSetId The ID of the proof set\\n     * @return CDN enabled\\n     */\\n    function getProofSetWithCDN(uint256 proofSetId) external view returns (bool) {\\n        return proofSetInfo[proofSetId].withCDN;\\n    }\\n\\n    /**\\n     * @notice Get the metadata for a specific root\\n     * @param proofSetId The ID of the proof set\\n     * @param rootId The ID of the root\\n     * @return The metadata string for the root\\n     */\\n    function getRootMetadata(\\n        uint256 proofSetId,\\n        uint256 rootId\\n    ) external view returns (string memory) {\\n        return proofSetRootMetadata[proofSetId][rootId];\\n    }\\n\\n    /**\\n     * @notice Get the service pricing information\\n     * @return pricing A struct containing pricing details for both CDN and non-CDN storage\\n     */\\n    function getServicePrice() external view returns (ServicePricing memory pricing) {\\n        pricing = ServicePricing({\\n            pricePerTiBPerMonthNoCDN: PRICE_PER_TIB_PER_MONTH_NO_CDN *\\n                (10 ** uint256(tokenDecimals)),\\n            pricePerTiBPerMonthWithCDN: PRICE_PER_TIB_PER_MONTH_WITH_CDN *\\n                (10 ** uint256(tokenDecimals)),\\n            tokenAddress: usdfcTokenAddress,\\n            epochsPerMonth: EPOCHS_PER_MONTH\\n        });\\n    }\\n\\n    /**\\n     * @notice Get the payments contract address\\n     * @return The address of the payments contract\\n     */\\n    function getPaymentsContract() external view returns (address) {\\n        return paymentsContractAddress;\\n    }\\n\\n    /**\\n     * @notice Get the effective rates after commission for both service types\\n     * @return basicServiceFee Service fee for basic service (per TiB per month)\\n     * @return spPaymentBasic SP payment for basic service (per TiB per month)\\n     * @return cdnServiceFee Service fee with CDN service (per TiB per month)\\n     * @return spPaymentWithCDN SP payment with CDN service (per TiB per month)\\n     */\\n    function getEffectiveRates()\\n        external\\n        view\\n        returns (\\n            uint256 basicServiceFee,\\n            uint256 spPaymentBasic,\\n            uint256 cdnServiceFee,\\n            uint256 spPaymentWithCDN\\n        )\\n    {\\n        uint256 basicTotal = PRICE_PER_TIB_PER_MONTH_NO_CDN * (10 ** uint256(tokenDecimals));\\n        uint256 cdnTotal = PRICE_PER_TIB_PER_MONTH_WITH_CDN * (10 ** uint256(tokenDecimals));\\n\\n        // Basic service (5% commission = 0.1 USDFC service, 1.9 USDFC to SP)\\n        basicServiceFee = (basicTotal * basicServiceCommissionBps) / COMMISSION_MAX_BPS;\\n        spPaymentBasic = basicTotal - basicServiceFee;\\n\\n        // CDN service (40% commission = 1.2 USDFC service, 1.8 USDFC to SP)\\n        cdnServiceFee = (cdnTotal * cdnServiceCommissionBps) / COMMISSION_MAX_BPS;\\n        spPaymentWithCDN = cdnTotal - cdnServiceFee;\\n    }\\n\\n    /**\\n     * @notice Calculate the daily cost for a proof set\\n     * @dev Calculates cost per day based on proof set size and CDN usage from stored info\\n     * @param proofSetId The ID of the proof set\\n     * @return dailyCost The total cost per day in the token's smallest unit\\n     */\\n    function getProofSetDailyCost(uint256 proofSetId) external view returns (uint256 dailyCost) {\\n        uint256 leafCount = this.getProofSetLeafCount(proofSetId);\\n        uint256 sizeBytes = getProofSetSizeInBytes(leafCount);\\n        bool withCDN = proofSetInfo[proofSetId].withCDN;\\n        uint256 pricePerEpoch = calculateStorageRatePerEpoch(sizeBytes, withCDN);\\n        return pricePerEpoch * EPOCHS_PER_DAY;\\n    }\\n\\n    /**\\n     * @notice Verifies a signature for the CreateProofSet operation\\n     * @param payer The address of the payer who should have signed the message\\n     * @param clientDataSetId The unique ID for the client's dataset\\n     * @param signature The signature bytes (v, r, s)\\n     * @return True if the signature is valid, false otherwise\\n     */\\n    function verifyCreateProofSetSignature(\\n        address payer,\\n        uint256 clientDataSetId,\\n        address payee,\\n        bool withCDN,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        // Prepare the message hash that was signed\\n        bytes32 structHash = keccak256(\\n            abi.encode(CREATE_PROOFSET_TYPEHASH, clientDataSetId, withCDN, payee)\\n        );\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n\\n        // Recover signer address from the signature\\n        address recoveredSigner = recoverSigner(digest, signature);\\n\\n        // Check if the recovered signer matches the expected payer\\n        return recoveredSigner == payer;\\n    }\\n\\n    /**\\n     * @notice Verifies a signature for the AddRoots operation\\n     * @param payer The address of the payer who should have signed the message\\n     * @param clientDataSetId The ID of the proof set\\n     * @param rootDataArray Array of RootSignatureData structures\\n     * @param signature The signature bytes (v, r, s)\\n     * @return True if the signature is valid, false otherwise\\n     */\\n    function verifyAddRootsSignature(\\n        address payer,\\n        uint256 clientDataSetId,\\n        PDPVerifier.RootData[] memory rootDataArray,\\n        uint256 firstAdded,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        // Hash each RootData struct\\n        bytes32[] memory rootDataHashes = new bytes32[](rootDataArray.length);\\n        for (uint256 i = 0; i < rootDataArray.length; i++) {\\n            // Hash the Cid struct\\n            bytes32 cidHash = keccak256(\\n                abi.encode(CID_TYPEHASH, keccak256(rootDataArray[i].root.data))\\n            );\\n            // Hash the RootData struct\\n            rootDataHashes[i] = keccak256(\\n                abi.encode(ROOTDATA_TYPEHASH, cidHash, rootDataArray[i].rawSize)\\n            );\\n        }\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                ADD_ROOTS_TYPEHASH,\\n                clientDataSetId,\\n                firstAdded,\\n                keccak256(abi.encodePacked(rootDataHashes))\\n            )\\n        );\\n\\n        // Create the message hash\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n\\n        // Recover signer address from the signature\\n        address recoveredSigner = recoverSigner(digest, signature);\\n\\n        // Check if the recovered signer matches the expected payer\\n        return recoveredSigner == payer;\\n    }\\n\\n    /**\\n     * @notice Verifies a signature for the ScheduleRemovals operation\\n     * @param payer The address of the payer who should have signed the message\\n     * @param clientDataSetId The ID of the proof set\\n     * @param rootIds Array of root IDs to be removed\\n     * @param signature The signature bytes (v, r, s)\\n     * @return True if the signature is valid, false otherwise\\n     */\\n    function verifyScheduleRemovalsSignature(\\n        address payer,\\n        uint256 clientDataSetId,\\n        uint256[] memory rootIds,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        // Prepare the message hash that was signed\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                SCHEDULE_REMOVALS_TYPEHASH,\\n                clientDataSetId,\\n                keccak256(abi.encodePacked(rootIds))\\n            )\\n        );\\n\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n\\n        // Recover signer address from the signature\\n        address recoveredSigner = recoverSigner(digest, signature);\\n\\n        // Check if the recovered signer matches the expected payer\\n        return recoveredSigner == payer;\\n    }\\n\\n    /**\\n     * @notice Verifies a signature for the DeleteProofSet operation\\n     * @param payer The address of the payer who should have signed the message\\n     * @param clientDataSetId The ID of the proof set\\n     * @param signature The signature bytes (v, r, s)\\n     * @return True if the signature is valid, false otherwise\\n     */\\n    function verifyDeleteProofSetSignature(\\n        address payer,\\n        uint256 clientDataSetId,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        // Prepare the message hash that was signed\\n        bytes32 structHash = keccak256(abi.encode(DELETE_PROOFSET_TYPEHASH, clientDataSetId));\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n\\n        // Recover signer address from the signature\\n        address recoveredSigner = recoverSigner(digest, signature);\\n\\n        // Check if the recovered signer matches the expected payer\\n        return recoveredSigner == payer;\\n    }\\n\\n    /**\\n     * @notice Recover the signer address from a signature\\n     * @param messageHash The signed message hash\\n     * @param signature The signature bytes (v, r, s)\\n     * @return The address that signed the message\\n     */\\n    function recoverSigner(\\n        bytes32 messageHash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        require(signature.length == 65, \\\"Invalid signature length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Extract r, s, v from the signature\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        // If v is not 27 or 28, adjust it (for some wallets)\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(\\n            v == 27 || v == 28,\\n            \\\"Unsupported signature 'v' value, we don't handle rare wrapped case\\\"\\n        );\\n\\n        // Recover and return the address\\n        return ecrecover(messageHash, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Register as a service provider\\n     * @dev SPs call this to register their URLs before approval\\n     * @param pdpUrl The URL for PDP services\\n     * @param pieceRetrievalUrl The URL for piece retrieval services\\n     */\\n    function registerServiceProvider(\\n        string calldata pdpUrl,\\n        string calldata pieceRetrievalUrl\\n    ) external {\\n        require(!approvedProvidersMap[msg.sender], \\\"Provider already approved\\\");\\n\\n        // Check if registration is already pending\\n        require(pendingProviders[msg.sender].registeredAt == 0, \\\"Registration already pending\\\");\\n\\n        // Store pending registration\\n        pendingProviders[msg.sender] = PendingProviderInfo({\\n            pdpUrl: pdpUrl,\\n            pieceRetrievalUrl: pieceRetrievalUrl,\\n            registeredAt: block.number\\n        });\\n\\n        emit ProviderRegistered(msg.sender, pdpUrl, pieceRetrievalUrl);\\n    }\\n\\n    /**\\n     * @notice Approve a pending service provider\\n     * @dev Only owner can approve providers\\n     * @param provider The address of the provider to approve\\n     */\\n    function approveServiceProvider(address provider) external onlyOwner {\\n        // Check if not already approved\\n        require(!approvedProvidersMap[provider], \\\"Provider already approved\\\");\\n        // Check if registration exists\\n        require(pendingProviders[provider].registeredAt > 0, \\\"No pending registration found\\\");\\n\\n        // Get pending registration data\\n        PendingProviderInfo memory pending = pendingProviders[provider];\\n\\n        // Assign ID and store provider info\\n        uint256 providerId = nextServiceProviderId++;\\n        approvedProviders[providerId] = ApprovedProviderInfo({\\n            owner: provider,\\n            pdpUrl: pending.pdpUrl,\\n            pieceRetrievalUrl: pending.pieceRetrievalUrl,\\n            registeredAt: pending.registeredAt,\\n            approvedAt: block.number\\n        });\\n\\n        approvedProvidersMap[provider] = true;\\n        providerToId[provider] = providerId;\\n\\n        // Clear pending registration\\n        delete pendingProviders[provider];\\n\\n        emit ProviderApproved(provider, providerId);\\n    }\\n\\n    /**\\n     * @notice Reject a pending service provider\\n     * @dev Only owner can reject providers\\n     * @param provider The address of the provider to reject\\n     */\\n    function rejectServiceProvider(address provider) external onlyOwner {\\n        // Check if registration exists\\n        require(pendingProviders[provider].registeredAt > 0, \\\"No pending registration found\\\");\\n        require(!approvedProvidersMap[provider], \\\"Provider already approved\\\");\\n\\n        // Update mappings\\n        approvedProvidersMap[provider] = false;\\n        providerToId[provider] = 0;\\n\\n        // Clear pending registration\\n        delete pendingProviders[provider];\\n\\n        emit ProviderRejected(provider);\\n    }\\n\\n    /**\\n     * @notice Remove an already approved service provider by ID\\n     * @dev Only owner can remove providers. This revokes their approved status.\\n     * @param providerId The ID of the provider to remove\\n     */\\n    function removeServiceProvider(uint256 providerId) external onlyOwner {\\n        // Validate provider ID\\n        require(providerId > 0 && providerId < nextServiceProviderId, \\\"Invalid provider ID\\\");\\n\\n        // Get provider info\\n        ApprovedProviderInfo memory providerInfo = approvedProviders[providerId];\\n        address providerAddress = providerInfo.owner;\\n        require(providerAddress != address(0), \\\"Provider not found\\\");\\n\\n        // Check if provider is currently approved\\n        require(approvedProvidersMap[providerAddress], \\\"Provider not approved\\\");\\n\\n        // Remove from approved mapping\\n        approvedProvidersMap[providerAddress] = false;\\n\\n        // Remove the provider ID mapping\\n        delete providerToId[providerAddress];\\n\\n        // Delete the provider info\\n        delete approvedProviders[providerId];\\n\\n        emit ProviderRemoved(providerAddress, providerId);\\n    }\\n\\n    /**\\n     * @notice Get service provider information by ID\\n     * @dev Only returns info for approved providers\\n     * @param providerId The ID of the service provider\\n     * @return The service provider information\\n     */\\n    function getApprovedProvider(\\n        uint256 providerId\\n    ) external view returns (ApprovedProviderInfo memory) {\\n        require(providerId > 0 && providerId < nextServiceProviderId, \\\"Invalid provider ID\\\");\\n        ApprovedProviderInfo memory provider = approvedProviders[providerId];\\n        require(provider.owner != address(0), \\\"Provider not found\\\");\\n        return provider;\\n    }\\n\\n    /**\\n     * @notice Check if a provider is approved\\n     * @param provider The address to check\\n     * @return True if approved, false otherwise\\n     */\\n    function isProviderApproved(address provider) external view returns (bool) {\\n        return approvedProvidersMap[provider];\\n    }\\n\\n    /**\\n     * @notice Get pending registration information\\n     * @param provider The address of the provider\\n     * @return The pending registration info\\n     */\\n    function getPendingProvider(\\n        address provider\\n    ) external view returns (PendingProviderInfo memory) {\\n        return pendingProviders[provider];\\n    }\\n\\n    /**\\n     * @notice Get the provider ID for a given address\\n     * @param provider The address of the provider\\n     * @return The provider ID (0 if not approved)\\n     */\\n    function getProviderIdByAddress(address provider) external view returns (uint256) {\\n        return providerToId[provider];\\n    }\\n\\n    /**\\n     * @notice Add a service provider directly without registration process\\n     * @dev Only owner can add providers directly. This bypasses the register+approve flow.\\n     * @param provider The address of the provider to add\\n     * @param pdpUrl The URL for PDP services\\n     * @param pieceRetrievalUrl The URL for piece retrieval services\\n     */\\n    function addServiceProvider(\\n        address provider,\\n        string calldata pdpUrl,\\n        string calldata pieceRetrievalUrl\\n    ) external onlyOwner {\\n        require(provider != address(0), \\\"Provider address cannot be zero\\\");\\n        require(!approvedProvidersMap[provider], \\\"Provider already approved\\\");\\n\\n        // Assign ID and store provider info\\n        uint256 providerId = nextServiceProviderId++;\\n        approvedProviders[providerId] = ApprovedProviderInfo({\\n            owner: provider,\\n            pdpUrl: pdpUrl,\\n            pieceRetrievalUrl: pieceRetrievalUrl,\\n            registeredAt: block.number,\\n            approvedAt: block.number\\n        });\\n\\n        approvedProvidersMap[provider] = true;\\n        providerToId[provider] = providerId;\\n\\n        // Clear any pending registration if it exists\\n        if (pendingProviders[provider].registeredAt > 0) {\\n            delete pendingProviders[provider];\\n        }\\n\\n        emit ProviderApproved(provider, providerId);\\n    }\\n\\n    function getClientProofSets(address client) public view returns (ProofSetInfo[] memory) {\\n        uint256[] memory proofSetIds = clientProofSets[client];\\n\\n        ProofSetInfo[] memory proofSets = new ProofSetInfo[](proofSetIds.length);\\n        for (uint256 i = 0; i < proofSetIds.length; i++) {\\n            uint256 proofSetId = proofSetIds[i];\\n            ProofSetInfo storage storageInfo = proofSetInfo[proofSetId];\\n            // Create a memory copy of the struct (excluding any mappings)\\n            proofSets[i] = ProofSetInfo({\\n                railId: storageInfo.railId,\\n                payer: storageInfo.payer,\\n                payee: storageInfo.payee,\\n                commissionBps: storageInfo.commissionBps,\\n                metadata: storageInfo.metadata,\\n                rootMetadata: storageInfo.rootMetadata,\\n                clientDataSetId: storageInfo.clientDataSetId,\\n                withCDN: storageInfo.withCDN\\n            });\\n        }\\n        return proofSets;\\n    }\\n\\n    /**\\n     * @notice Arbitrates payment based on faults in the given epoch range\\n     * @dev Implements the IArbiter interface function\\n\\n     * @param railId ID of the payment rail\\n     * @param proposedAmount The originally proposed payment amount\\n     * @param fromEpoch Starting epoch (exclusive)\\n     * @param toEpoch Ending epoch (inclusive)\\n     * @return result The arbitration result with modified amount and settlement information\\n     */\\n    function arbitratePayment(\\n        uint256 railId,\\n        uint256 proposedAmount,\\n        uint256 fromEpoch,\\n        uint256 toEpoch\\n    ) external override returns (ArbitrationResult memory result) {\\n        // Get the proof set ID associated with this rail\\n        uint256 proofSetId = railToProofSet[railId];\\n        require(proofSetId != 0, \\\"Rail not associated with any proof set\\\");\\n\\n        // Calculate the total number of epochs in the requested range\\n        uint256 totalEpochsRequested = toEpoch - fromEpoch;\\n        require(totalEpochsRequested > 0, \\\"Invalid epoch range\\\");\\n\\n        // If proving wasn't ever activated for this proof set, don't pay anything\\n        if (provingActivationEpoch[proofSetId] == 0) {\\n            return\\n                ArbitrationResult({\\n                    modifiedAmount: 0,\\n                    settleUpto: fromEpoch,\\n                    note: \\\"Proving never activated for this proof set\\\"\\n                });\\n        }\\n\\n        // Count proven epochs and find the last proven epoch\\n        uint256 provenEpochCount = 0;\\n        uint256 lastProvenEpoch = fromEpoch;\\n\\n        // Check each epoch in the range\\n        for (uint256 epoch = fromEpoch + 1; epoch <= toEpoch; epoch++) {\\n            bool isProven = isEpochProven(proofSetId, epoch);\\n\\n            if (isProven) {\\n                provenEpochCount++;\\n                lastProvenEpoch = epoch;\\n            }\\n        }\\n\\n        // If no epochs are proven, we can't settle anything\\n        if (provenEpochCount == 0) {\\n            return\\n                ArbitrationResult({\\n                    modifiedAmount: 0,\\n                    settleUpto: fromEpoch,\\n                    note: \\\"No proven epochs in the requested range\\\"\\n                });\\n        }\\n\\n        // Calculate the modified amount based on proven epochs\\n        uint256 modifiedAmount = (proposedAmount * provenEpochCount) / totalEpochsRequested;\\n\\n        // Calculate how many epochs were not proven (faulted)\\n        uint256 faultedEpochs = totalEpochsRequested - provenEpochCount;\\n\\n        // Emit event for logging\\n        emit PaymentArbitrated(railId, proofSetId, proposedAmount, modifiedAmount, faultedEpochs);\\n\\n        return\\n            ArbitrationResult({\\n                modifiedAmount: modifiedAmount,\\n                settleUpto: lastProvenEpoch, // Settle up to the last proven epoch\\n                note: \\\"\\\"\\n            });\\n    }\\n\\n    /**\\n     * @notice Increase the lockup period for a proof set's payment rail\\n     * @dev This function only modifies the rail lockup period without changing the fixed amount\\n     * @param proofSetId The ID of the proof set associated with the collection\\n     * @param increment The number of epochs to add to the current lockup period\\n     */\\n    function increaseLockupPeriod(uint256 proofSetId, uint256 increment) external {\\n        require(proofSetId != 0, \\\"Proof set ID cannot be zero\\\");\\n        require(increment > 0, \\\"Lockup period increase must be greater than zero\\\");\\n\\n        // Verify the proof set exists\\n        ProofSetInfo storage proofSetData = proofSetInfo[proofSetId];\\n        require(proofSetData.railId != 0, \\\"Proof set not found or has no associated rail\\\");\\n\\n        // Get the payments contract instance\\n        Payments payments = Payments(paymentsContractAddress);\\n\\n        // Get current rail information\\n        Payments.RailView memory rail = payments.getRail(proofSetData.railId);\\n\\n        // Modify rail lockup to increase the lockup period while keeping lockupFixed unchanged\\n        payments.modifyRailLockup(\\n            proofSetData.railId,\\n            rail.lockupPeriod + increment,\\n            rail.lockupFixed\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x12eb596275262567032dee320287f4c9e21eadc7e25076097b20d71788c629e7\",\"license\":\"UNLICENSED\"},\"contracts/fws/payments/Payments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./RateChangeQueue.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ninterface IArbiter {\\n    struct ArbitrationResult {\\n        // The actual payment amount determined by the arbiter after arbitration of a rail during settlement\\n        uint256 modifiedAmount;\\n        // The epoch up to and including which settlement should occur.\\n        uint256 settleUpto;\\n        // A placeholder note for any additional information the arbiter wants to send to the caller of `settleRail`\\n        string note;\\n    }\\n\\n    function arbitratePayment(\\n        uint256 railId,\\n        uint256 proposedAmount,\\n        // the epoch up to and including which the rail has already been settled\\n        uint256 fromEpoch,\\n        // the epoch up to and including which arbitration is requested; payment will be arbitrated for (toEpoch - fromEpoch) epochs\\n        uint256 toEpoch\\n    ) external returns (ArbitrationResult memory result);\\n}\\n\\n// @title Payments contract.\\ncontract Payments is\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    using RateChangeQueue for RateChangeQueue.Queue;\\n\\n    // Maximum commission rate in basis points (100% = 10000 BPS)\\n    uint256 public constant COMMISSION_MAX_BPS = 10000;\\n\\n    uint256 public constant PAYMENT_FEE_BPS = 10; //(0.1 % fee)\\n\\n    struct Account {\\n        uint256 funds;\\n        uint256 lockupCurrent;\\n        uint256 lockupRate;\\n        // epoch up to and including which lockup has been settled for the account\\n        uint256 lockupLastSettledAt;\\n    }\\n\\n    struct Rail {\\n        address token;\\n        address from;\\n        address to;\\n        address operator;\\n        address arbiter;\\n        uint256 paymentRate;\\n        uint256 lockupPeriod;\\n        uint256 lockupFixed;\\n        // epoch up to and including which this rail has been settled\\n        uint256 settledUpTo;\\n        RateChangeQueue.Queue rateChangeQueue;\\n        uint256 endEpoch; // Final epoch up to which the rail can be settled (0 if not terminated)\\n        // Operator commission rate in basis points (e.g., 100 BPS = 1%)\\n        uint256 commissionRateBps;\\n    }\\n\\n    struct OperatorApproval {\\n        bool isApproved;\\n        uint256 rateAllowance;\\n        uint256 lockupAllowance;\\n        uint256 rateUsage; // Track actual usage for rate\\n        uint256 lockupUsage; // Track actual usage for lockup\\n    }\\n\\n    struct PayeeCommissionLimit {\\n        uint256 maxBps;\\n        bool isSet;\\n    }\\n\\n    // Counter for generating unique rail IDs\\n    uint256 private _nextRailId = 1;\\n\\n    // token => owner => Account\\n    mapping(address => mapping(address => Account)) public accounts;\\n\\n    // railId => Rail\\n    mapping(uint256 => Rail) internal rails;\\n\\n    // Struct to hold rail data without the RateChangeQueue (for external returns)\\n    struct RailView {\\n        address token;\\n        address from;\\n        address to;\\n        address operator;\\n        address arbiter;\\n        uint256 paymentRate;\\n        uint256 lockupPeriod;\\n        uint256 lockupFixed;\\n        uint256 settledUpTo;\\n        uint256 endEpoch;\\n        // Operator commission rate in basis points (e.g., 100 BPS = 1%)\\n        uint256 commissionRateBps;\\n    }\\n\\n    // token => client => operator => Approval\\n    mapping(address => mapping(address => mapping(address => OperatorApproval)))\\n        public operatorApprovals;\\n\\n    // token => payee => max commission BPS \\n    mapping(address => mapping(address => PayeeCommissionLimit)) public payeeCommissionLimits;\\n\\n    // token => amount of accumulated fees owned by the contract owner\\n    mapping(address => uint256) public accumulatedFees;\\n    \\n    // Array to track all tokens that have ever accumulated fees\\n    address[] private feeTokens;\\n\\n    // Define a struct for rails by payee information\\n    struct RailInfo {\\n        uint256 railId; // The rail ID\\n        bool isTerminated; // True if rail is terminated\\n        uint256 endEpoch; // End epoch for terminated rails (0 for active rails)\\n    }\\n\\n    // token => payee => array of railIds\\n    mapping(address => mapping(address => uint256[])) private payeeRails;\\n\\n    // token => payer => array of railIds\\n    mapping(address => mapping(address => uint256[])) private payerRails;\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init(msg.sender);\\n        __UUPSUpgradeable_init();\\n        _nextRailId = 1;\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n    modifier validateRailActive(uint256 railId) {\\n        require(\\n            rails[railId].from != address(0),\\n            \\\"rail does not exist or is beyond it's last settlement after termination\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRailClient(uint256 railId) {\\n        require(\\n            rails[railId].from == msg.sender,\\n            \\\"only the rail client can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRailOperator(uint256 railId) {\\n        require(\\n            rails[railId].operator == msg.sender,\\n            \\\"only the rail operator can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRailParticipant(uint256 railId) {\\n        require(\\n            rails[railId].from == msg.sender ||\\n                rails[railId].operator == msg.sender ||\\n                rails[railId].to == msg.sender,\\n            \\\"failed to authorize: caller is not a rail participant\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validateRailNotTerminated(uint256 railId) {\\n        require(rails[railId].endEpoch == 0, \\\"rail already terminated\\\");\\n        _;\\n    }\\n\\n    modifier validateRailTerminated(uint256 railId) {\\n        require(\\n            isRailTerminated(rails[railId]),\\n            \\\"can only be used on terminated rails\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validateNonZeroAddress(address addr, string memory varName) {\\n        require(\\n            addr != address(0),\\n            string.concat(varName, \\\" address cannot be zero\\\")\\n        );\\n        _;\\n    }\\n\\n    modifier settleAccountLockupBeforeAndAfter(\\n        address token,\\n        address owner,\\n        bool settleFull\\n    ) {\\n        Account storage payer = accounts[token][owner];\\n\\n        // Before function execution\\n        performSettlementCheck(payer, settleFull, true);\\n\\n        _;\\n\\n        // After function execution\\n        performSettlementCheck(payer, settleFull, false);\\n    }\\n\\n    modifier settleAccountLockupBeforeAndAfterForRail(\\n        uint256 railId,\\n        bool settleFull,\\n        uint256 oneTimePayment\\n    ) {\\n        Rail storage rail = rails[railId];\\n        require(rails[railId].from != address(0), \\\"rail is inactive\\\");\\n\\n        Account storage payer = accounts[rail.token][rail.from];\\n\\n        require(\\n            rail.lockupFixed >= oneTimePayment,\\n            \\\"one time payment cannot be greater than rail lockupFixed\\\"\\n        );\\n\\n        // Before function execution\\n        performSettlementCheck(payer, settleFull, true);\\n\\n        // ---- EXECUTE FUNCTION\\n        _;\\n        // ---- FUNCTION EXECUTION COMPLETE\\n\\n        // After function execution\\n        performSettlementCheck(payer, settleFull, false);\\n    }\\n\\n    function performSettlementCheck(\\n        Account storage payer,\\n        bool settleFull,\\n        bool isBefore\\n    ) internal {\\n        require(\\n            payer.funds >= payer.lockupCurrent,\\n            isBefore\\n                ? \\\"invariant failure: insufficient funds to cover lockup before function execution\\\"\\n                : \\\"invariant failure: insufficient funds to cover lockup after function execution\\\"\\n        );\\n\\n        settleAccountLockup(payer);\\n\\n        // Verify full settlement if required\\n        // TODO: give the user feedback on what they need to deposit in their account to complete the operation.\\n        require(\\n            !settleFull || isAccountLockupFullySettled(payer),\\n            isBefore\\n                ? \\\"payers's account lockup target was not met as a precondition of the requested operation\\\"\\n                : \\\"the requested operation would cause the payer's account lockup target to exceed the funds available in the account\\\"\\n        );\\n\\n        require(\\n            payer.funds >= payer.lockupCurrent,\\n            isBefore\\n                ? \\\"invariant failure: insufficient funds to cover lockup before function execution\\\"\\n                : \\\"invariant failure: insufficient funds to cover lockup after function execution\\\"\\n        );\\n    }\\n\\n    /// @notice Gets the current state of the target rail or reverts if the rail isn't active.\\n    /// @param railId the ID of the rail.\\n    function getRail(\\n        uint256 railId\\n    ) external view validateRailActive(railId) returns (RailView memory) {\\n        Rail storage rail = rails[railId];\\n        return\\n            RailView({\\n                token: rail.token,\\n                from: rail.from,\\n                to: rail.to,\\n                operator: rail.operator,\\n                arbiter: rail.arbiter,\\n                paymentRate: rail.paymentRate,\\n                lockupPeriod: rail.lockupPeriod,\\n                lockupFixed: rail.lockupFixed,\\n                settledUpTo: rail.settledUpTo,\\n                endEpoch: rail.endEpoch,\\n                commissionRateBps: rail.commissionRateBps\\n            });\\n    }\\n\\n    /// @notice Updates the approval status and allowances for an operator on behalf of the message sender.\\n    /// @param token The ERC20 token address for which the approval is being set.\\n    /// @param operator The address of the operator whose approval is being modified.\\n    /// @param approved Whether the operator is approved (true) or not (false) to create new rails>\\n    /// @param rateAllowance The maximum payment rate the operator can set across all rails created by the operator on behalf of the message sender. If this is less than the current payment rate, the operator will only be able to reduce rates until they fall below the target.\\n    /// @param lockupAllowance The maximum amount of funds the operator can lock up on behalf of the message sender towards future payments. If this exceeds the current total amount of funds locked towards future payments, the operator will only be able to reduce future lockup.\\n    function setOperatorApproval(\\n        address token,\\n        address operator,\\n        bool approved,\\n        uint256 rateAllowance,\\n        uint256 lockupAllowance\\n    )\\n        external\\n        validateNonZeroAddress(token, \\\"token\\\")\\n        validateNonZeroAddress(operator, \\\"operator\\\")\\n    {\\n        OperatorApproval storage approval = operatorApprovals[token][\\n            msg.sender\\n        ][operator];\\n\\n        // Update approval status and allowances\\n        approval.isApproved = approved;\\n        approval.rateAllowance = rateAllowance;\\n        approval.lockupAllowance = lockupAllowance;\\n    }\\n\\n    /// @notice Sets the maximum commission rate (in BPS) the caller (payee) will accept for a given token.\\n    /// @param token The ERC20 token address.\\n    /// @param maxBps The maximum commission in basis points (0-10000).\\n    function setPayeeMaxCommission(address token, uint256 maxBps) external validateNonZeroAddress(token, \\\"token\\\") {\\n        require(maxBps <= COMMISSION_MAX_BPS, \\\"max commission exceeds maximum\\\");\\n        payeeCommissionLimits[token][msg.sender] = PayeeCommissionLimit({\\n            maxBps: maxBps,\\n            isSet: true\\n        });\\n    }\\n\\n    /// @notice Terminates a payment rail, preventing further payments after the rail's lockup period. After calling this method, the lockup period cannot be changed, and the rail's rate and fixed lockup may only be reduced.\\n    /// @param railId The ID of the rail to terminate.\\n    /// @custom:constraint Caller must be a rail client or operator.\\n    /// @custom:constraint Rail must be active and not already terminated.\\n    /// @custom:constraint If called by the client, the payer's account must be fully funded.\\n    /// @custom:constraint If called by the operator, the payer's funding status isn't checked.\\n    function terminateRail(\\n        uint256 railId\\n    )\\n        external\\n        validateRailActive(railId)\\n        nonReentrant\\n        validateRailNotTerminated(railId)\\n        settleAccountLockupBeforeAndAfterForRail(railId, false, 0)\\n    {\\n        Rail storage rail = rails[railId];\\n        Account storage payer = accounts[rail.token][rail.from];\\n\\n        // Only client with fully settled lockup or operator can terminate a rail\\n        require(\\n            (msg.sender == rail.from && isAccountLockupFullySettled(payer)) ||\\n                msg.sender == rail.operator,\\n            \\\"caller is not authorized: must be operator or client with settled lockup\\\"\\n        );\\n\\n        rail.endEpoch = payer.lockupLastSettledAt + rail.lockupPeriod;\\n\\n        // Remove the rail rate from account lockup rate but don't set rail rate to zero yet.\\n        // The rail rate will be used to settle the rail and so we can't zero it yet.\\n        // However, we remove the rail rate from the client lockup rate because we don't want to\\n        // lock funds for the rail beyond `rail.endEpoch` as we're exiting the rail\\n        // after that epoch.\\n        require(\\n            payer.lockupRate >= rail.paymentRate,\\n            \\\"lockup rate inconsistency\\\"\\n        );\\n        payer.lockupRate -= rail.paymentRate;\\n\\n        // Reduce operator rate allowance\\n        OperatorApproval storage operatorApproval = operatorApprovals[\\n            rail.token\\n        ][rail.from][rail.operator];\\n        updateOperatorRateUsage(operatorApproval, rail.paymentRate, 0);\\n    }\\n\\n    /// @notice Deposits tokens from the message sender's account into `to`'s account.\\n    /// @param token The ERC20 token address to deposit.\\n    /// @param to The address whose account will be credited.\\n    /// @param amount The amount of tokens to deposit.\\n    /// @custom:constraint The message sender must have approved this contract to spend the requested amount via the ERC-20 token (`token`).\\n    function deposit(\\n        address token,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n        nonReentrant\\n        validateNonZeroAddress(token, \\\"token\\\")\\n        validateNonZeroAddress(to, \\\"to\\\")\\n        settleAccountLockupBeforeAndAfter(token, to, false)\\n    {\\n        // Create account if it doesn't exist\\n        Account storage account = accounts[token][to];\\n\\n        // Transfer tokens from sender to contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Update account balance\\n        account.funds += amount;\\n    }\\n\\n    /// @notice Withdraws tokens from the caller's account to the caller's account, up to the amount of currently available tokens (the tokens not currently locked in rails).\\n    /// @param token The ERC20 token address to withdraw.\\n    /// @param amount The amount of tokens to withdraw.\\n    function withdraw(\\n        address token,\\n        uint256 amount\\n    )\\n        external\\n        nonReentrant\\n        validateNonZeroAddress(token, \\\"token\\\")\\n        settleAccountLockupBeforeAndAfter(token, msg.sender, true)\\n    {\\n        return withdrawToInternal(token, msg.sender, amount);\\n    }\\n\\n    /// @notice Withdraws tokens (`token`) from the caller's account to `to`, up to the amount of currently available tokens (the tokens not currently locked in rails).\\n    /// @param token The ERC20 token address to withdraw.\\n    /// @param to The address to receive the withdrawn tokens.\\n    /// @param amount The amount of tokens to withdraw.\\n    function withdrawTo(\\n        address token,\\n        address to,\\n        uint256 amount\\n    )\\n        external\\n        nonReentrant\\n        validateNonZeroAddress(token, \\\"token\\\")\\n        validateNonZeroAddress(to, \\\"to\\\")\\n        settleAccountLockupBeforeAndAfter(token, msg.sender, true)\\n    {\\n        return withdrawToInternal(token, to, amount);\\n    }\\n\\n    function withdrawToInternal(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        Account storage account = accounts[token][msg.sender];\\n        uint256 available = account.funds - account.lockupCurrent;\\n        require(\\n            amount <= available,\\n            \\\"insufficient unlocked funds for withdrawal\\\"\\n        );\\n        account.funds -= amount;\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /// @notice Create a new rail from `from` to `to`, operated by the caller.\\n    /// @param token The ERC20 token address for payments on this rail.\\n    /// @param from The client address (payer) for this rail.\\n    /// @param to The recipient address for payments on this rail.\\n    /// @param arbiter Optional address of an arbiter contract (can be address(0) for no arbitration).\\n    /// @param commissionRateBps Optional operator commission in basis points (0-10000).\\n    /// @return The ID of the newly created rail.\\n    /// @custom:constraint Caller must be approved as an operator by the client (from address).\\n    function createRail(\\n        address token,\\n        address from,\\n        address to,\\n        address arbiter,\\n        uint256 commissionRateBps\\n    )\\n        external\\n        nonReentrant\\n        validateNonZeroAddress(token, \\\"token\\\")\\n        validateNonZeroAddress(from, \\\"from\\\")\\n        validateNonZeroAddress(to, \\\"to\\\")\\n        returns (uint256)\\n    {\\n        address operator = msg.sender;\\n\\n        // Check if operator is approved - approval is required for rail creation\\n        OperatorApproval storage approval = operatorApprovals[token][from][\\n            operator\\n        ];\\n        require(approval.isApproved, \\\"operator not approved\\\");\\n\\n        // Validate commission rate\\n        require(\\n            commissionRateBps <= COMMISSION_MAX_BPS,\\n            \\\"commission rate exceeds maximum\\\"\\n        );\\n\\n        PayeeCommissionLimit memory payeeCommissionLimit = payeeCommissionLimits[token][to];\\n        if (payeeCommissionLimit.isSet) {\\n            require(\\n                commissionRateBps <= payeeCommissionLimit.maxBps,\\n                \\\"commission exceeds payee limit\\\"\\n            );\\n        }\\n\\n        uint256 railId = _nextRailId++;\\n\\n        Rail storage rail = rails[railId];\\n        rail.token = token;\\n        rail.from = from;\\n        rail.to = to;\\n        rail.operator = operator;\\n        rail.arbiter = arbiter;\\n        rail.settledUpTo = block.number;\\n        rail.endEpoch = 0;\\n        rail.commissionRateBps = commissionRateBps;\\n\\n        // Record this rail in the payee's and payer's lists\\n        payeeRails[token][to].push(railId);\\n        payerRails[token][from].push(railId);\\n\\n        return railId;\\n    }\\n\\n    /// @notice Modifies the fixed lockup and lockup period of a rail.\\n    /// - If the rail has already been terminated, the lockup period may not be altered and the fixed lockup may only be reduced.\\n    /// - If the rail is active, the lockup may only be modified if the payer's account is fully funded and will remain fully funded after the operation.\\n    /// @param railId The ID of the rail to modify.\\n    /// @param period The new lockup period (in epochs/blocks).\\n    /// @param lockupFixed The new fixed lockup amount.\\n    /// @custom:constraint Caller must be the rail operator.\\n    /// @custom:constraint Operator must have sufficient lockup allowance to cover any increases the lockup period or the fixed lockup.\\n    function modifyRailLockup(\\n        uint256 railId,\\n        uint256 period,\\n        uint256 lockupFixed\\n    )\\n        external\\n        validateRailActive(railId)\\n        onlyRailOperator(railId)\\n        nonReentrant\\n        settleAccountLockupBeforeAndAfterForRail(railId, false, 0)\\n    {\\n        Rail storage rail = rails[railId];\\n        bool isTerminated = isRailTerminated(rail);\\n\\n        if (isTerminated) {\\n            modifyTerminatedRailLockup(rail, period, lockupFixed);\\n        } else {\\n            modifyNonTerminatedRailLockup(rail, period, lockupFixed);\\n        }\\n    }\\n\\n    function modifyTerminatedRailLockup(\\n        Rail storage rail,\\n        uint256 period,\\n        uint256 lockupFixed\\n    ) internal {\\n        require(\\n            period == rail.lockupPeriod && lockupFixed <= rail.lockupFixed,\\n            \\\"failed to modify terminated rail: cannot change period or increase fixed lockup\\\"\\n        );\\n\\n        Account storage payer = accounts[rail.token][rail.from];\\n\\n        // Calculate the fixed lockup reduction - this is the only change allowed for terminated rails\\n        uint256 lockupReduction = rail.lockupFixed - lockupFixed;\\n\\n        // Update payer's lockup - subtract the exact reduction amount\\n        require(\\n            payer.lockupCurrent >= lockupReduction,\\n            \\\"payer's current lockup cannot be less than lockup reduction\\\"\\n        );\\n        payer.lockupCurrent -= lockupReduction;\\n\\n        // Reduce operator rate allowance\\n        OperatorApproval storage operatorApproval = operatorApprovals[\\n            rail.token\\n        ][rail.from][rail.operator];\\n        updateOperatorLockupUsage(\\n            operatorApproval,\\n            rail.lockupFixed,\\n            lockupFixed\\n        );\\n\\n        rail.lockupFixed = lockupFixed;\\n    }\\n\\n    function modifyNonTerminatedRailLockup(\\n        Rail storage rail,\\n        uint256 period,\\n        uint256 lockupFixed\\n    ) internal {\\n        Account storage payer = accounts[rail.token][rail.from];\\n\\n        // Don't allow changing the lockup period or increasing the fixed lockup unless the payer's\\n        // account is fully settled.\\n        if (!isAccountLockupFullySettled(payer)) {\\n            require(\\n                period == rail.lockupPeriod,\\n                \\\"cannot change the lockup period: insufficient funds to cover the current lockup\\\"\\n            );\\n            require(\\n                lockupFixed <= rail.lockupFixed,\\n                \\\"cannot increase the fixed lockup: insufficient funds to cover the current lockup\\\"\\n            );\\n        }\\n\\n        // Calculate current (old) lockup.\\n        uint256 oldLockup = rail.lockupFixed +\\n            (rail.paymentRate * rail.lockupPeriod);\\n\\n        // Calculate new lockup amount with new parameters\\n        uint256 newLockup = lockupFixed + (rail.paymentRate * period);\\n\\n        require(\\n            payer.lockupCurrent >= oldLockup,\\n            \\\"payer's current lockup cannot be less than old lockup\\\"\\n        );\\n\\n        // We blindly update the payer's lockup. If they don't have enough funds to cover the new\\n        // amount, we'll revert in the post-condition.\\n        payer.lockupCurrent = payer.lockupCurrent - oldLockup + newLockup;\\n\\n        OperatorApproval storage operatorApproval = operatorApprovals[\\n            rail.token\\n        ][rail.from][rail.operator];\\n        updateOperatorLockupUsage(operatorApproval, oldLockup, newLockup);\\n\\n        // Update rail lockup parameters\\n        rail.lockupPeriod = period;\\n        rail.lockupFixed = lockupFixed;\\n    }\\n\\n    /// @notice Modifies the payment rate and optionally makes a one-time payment.\\n    /// - If the rail has already been terminated, one-time payments can be made and the rate may always be decreased (but never increased) regardless of the status of the payer's account.\\n    /// - If the payer's account isn't fully funded and the rail is active (not terminated), the rail's payment rate may not be changed at all (increased or decreased).\\n    /// - Regardless of the payer's account status, one-time payments will always go through provided that the rail has sufficient fixed lockup to cover the payment.\\n    /// @param railId The ID of the rail to modify.\\n    /// @param newRate The new payment rate (per epoch). This new rate applies starting the next epoch after the current one.\\n    /// @param oneTimePayment Optional one-time payment amount to transfer immediately, taken out of the rail's fixed lockup.\\n    /// @custom:constraint Caller must be the rail operator.\\n    /// @custom:constraint Operator must have sufficient rate and lockup allowances for any increases.\\n    function modifyRailPayment(\\n        uint256 railId,\\n        uint256 newRate,\\n        uint256 oneTimePayment\\n    )\\n        external\\n        nonReentrant\\n        validateRailActive(railId)\\n        onlyRailOperator(railId)\\n        settleAccountLockupBeforeAndAfterForRail(railId, false, oneTimePayment)\\n    {\\n        Rail storage rail = rails[railId];\\n        Account storage payer = accounts[rail.token][rail.from];\\n        Account storage payee = accounts[rail.token][rail.to];\\n\\n        uint256 oldRate = rail.paymentRate;\\n        bool isTerminated = isRailTerminated(rail);\\n\\n        // Validate rate changes based on rail state and account lockup\\n        if (isTerminated) {\\n            if (block.number >= maxSettlementEpochForTerminatedRail(rail)) {\\n                return\\n                    modifyPaymentForTerminatedRailBeyondLastEpoch(\\n                        rail,\\n                        newRate,\\n                        oneTimePayment\\n                    );\\n            }\\n\\n            require(\\n                newRate <= oldRate,\\n                \\\"failed to modify rail: cannot change rate on terminated rail\\\"\\n            );\\n        } else {\\n            require(\\n                isAccountLockupFullySettled(payer) || newRate == oldRate,\\n                \\\"account lockup not fully settled; cannot change rate\\\"\\n            );\\n        }\\n\\n        // --- Settlement Prior to Rate Change ---\\n        handleRateChangeSettlement(railId, rail, oldRate, newRate);\\n\\n        // Calculate the effective lockup period\\n        uint256 effectiveLockupPeriod;\\n        if (isTerminated) {\\n            effectiveLockupPeriod = remainingEpochsForTerminatedRail(rail);\\n        } else {\\n            effectiveLockupPeriod = isAccountLockupFullySettled(payer)\\n                ? rail.lockupPeriod - (block.number - payer.lockupLastSettledAt)\\n                : 0;\\n        }\\n\\n        // Verify one-time payment doesn't exceed fixed lockup\\n        require(\\n            rail.lockupFixed >= oneTimePayment,\\n            \\\"one time payment cannot be greater than rail lockupFixed\\\"\\n        );\\n\\n        // Update the rail fixed lockup and payment rate\\n        rail.lockupFixed = rail.lockupFixed - oneTimePayment;\\n        rail.paymentRate = newRate;\\n\\n        OperatorApproval storage operatorApproval = operatorApprovals[\\n            rail.token\\n        ][rail.from][rail.operator];\\n\\n        // Update payer's lockup rate - only if the rail is not terminated\\n        // for terminated rails, the payer's lockup rate is already updated during rail termination\\n        if (!isTerminated) {\\n            require(\\n                payer.lockupRate >= oldRate,\\n                \\\"payer lockup rate cannot be less than old rate\\\"\\n            );\\n            payer.lockupRate = payer.lockupRate - oldRate + newRate;\\n            updateOperatorRateUsage(operatorApproval, oldRate, newRate);\\n        }\\n\\n        // Update payer's current lockup with effective lockup period calculation\\n        // Remove old rate lockup for the effective period, add new rate lockup for the same period\\n        payer.lockupCurrent =\\n            payer.lockupCurrent -\\n            (oldRate * effectiveLockupPeriod) +\\n            (newRate * effectiveLockupPeriod) -\\n            oneTimePayment;\\n\\n        updateOperatorLockupUsage(\\n            operatorApproval,\\n            oldRate * effectiveLockupPeriod,\\n            newRate * effectiveLockupPeriod\\n        );\\n\\n        // Update operator allowance for one-time payment\\n        updateOperatorAllowanceForOneTimePayment(\\n            operatorApproval,\\n            oneTimePayment\\n        );\\n\\n        // --- Process the One-Time Payment ---\\n        processOneTimePayment(payer, payee, oneTimePayment);\\n    }\\n\\n    function modifyPaymentForTerminatedRailBeyondLastEpoch(\\n        Rail storage rail,\\n        uint256 newRate,\\n        uint256 oneTimePayment\\n    ) internal {\\n        uint256 endEpoch = maxSettlementEpochForTerminatedRail(rail);\\n        require(\\n            newRate == 0 && oneTimePayment == 0,\\n            \\\"for terminated rails beyond last settlement epoch, both new rate and one-time payment must be 0\\\"\\n        );\\n\\n        // Check if we need to record the current rate in the queue (should only do this once for the last epoch)\\n        if (\\n            rail.rateChangeQueue.isEmpty() ||\\n            rail.rateChangeQueue.peekTail().untilEpoch < endEpoch\\n        ) {\\n            // Queue the current rate up to the max settlement epoch\\n            rail.rateChangeQueue.enqueue(rail.paymentRate, endEpoch);\\n        }\\n\\n        // Set payment rate to 0 as the rail is past its last settlement epoch\\n        rail.paymentRate = 0;\\n    }\\n\\n    function handleRateChangeSettlement(\\n        uint256 railId,\\n        Rail storage rail,\\n        uint256 oldRate,\\n        uint256 newRate\\n    ) internal {\\n        // If rate hasn't changed, nothing to do\\n        if (newRate == oldRate) {\\n            return;\\n        }\\n\\n        // No need to settle the rail or enqueue the rate change if the rail has already been settled upto\\n        // the current epoch\\n        if (rail.settledUpTo == block.number) {\\n            return;\\n        }\\n\\n        // If there is no arbiter, settle the rail immediately\\n        if (rail.arbiter == address(0)) {\\n            (,,,, uint256 settledUpto, ) = settleRail(railId, block.number);\\n            require(\\n                settledUpto == block.number,\\n                \\\"failed to settle rail up to current epoch\\\"\\n            );\\n            return;\\n        }\\n\\n        // For arbitrated rails with rate change, handle queue\\n        // Only queue the previous rate once per epoch\\n        if (\\n            rail.rateChangeQueue.isEmpty() ||\\n            rail.rateChangeQueue.peekTail().untilEpoch != block.number\\n        ) {\\n            // For arbitrated rails, we need to enqueue the old rate.\\n            // This ensures that the old rate is applied up to and including the current block.\\n            // The new rate will be applicable starting from the next block.\\n            rail.rateChangeQueue.enqueue(oldRate, block.number);\\n        }\\n    }\\n\\n    function processOneTimePayment(\\n        Account storage payer,\\n        Account storage payee,\\n        uint256 oneTimePayment\\n    ) internal {\\n        if (oneTimePayment > 0) {\\n            require(\\n                payer.funds >= oneTimePayment,\\n                \\\"insufficient funds for one-time payment\\\"\\n            );\\n            payer.funds -= oneTimePayment;\\n            payee.funds += oneTimePayment;\\n        }\\n    }\\n\\n    /// @notice Settles payments for a terminated rail without arbitration. This may only be called by the payee and after the terminated rail's max settlement epoch has passed. It's an escape-hatch to unblock payments in an otherwise stuck rail (e.g., due to a buggy arbiter contract) and it always pays in full.\\n    /// @param railId The ID of the rail to settle.\\n    /// @return totalSettledAmount The total amount settled and transferred.\\n    /// @return totalNetPayeeAmount The net amount credited to the payee after fees.\\n    /// @return totalPaymentFee The fee retained by the payment contract.\\n    /// @return totalOperatorCommission The commission credited to the operator.\\n    /// @return finalSettledEpoch The epoch up to which settlement was actually completed.\\n    /// @return note Additional information about the settlement.\\n    function settleTerminatedRailWithoutArbitration(\\n        uint256 railId\\n    )\\n        external\\n        nonReentrant\\n        validateRailActive(railId)\\n        validateRailTerminated(railId)\\n        onlyRailClient(railId)\\n        settleAccountLockupBeforeAndAfterForRail(railId, false, 0)\\n        returns (\\n            uint256 totalSettledAmount,\\n            uint256 totalNetPayeeAmount,\\n            uint256 totalPaymentFee,\\n            uint256 totalOperatorCommission,\\n            uint256 finalSettledEpoch,\\n            string memory note\\n        )\\n    {\\n        // Verify the current epoch is greater than the max settlement epoch\\n        uint256 maxSettleEpoch = maxSettlementEpochForTerminatedRail(\\n            rails[railId]\\n        );\\n        require(\\n            block.number > maxSettleEpoch,\\n            \\\"terminated rail can only be settled without arbitration after max settlement epoch\\\"\\n        );\\n\\n        return settleRailInternal(railId, maxSettleEpoch, true);\\n    }\\n\\n    /// @notice Settles payments for a rail up to the specified epoch. Settlement may fail to reach the target epoch if either the client lacks the funds to pay up to the current epoch or the arbiter refuses to settle the entire requested range.\\n    /// @param railId The ID of the rail to settle.\\n    /// @param untilEpoch The epoch up to which to settle (must not exceed current block number).\\n    /// @return totalSettledAmount The total amount settled and transferred.\\n    /// @return totalNetPayeeAmount The net amount credited to the payee after fees.\\n    /// @return totalPaymentFee The fee retained by the payment contract.\\n    /// @return totalOperatorCommission The commission credited to the operator.\\n    /// @return finalSettledEpoch The epoch up to which settlement was actually completed.\\n    /// @return note Additional information about the settlement (especially from arbitration).\\n    function settleRail(\\n        uint256 railId,\\n        uint256 untilEpoch\\n    )\\n        public\\n        nonReentrant\\n        validateRailActive(railId)\\n        onlyRailParticipant(railId)\\n        settleAccountLockupBeforeAndAfterForRail(railId, false, 0)\\n        returns (\\n            uint256 totalSettledAmount,\\n            uint256 totalNetPayeeAmount,\\n            uint256 totalPaymentFee,\\n            uint256 totalOperatorCommission,\\n            uint256 finalSettledEpoch,\\n            string memory note\\n        )\\n    {\\n        return settleRailInternal(railId, untilEpoch, false);\\n    }\\n\\n    function settleRailInternal(\\n        uint256 railId,\\n        uint256 untilEpoch,\\n        bool skipArbitration\\n    )\\n        internal\\n        returns (\\n            uint256 totalSettledAmount,\\n            uint256 totalNetPayeeAmount,\\n            uint256 totalPaymentFee,\\n            uint256 totalOperatorCommission,\\n            uint256 finalSettledEpoch,\\n            string memory note\\n        )\\n    {\\n        require(\\n            untilEpoch <= block.number,\\n            \\\"failed to settle: cannot settle future epochs\\\"\\n        );\\n\\n        Rail storage rail = rails[railId];\\n        Account storage payer = accounts[rail.token][rail.from];\\n\\n        // Handle terminated and fully settled rails that are still not finalised\\n\\n        if (isRailTerminated(rail) && rail.settledUpTo >= rail.endEpoch) {\\n            finalizeTerminatedRail(rail, payer);\\n            return (0, 0, 0, 0, rail.settledUpTo, \\\"rail fully settled and finalized\\\");\\n        }\\n\\n        // Calculate the maximum settlement epoch based on account lockup\\n        uint256 maxSettlementEpoch;\\n        if (!isRailTerminated(rail)) {\\n            maxSettlementEpoch = min(untilEpoch, payer.lockupLastSettledAt);\\n        } else {\\n            maxSettlementEpoch = min(untilEpoch, rail.endEpoch);\\n        }\\n\\n        uint256 startEpoch = rail.settledUpTo;\\n        // Nothing to settle (already settled or zero-duration)\\n        if (startEpoch >= maxSettlementEpoch) {\\n            return (\\n                0,\\n                0,\\n                0,\\n                0,\\n                startEpoch,\\n                string.concat(\\n                    \\\"already settled up to epoch \\\",\\n                    Strings.toString(maxSettlementEpoch)\\n                )\\n            );\\n        }\\n\\n        // For zero rate rails with empty queue, just advance the settlement epoch\\n        // without transferring funds\\n        uint256 currentRate = rail.paymentRate;\\n        if (currentRate == 0 && rail.rateChangeQueue.isEmpty()) {\\n            rail.settledUpTo = maxSettlementEpoch;\\n\\n            return\\n                checkAndFinalizeTerminatedRail(\\n                    rail,\\n                    payer,\\n                    0,\\n                    0,\\n                    0,\\n                    0,\\n                    maxSettlementEpoch,\\n                    \\\"zero rate payment rail\\\",\\n                    \\\"zero rate terminated rail fully settled and finalized\\\"\\n                );\\n        }\\n\\n        // Process settlement depending on whether rate changes exist\\n        if (rail.rateChangeQueue.isEmpty()) {\\n            (uint256 amount, uint256 netPayeeAmount, uint256 paymentFee, uint256 operatorCommission, string memory segmentNote) = _settleSegment(\\n                railId,\\n                startEpoch,\\n                maxSettlementEpoch,\\n                currentRate,\\n                skipArbitration\\n            );\\n\\n            require(rail.settledUpTo > startEpoch, \\\"No progress in settlement\\\");\\n\\n            return\\n                checkAndFinalizeTerminatedRail(\\n                    rail,\\n                    payer,\\n                    amount,\\n                    netPayeeAmount,\\n                    paymentFee,\\n                    operatorCommission,\\n                    rail.settledUpTo,\\n                    segmentNote,\\n                    string.concat(\\n                        segmentNote,\\n                        \\\"terminated rail fully settled and finalized.\\\"\\n                    )\\n                );\\n        } else {\\n            (\\n                uint256 settledAmount,\\n                uint256 netPayeeAmount,\\n                uint256 paymentFee,\\n                uint256 operatorCommission,\\n                string memory settledNote\\n            ) = _settleWithRateChanges(\\n                    railId,\\n                    currentRate,\\n                    startEpoch,\\n                    maxSettlementEpoch,\\n                    skipArbitration\\n                );\\n\\n            return\\n                checkAndFinalizeTerminatedRail(\\n                    rail,\\n                    payer,\\n                    settledAmount,\\n                    netPayeeAmount,\\n                    paymentFee,\\n                    operatorCommission,\\n                    rail.settledUpTo,\\n                    settledNote,\\n                    string.concat(\\n                        settledNote,\\n                        \\\"terminated rail fully settled and finalized.\\\"\\n                    )\\n                );\\n        }\\n    }\\n\\n    function checkAndFinalizeTerminatedRail(\\n        Rail storage rail,\\n        Account storage payer,\\n        uint256 totalSettledAmount,\\n        uint256 totalNetPayeeAmount,\\n        uint256 totalPaymentFee,\\n        uint256 totalOperatorCommission,\\n        uint256 finalEpoch,\\n        string memory regularNote,\\n        string memory finalizedNote\\n    ) internal returns (uint256, uint256, uint256, uint256, uint256, string memory) {\\n        // Check if rail is a terminated rail that's now fully settled\\n        if (\\n            isRailTerminated(rail) &&\\n            rail.settledUpTo >= maxSettlementEpochForTerminatedRail(rail)\\n        ) {\\n            finalizeTerminatedRail(rail, payer);\\n            return (totalSettledAmount, totalNetPayeeAmount, totalPaymentFee, totalOperatorCommission, finalEpoch, finalizedNote);\\n        }\\n\\n        return (totalSettledAmount, totalNetPayeeAmount, totalPaymentFee, totalOperatorCommission, finalEpoch, regularNote);\\n    }\\n\\n    function finalizeTerminatedRail(\\n        Rail storage rail,\\n        Account storage payer\\n    ) internal {\\n        // Reduce the lockup by the fixed amount\\n        require(\\n            payer.lockupCurrent >= rail.lockupFixed,\\n            \\\"lockup inconsistency during rail finalization\\\"\\n        );\\n        payer.lockupCurrent -= rail.lockupFixed;\\n\\n        // Get operator approval for finalization update\\n        OperatorApproval storage operatorApproval = operatorApprovals[\\n            rail.token\\n        ][rail.from][rail.operator];\\n\\n        updateOperatorLockupUsage(operatorApproval, rail.lockupFixed, 0);\\n\\n        // Zero out the rail to mark it as inactive\\n        _zeroOutRail(rail);\\n    }\\n\\n    function _settleWithRateChanges(\\n        uint256 railId,\\n        uint256 currentRate,\\n        uint256 startEpoch,\\n        uint256 targetEpoch,\\n        bool skipArbitration\\n    ) internal returns (uint256 totalSettledAmount, uint256 totalNetPayeeAmount, uint256 totalPaymentFee, uint256 totalOperatorCommission, string memory note) {\\n        Rail storage rail = rails[railId];\\n        RateChangeQueue.Queue storage rateQueue = rail.rateChangeQueue;\\n\\n        totalSettledAmount = 0;\\n        totalNetPayeeAmount = 0;\\n        totalPaymentFee = 0;\\n        totalOperatorCommission = 0;\\n        uint256 processedEpoch = startEpoch;\\n        note = \\\"\\\";\\n\\n        // Process each segment until we reach the target epoch or hit an early exit condition\\n        while (processedEpoch < targetEpoch) {\\n            // Default boundary is the target we want to reach\\n            uint256 segmentEndBoundary = targetEpoch;\\n            uint256 segmentRate;\\n\\n            // If we have rate changes in the queue, use the rate from the next change\\n            if (!rateQueue.isEmpty()) {\\n                RateChangeQueue.RateChange memory nextRateChange = rateQueue\\n                    .peek();\\n\\n                // Validate rate change queue consistency\\n                require(\\n                    nextRateChange.untilEpoch >= processedEpoch,\\n                    \\\"rate queue is in an invalid state\\\"\\n                );\\n\\n                // Boundary is the minimum of our target or the next rate change epoch\\n                segmentEndBoundary = min(\\n                    targetEpoch,\\n                    nextRateChange.untilEpoch\\n                );\\n                segmentRate = nextRateChange.rate;\\n            } else {\\n                // If queue is empty, use the current rail rate\\n                segmentRate = currentRate;\\n\\n                // if current rate is zero, there's nothing left to do and we've finished settlement\\n                if (segmentRate == 0) {\\n                    rail.settledUpTo = targetEpoch;\\n                    return (totalSettledAmount, totalNetPayeeAmount, totalPaymentFee, totalOperatorCommission, \\\"Zero rate payment rail\\\");\\n                }\\n            }\\n\\n            // Settle the current segment with potentially arbitrated outcomes\\n            (\\n                uint256 segmentSettledAmount,\\n                uint256 segmentNetPayeeAmount,\\n                uint256 segmentPaymentFee,\\n                uint256 segmentOperatorCommission,\\n                string memory arbitrationNote\\n            ) = _settleSegment(\\n                    railId,\\n                    processedEpoch,\\n                    segmentEndBoundary,\\n                    segmentRate,\\n                    skipArbitration\\n                );\\n\\n            // If arbiter returned no progress, exit early without updating state\\n            if (rail.settledUpTo <= processedEpoch) {\\n                return (totalSettledAmount, totalNetPayeeAmount, totalPaymentFee, totalOperatorCommission, arbitrationNote);\\n            }\\n\\n            // Add the settled amounts to our running totals\\n            totalSettledAmount += segmentSettledAmount;\\n            totalNetPayeeAmount += segmentNetPayeeAmount;\\n            totalPaymentFee += segmentPaymentFee;\\n            totalOperatorCommission += segmentOperatorCommission;\\n\\n            // If arbiter partially settled the segment, exit early\\n            if (rail.settledUpTo < segmentEndBoundary) {\\n                return (totalSettledAmount, totalNetPayeeAmount, totalPaymentFee, totalOperatorCommission, arbitrationNote);\\n            }\\n\\n            // Successfully settled full segment, update tracking values\\n            processedEpoch = rail.settledUpTo;\\n            note = arbitrationNote;\\n\\n            // Remove the processed rate change from the queue\\n            if (!rateQueue.isEmpty()) {\\n                rateQueue.dequeue();\\n            }\\n        }\\n\\n        // We've successfully settled up to the target epoch\\n        return (totalSettledAmount, totalNetPayeeAmount, totalPaymentFee, totalOperatorCommission, note);\\n    }\\n\\n    function _settleSegment(\\n        uint256 railId,\\n        uint256 epochStart,\\n        uint256 epochEnd,\\n        uint256 rate,\\n        bool skipArbitration\\n    ) internal returns (uint256 totalSettledAmount,uint256 netPayeeAmount, uint256 paymentFee, uint256 operatorCommission, string memory note) {\\n        Rail storage rail = rails[railId];\\n        Account storage payer = accounts[rail.token][rail.from];\\n        Account storage payee = accounts[rail.token][rail.to];\\n\\n        // Calculate the default settlement values (without arbitration)\\n        uint256 duration = epochEnd - epochStart;\\n        uint256 settledAmount = rate * duration;\\n        uint256 settledUntilEpoch = epochEnd;\\n        note = \\\"\\\";\\n\\n        // If this rail has an arbiter and we're not skipping arbitration, let it decide on the final settlement amount\\n        if (rail.arbiter != address(0) && !skipArbitration) {\\n            IArbiter arbiter = IArbiter(rail.arbiter);\\n            IArbiter.ArbitrationResult memory result = arbiter.arbitratePayment(\\n                railId,\\n                settledAmount,\\n                epochStart,\\n                epochEnd\\n            );\\n\\n            // Ensure arbiter doesn't settle beyond our segment's end boundary\\n            require(\\n                result.settleUpto <= epochEnd,\\n                \\\"arbiter settled beyond segment end\\\"\\n            );\\n            require(\\n                result.settleUpto >= epochStart,\\n                \\\"arbiter settled before segment start\\\"\\n            );\\n\\n            settledUntilEpoch = result.settleUpto;\\n            settledAmount = result.modifiedAmount;\\n            note = result.note;\\n\\n            // Ensure arbiter doesn't allow more payment than the maximum possible\\n            // for the epochs they're confirming\\n            uint256 maxAllowedAmount = rate * (settledUntilEpoch - epochStart);\\n            require(\\n                result.modifiedAmount <= maxAllowedAmount,\\n                \\\"arbiter modified amount exceeds maximum for settled duration\\\"\\n            );\\n        }\\n\\n        // Verify payer has sufficient funds for the settlement\\n        require(\\n            payer.funds >= settledAmount,\\n            \\\"failed to settle: insufficient funds to cover settlement\\\"\\n        );\\n\\n        // Verify payer has sufficient lockup for the settlement\\n        require(\\n            payer.lockupCurrent >= settledAmount,\\n            \\\"failed to settle: insufficient lockup to cover settlement\\\"\\n        );\\n\\n        // Transfer funds from payer (always pays full settled amount)\\n        payer.funds -= settledAmount;\\n\\n        // Calculate payment contract fee (if any) based on full settled amount\\n        paymentFee = 0;\\n        if (PAYMENT_FEE_BPS > 0) {\\n            paymentFee = (settledAmount * PAYMENT_FEE_BPS) /\\n                COMMISSION_MAX_BPS;\\n        }\\n\\n        // Calculate amount remaining after contract fee\\n        uint256 amountAfterPaymentFee = settledAmount - paymentFee;\\n\\n        // Calculate operator commission (if any) based on remaining amount\\n        operatorCommission = 0;\\n        if (rail.commissionRateBps > 0) {\\n            operatorCommission = (amountAfterPaymentFee * rail.commissionRateBps) /\\n                COMMISSION_MAX_BPS;\\n        }\\n\\n        // Calculate net amount for payee\\n        netPayeeAmount = amountAfterPaymentFee - operatorCommission;\\n\\n        // Credit payee\\n        payee.funds += netPayeeAmount;\\n\\n        // Credit operator (if commission exists)\\n        if (operatorCommission > 0) {\\n            Account storage operatorAccount = accounts[rail.token][\\n                rail.operator\\n            ];\\n            operatorAccount.funds += operatorCommission;\\n        }\\n        // Note: The paymentFee remains in the contract implicitly\\n        // but is tracked for owner withdrawal\\n        if (paymentFee > 0) {\\n            // Check if this is the first fee for this token\\n            if (accumulatedFees[rail.token] == 0) {\\n                feeTokens.push(rail.token);\\n            }\\n            accumulatedFees[rail.token] += paymentFee;\\n        }\\n\\n        // Reduce the lockup by the total settled amount\\n        payer.lockupCurrent -= settledAmount;\\n\\n        // Update the rail's settled epoch\\n        rail.settledUpTo = settledUntilEpoch;\\n\\n        // Invariant check: lockup should never exceed funds\\n        require(\\n            payer.lockupCurrent <= payer.funds,\\n            \\\"failed to settle: invariant violation: insufficient funds to cover lockup after settlement\\\"\\n        );\\n\\n        return (settledAmount, netPayeeAmount, paymentFee, operatorCommission, note);\\n    }\\n\\n    function isAccountLockupFullySettled(\\n        Account storage account\\n    ) internal view returns (bool) {\\n        return account.lockupLastSettledAt == block.number;\\n    }\\n\\n    // attempts to settle account lockup up to and including the current epoch\\n    // returns the actual epoch upto and including which the lockup was settled\\n    function settleAccountLockup(\\n        Account storage account\\n    ) internal returns (uint256) {\\n        uint256 currentEpoch = block.number;\\n        uint256 elapsedTime = currentEpoch - account.lockupLastSettledAt;\\n\\n        if (elapsedTime <= 0) {\\n            return account.lockupLastSettledAt;\\n        }\\n\\n        if (account.lockupRate == 0) {\\n            account.lockupLastSettledAt = currentEpoch;\\n            return currentEpoch;\\n        }\\n\\n        uint256 additionalLockup = account.lockupRate * elapsedTime;\\n\\n        // we have sufficient funds to cover account lockup upto and including the current epoch\\n        if (account.funds >= account.lockupCurrent + additionalLockup) {\\n            account.lockupCurrent += additionalLockup;\\n            account.lockupLastSettledAt = currentEpoch;\\n            return currentEpoch;\\n        }\\n\\n        require(\\n            account.funds >= account.lockupCurrent,\\n            \\\"failed to settle: invariant violation: insufficient funds to cover lockup\\\"\\n        );\\n        // If insufficient, calculate the fractional epoch where funds became insufficient\\n        uint256 availableFunds = account.funds - account.lockupCurrent;\\n\\n        if (availableFunds == 0) {\\n            return account.lockupLastSettledAt;\\n        }\\n\\n        // Round down to the nearest whole epoch\\n        uint256 fractionalEpochs = availableFunds / account.lockupRate;\\n\\n        // Apply lockup up to this point\\n        account.lockupCurrent += account.lockupRate * fractionalEpochs;\\n        account.lockupLastSettledAt =\\n            account.lockupLastSettledAt +\\n            fractionalEpochs;\\n        return account.lockupLastSettledAt;\\n    }\\n\\n    function remainingEpochsForTerminatedRail(\\n        Rail storage rail\\n    ) internal view returns (uint256) {\\n        require(isRailTerminated(rail), \\\"rail is not terminated\\\");\\n\\n        // If current block beyond end epoch, return 0\\n        if (block.number > rail.endEpoch) {\\n            return 0;\\n        }\\n\\n        // Return the number of epochs (blocks) remaining until end epoch\\n        return rail.endEpoch - block.number;\\n    }\\n\\n    function isRailTerminated(Rail storage rail) internal view returns (bool) {\\n        require(\\n            rail.from != address(0),\\n            \\\"failed to check: rail does not exist\\\"\\n        );\\n        return rail.endEpoch > 0;\\n    }\\n\\n    // Get the final settlement epoch for a terminated rail\\n    function maxSettlementEpochForTerminatedRail(\\n        Rail storage rail\\n    ) internal view returns (uint256) {\\n        require(isRailTerminated(rail), \\\"rail is not terminated\\\");\\n        return rail.endEpoch;\\n    }\\n\\n    function _zeroOutRail(Rail storage rail) internal {\\n        // Check if queue is empty before clearing\\n        require(\\n            rail.rateChangeQueue.isEmpty(),\\n            \\\"rate change queue must be empty post full settlement\\\"\\n        );\\n\\n        // Clear the rate change queue\\n        rail.rateChangeQueue.clear();\\n\\n        rail.token = address(0);\\n        rail.from = address(0); // This now marks the rail as inactive\\n        rail.to = address(0);\\n        rail.operator = address(0);\\n        rail.arbiter = address(0);\\n        rail.paymentRate = 0;\\n        rail.lockupFixed = 0;\\n        rail.lockupPeriod = 0;\\n        rail.settledUpTo = 0;\\n        rail.endEpoch = 0;\\n    }\\n\\n    function updateOperatorRateUsage(\\n        OperatorApproval storage approval,\\n        uint256 oldRate,\\n        uint256 newRate\\n    ) internal {\\n        if (newRate > oldRate) {\\n            uint256 rateIncrease = newRate - oldRate;\\n            require(\\n                approval.rateUsage + rateIncrease <= approval.rateAllowance,\\n                \\\"operation exceeds operator rate allowance\\\"\\n            );\\n            approval.rateUsage += rateIncrease;\\n        } else if (oldRate > newRate) {\\n            uint256 rateDecrease = oldRate - newRate;\\n            approval.rateUsage = approval.rateUsage > rateDecrease\\n                ? approval.rateUsage - rateDecrease\\n                : 0;\\n        }\\n    }\\n\\n    function updateOperatorLockupUsage(\\n        OperatorApproval storage approval,\\n        uint256 oldLockup,\\n        uint256 newLockup\\n    ) internal {\\n        if (newLockup > oldLockup) {\\n            uint256 lockupIncrease = newLockup - oldLockup;\\n            require(\\n                approval.lockupUsage + lockupIncrease <=\\n                    approval.lockupAllowance,\\n                \\\"operation exceeds operator lockup allowance\\\"\\n            );\\n            approval.lockupUsage += lockupIncrease;\\n        } else if (oldLockup > newLockup) {\\n            uint256 lockupDecrease = oldLockup - newLockup;\\n            approval.lockupUsage = approval.lockupUsage > lockupDecrease\\n                ? approval.lockupUsage - lockupDecrease\\n                : 0;\\n        }\\n    }\\n\\n    function updateOperatorAllowanceForOneTimePayment(\\n        OperatorApproval storage approval,\\n        uint256 oneTimePayment\\n    ) internal {\\n        if (oneTimePayment == 0) return;\\n\\n        // Reduce lockup usage\\n        approval.lockupUsage = approval.lockupUsage - oneTimePayment;\\n\\n        // Reduce lockup allowance\\n        approval.lockupAllowance = oneTimePayment > approval.lockupAllowance\\n            ? 0\\n            : approval.lockupAllowance - oneTimePayment;\\n    }\\n\\n    /// @notice Allows the contract owner to withdraw accumulated payment fees.\\n    /// @param token The ERC20 token address of the fees to withdraw.\\n    /// @param to The address to send the withdrawn fees to.\\n    /// @param amount The amount of fees to withdraw.\\n    function withdrawFees(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner nonReentrant validateNonZeroAddress(token, \\\"token\\\") validateNonZeroAddress(to, \\\"to\\\") {\\n        uint256 currentFees = accumulatedFees[token];\\n        require(amount <= currentFees, \\\"amount exceeds accumulated fees\\\");\\n\\n        // Decrease tracked fees first to prevent reentrancy issues\\n        accumulatedFees[token] = currentFees - amount;\\n\\n        // Perform the transfer\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n    \\n    /// @notice Returns information about all accumulated fees\\n    /// @return tokens Array of token addresses that have accumulated fees\\n    /// @return amounts Array of fee amounts corresponding to each token\\n    /// @return count Total number of tokens with accumulated fees\\n    function getAllAccumulatedFees() external view returns (\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256 count\\n    ) {\\n        count = feeTokens.length;\\n        tokens = new address[](count);\\n        amounts = new uint256[](count);\\n        \\n        for (uint256 i = 0; i < count; i++) {\\n            address token = feeTokens[i];\\n            tokens[i] = token;\\n            amounts[i] = accumulatedFees[token];\\n        }\\n        \\n        return (tokens, amounts, count);\\n    }\\n\\n     /**\\n     * @notice Gets all rails where the given address is the payer for a specific token.\\n     * @param payer The address of the payer to get rails for.\\n     * @param token The token address to filter rails by.\\n     * @param includeTerminated Whether to include terminated rails in the results.\\n     * @return Array of RailInfo structs containing rail IDs and termination status.\\n     */\\n    function getRailsForPayerAndToken(\\n        address payer,\\n        address token,\\n        bool includeTerminated\\n    ) external view returns (RailInfo[] memory) {\\n        return\\n            _getRailsForAddressAndToken(payer, token, includeTerminated, true);\\n    }\\n\\n    /**\\n     * @notice Gets all rails where the given address is the payee for a specific token.\\n     * @param payee The address of the payee to get rails for.\\n     * @param token The token address to filter rails by.\\n     * @param includeTerminated Whether to include terminated rails in the results.\\n     * @return Array of RailInfo structs containing rail IDs and termination status.\\n     */\\n    function getRailsForPayeeAndToken(\\n        address payee,\\n        address token,\\n        bool includeTerminated\\n    ) external view returns (RailInfo[] memory) {\\n        return\\n            _getRailsForAddressAndToken(payee, token, includeTerminated, false);\\n    }\\n\\n    /**\\n     * @dev Internal function to get rails for either a payer or payee.\\n     * @param addr The address to get rails for (either payer or payee).\\n     * @param token The token address to filter rails by.\\n     * @param includeTerminated Whether to include terminated rails in the results.\\n     * @param isPayer If true, search for rails where addr is the payer, otherwise search for rails where addr is the payee.\\n     * @return Array of RailInfo structs containing rail IDs and termination status.\\n     */\\n    function _getRailsForAddressAndToken(\\n        address addr,\\n        address token,\\n        bool includeTerminated,\\n        bool isPayer\\n    ) internal view returns (RailInfo[] memory) {\\n        // Get the appropriate list of rails based on whether we're looking for payer or payee\\n        uint256[] storage allRailIds = isPayer\\n            ? payerRails[token][addr]\\n            : payeeRails[token][addr];\\n        uint256 railsLength = allRailIds.length;\\n\\n        RailInfo[] memory tempResults = new RailInfo[](railsLength);\\n        uint256 resultCount = 0;\\n\\n        for (uint256 i = 0; i < railsLength; i++) {\\n            uint256 railId = allRailIds[i];\\n            Rail storage rail = rails[railId];\\n\\n            // Skip non-existent rails\\n            if (rail.from == address(0)) continue;\\n\\n            // Skip terminated rails based on filter\\n            if (rail.endEpoch > 0) {\\n                // Skip if we don't want terminated rails\\n                if (!includeTerminated) continue;\\n            }\\n\\n            // Add valid rail to our temporary array\\n            tempResults[resultCount] = RailInfo({\\n                railId: railId,\\n                isTerminated: rail.endEpoch > 0,\\n                endEpoch: rail.endEpoch\\n            });\\n            resultCount++;\\n        }\\n\\n        // Create correctly sized final result array\\n        RailInfo[] memory result = new RailInfo[](resultCount);\\n\\n        // Only copy if we have results (avoid unnecessary operations)\\n        if (resultCount > 0) {\\n            for (uint256 i = 0; i < resultCount; i++) {\\n                result[i] = tempResults[i];\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nfunction min(uint256 a, uint256 b) pure returns (uint256) {\\n    return a < b ? a : b;\\n}\\n\",\"keccak256\":\"0x2f0d6a52e89220e6df3d73f1ade6aaf10a271204a1bd4f151d7a45fd24c6d32c\",\"license\":\"MIT\"},\"contracts/fws/payments/RateChangeQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary RateChangeQueue {\\n    struct RateChange {\\n        // The payment rate to apply\\n        uint256 rate;\\n        // The epoch up to and including which this rate will be used to settle a rail\\n        uint256 untilEpoch;\\n    }\\n\\n    struct Queue {\\n        // Map from index to RateChange\\n        mapping(uint256 => RateChange) changes;\\n        uint256 head;\\n        uint256 tail;\\n    }\\n\\n    function enqueue(\\n        Queue storage queue,\\n        uint256 rate,\\n        uint256 untilEpoch\\n    ) internal {\\n        queue.changes[queue.tail] = RateChange(rate, untilEpoch);\\n        queue.tail++;\\n    }\\n\\n    function dequeue(Queue storage queue) internal returns (RateChange memory) {\\n        require(queue.head < queue.tail, \\\"Queue is empty\\\");\\n        RateChange memory change = queue.changes[queue.head];\\n        delete queue.changes[queue.head];\\n        queue.head++;\\n        return change;\\n    }\\n\\n    function peek(\\n        Queue storage queue\\n    ) internal view returns (RateChange memory) {\\n        require(queue.head < queue.tail, \\\"Queue is empty\\\");\\n        return queue.changes[queue.head];\\n    }\\n    \\n    function peekTail(\\n        Queue storage queue\\n    ) internal view returns (RateChange memory) {\\n        require(queue.head < queue.tail, \\\"Queue is empty\\\");\\n        return queue.changes[queue.tail - 1];\\n    }\\n\\n    function isEmpty(Queue storage queue) internal view returns (bool) {\\n        return queue.head >= queue.tail;\\n    }\\n\\n    function clear(Queue storage queue) internal {\\n        while (!isEmpty(queue)) {\\n            dequeue(queue);\\n        }\\n        queue.head = 0;\\n        queue.tail = 0;\\n    }\\n\\n    function size(Queue storage queue) internal view returns (uint256) {\\n        return queue.tail - queue.head;\\n    }\\n}\\n\",\"keccak256\":\"0x7c8afb20750e7c5d976e7b7f81ba612ea758be59c707007e7fa8fa937c68d72a\",\"license\":\"MIT\"},\"contracts/pdp/BitOps.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n// Library for bit operations.\\nlibrary BitOps {\\n    // Calculates the number of leading zeros in binary representation.\\n    function clz(uint256 x) internal pure returns (uint256) {\\n        uint256 n = 256;\\n        uint256 y;\\n\\n        y = x >> 128; if (y != 0) { n -= 128; x = y; }\\n        y = x >> 64;  if (y != 0) { n -= 64;  x = y; }\\n        y = x >> 32;  if (y != 0) { n -= 32;  x = y; }\\n        y = x >> 16;  if (y != 0) { n -= 16;  x = y; }\\n        y = x >> 8;   if (y != 0) { n -= 8;   x = y; }\\n        y = x >> 4;   if (y != 0) { n -= 4;   x = y; }\\n        y = x >> 2;   if (y != 0) { n -= 2;   x = y; }\\n        y = x >> 1;   if (y != 0) return n - 2;\\n        return n - x;\\n    }\\n\\n    int256 constant MASK128 = 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    int256 constant MASK64 = 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF;\\n    int256 constant MASK32 = 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF;\\n    int256 constant MASK16 = 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF;\\n    int256 constant MASK8 = 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF;\\n    int256 constant MASK4 = 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F;\\n    int256 constant MASK2 = 0x3333333333333333333333333333333333333333333333333333333333333333;\\n    int256 constant MASK1 = 0x5555555555555555555555555555555555555555555555555555555555555555;\\n\\n    // Calculates the number of trailing zeros in binary representation. \\n    function ctz(uint256 x) internal pure returns (uint256) {\\n        require(x <= uint256(type(int256).max), \\\"Input exceeds maximum int256 value\\\");\\n        uint256 c = 256; \\n\\n        int256 v = -int256(x);\\n        v = v & int256(x);\\n        if (v != 0) {\\n            c--;\\n        }\\n        if (v & MASK128 != 0) {\\n            c -= 128;\\n        }\\n        if (v & MASK64 != 0) {\\n            c -= 64;\\n        }\\n        if (v & MASK32 != 0) {\\n            c -= 32;\\n        }\\n        if (v & MASK16 != 0) {\\n            c -= 16;\\n        }\\n        if (v & MASK8 != 0) {\\n            c -= 8;\\n        }\\n        if (v & MASK4 != 0) {\\n            c -= 4;\\n        }\\n        if (v & MASK2 != 0) {\\n            c -= 2;\\n        }\\n        if (v & MASK1 != 0) {\\n            c -= 1;\\n        }\\n\\n        return c;\\n    }\\n}\",\"keccak256\":\"0x55fc8272df01302eba6fde6174e691ec86f791c39ac9b1c6a5e4ca1792439ca4\",\"license\":\"UNLICENSED\"},\"contracts/pdp/Cids.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nlibrary Cids {\\n    // TODO PERF: https://github.com/FILCAT/pdp/issues/16#issuecomment-2329836995\\n    struct Cid {\\n        bytes data;\\n    }\\n\\n    // Returns the last 32 bytes of a CID payload as a bytes32.\\n    function digestFromCid(Cid memory cid) internal pure returns (bytes32) {\\n        require(cid.data.length >= 32, \\\"Cid data is too short\\\");\\n        bytes memory dataSlice = new bytes(32);\\n        for (uint i = 0; i < 32; i++) {\\n            dataSlice[i] = cid.data[cid.data.length - 32 + i];\\n        }\\n        return bytes32(dataSlice);\\n    }\\n\\n    // Makes a CID from a prefix and a digest.\\n    // The prefix doesn't matter to these contracts, which only inspect the last 32 bytes (the hash digest).\\n    function cidFromDigest(bytes memory prefix, bytes32 digest) internal pure returns (Cids.Cid memory) {\\n        bytes memory byteArray = new bytes(prefix.length + 32);\\n        for (uint256 i = 0; i < prefix.length; i++) {\\n            byteArray[i] = prefix[i];\\n        }\\n        for (uint256 i = 0; i < 32; i++) {\\n            byteArray[i+prefix.length] = bytes1(digest << (i * 8));\\n        }\\n        return Cids.Cid(byteArray);\\n    }\\n}\\n\",\"keccak256\":\"0x4085c3a55cdf809251a469829bae218d03db4afd9455dab674a8a2ab3b7451dc\",\"license\":\"UNLICENSED\"},\"contracts/pdp/Fees.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {BitOps} from \\\"./BitOps.sol\\\";\\n\\n/// @title PDPFees\\n/// @notice A library for calculating fees for the PDP.\\nlibrary PDPFees {\\n    uint256 constant ATTO_FIL = 1;\\n    uint256 constant FIL_TO_ATTO_FIL = 1e18 * ATTO_FIL;\\n\\n    // 0.1 FIL\\n    uint256 constant SYBIL_FEE = FIL_TO_ATTO_FIL / 10;\\n\\n    // 2 USD/Tib/month is the current reward earned by Storage Providers\\n    uint256 constant ESTIMATED_MONTHLY_TIB_STORAGE_REWARD_USD = 2;\\n    // 1% of reward per period\\n    uint256 constant PROOF_FEE_PERCENTAGE = 1;\\n    // 4% of reward per period for gas limit left bound\\n    uint256 constant GAS_LIMIT_LEFT_PERCENTAGE = 4;\\n    // 5% of reward per period for gas limit right bound\\n    uint256 constant GAS_LIMIT_RIGHT_PERCENTAGE = 5;\\n    uint256 constant USD_DECIMALS = 1e18;\\n\\n    // 1 TiB in bytes (2^40)\\n    uint256 constant TIB_IN_BYTES = 2 ** 40;\\n    // Number of epochs per month (30 days * 2880 epochs per day)\\n    uint256 constant EPOCHS_PER_MONTH = 86400;\\n\\n    /// @notice Calculates the proof fee based on the gas fee and the raw size of the proof.\\n    /// @param estimatedGasFee The estimated gas fee in AttoFIL.\\n    /// @param filUsdPrice The price of FIL in USD.\\n    /// @param filUsdPriceExpo The exponent of the price of FIL in USD.\\n    /// @param rawSize The raw size of the proof in bytes.\\n    /// @param nProofEpochs The number of proof epochs.\\n    /// @return proof fee in AttoFIL\\n    /// @dev The proof fee is calculated based on the gas fee and the raw size of the proof\\n    /// The fee is 1% of the projected reward and is reduced in the case gas cost of proving is too high.\\n    function proofFeeWithGasFeeBound(\\n        uint256 estimatedGasFee, // in AttoFIL\\n        uint64 filUsdPrice,\\n        int32 filUsdPriceExpo,\\n        uint256 rawSize,\\n        uint256 nProofEpochs\\n    ) internal view returns (uint256) {        \\n        require(estimatedGasFee > 0 || block.basefee == 0, \\\"failed to validate: estimated gas fee must be greater than 0\\\");\\n        require(filUsdPrice > 0, \\\"failed to validate: AttoFIL price must be greater than 0\\\");\\n        require(rawSize > 0, \\\"failed to validate: raw size must be greater than 0\\\");\\n\\n        // Calculate reward per epoch per byte (in AttoFIL)\\n        uint256 rewardPerEpochPerByte;\\n        if (filUsdPriceExpo >= 0) {\\n            rewardPerEpochPerByte = (ESTIMATED_MONTHLY_TIB_STORAGE_REWARD_USD * FIL_TO_ATTO_FIL) / \\n                (TIB_IN_BYTES * EPOCHS_PER_MONTH * filUsdPrice * (10 ** uint32(filUsdPriceExpo)));\\n        } else {\\n            rewardPerEpochPerByte = (ESTIMATED_MONTHLY_TIB_STORAGE_REWARD_USD * FIL_TO_ATTO_FIL * (10 ** uint32(-filUsdPriceExpo))) /\\n                (TIB_IN_BYTES * EPOCHS_PER_MONTH * filUsdPrice);\\n        }\\n\\n        // Calculate total reward for the proving period\\n        uint256 estimatedCurrentReward = rewardPerEpochPerByte * nProofEpochs * rawSize;\\n\\n        // Calculate gas limits\\n        uint256 gasLimitRight = (estimatedCurrentReward * GAS_LIMIT_RIGHT_PERCENTAGE) / 100;\\n        uint256 gasLimitLeft = (estimatedCurrentReward * GAS_LIMIT_LEFT_PERCENTAGE) / 100;\\n\\n        if (estimatedGasFee >= gasLimitRight) {\\n            return 0; // No proof fee if gas fee is above right limit\\n        } else if (estimatedGasFee >= gasLimitLeft) {\\n            return gasLimitRight - estimatedGasFee; // Partial discount on proof fee\\n        } else {\\n            return (estimatedCurrentReward * PROOF_FEE_PERCENTAGE) / 100;\\n        }\\n    }\\n\\n    // sybil fee adds cost to adding state to the pdp verifier contract to prevent\\n    // wasteful state growth. 0.1 FIL\\n    function sybilFee() internal pure returns (uint256) {\\n        return SYBIL_FEE;\\n    }\\n}\\n\",\"keccak256\":\"0x74945bddcdd334715c9fab53deba13867f17855976ae64c33abdc84dc439feb0\",\"license\":\"UNLICENSED\"},\"contracts/pdp/PDPVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {BitOps} from \\\"./BitOps.sol\\\";\\nimport {Cids} from \\\"./Cids.sol\\\";\\nimport {MerkleVerify} from \\\"./Proofs.sol\\\";\\nimport {PDPFees} from \\\"./Fees.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\n\\n/// @title PDPListener\\n/// @notice Interface for PDP Service applications managing data storage.\\n/// @dev This interface exists to provide an extensible hook for applications to use the PDP verification contract\\n/// to implement data storage applications.\\ninterface PDPListener {\\n    function proofSetCreated(\\n        uint256 proofSetId,\\n        address creator,\\n        bytes calldata extraData\\n    ) external;\\n    function proofSetDeleted(\\n        uint256 proofSetId,\\n        uint256 deletedLeafCount,\\n        bytes calldata extraData\\n    ) external;\\n    function rootsAdded(\\n        uint256 proofSetId,\\n        uint256 firstAdded,\\n        PDPVerifier.RootData[] memory rootData,\\n        bytes calldata extraData\\n    ) external;\\n    function rootsScheduledRemove(\\n        uint256 proofSetId,\\n        uint256[] memory rootIds,\\n        bytes calldata extraData\\n    ) external;\\n    // Note: extraData not included as proving messages conceptually always originate from the SP\\n    function possessionProven(\\n        uint256 proofSetId,\\n        uint256 challengedLeafCount,\\n        uint256 seed,\\n        uint256 challengeCount\\n    ) external;\\n    function nextProvingPeriod(\\n        uint256 proofSetId,\\n        uint256 challengeEpoch,\\n        uint256 leafCount,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\\ncontract PDPVerifier is Initializable, UUPSUpgradeable, OwnableUpgradeable {\\n    // Constants\\n    address public constant BURN_ACTOR = 0xff00000000000000000000000000000000000063;\\n    uint256 public constant LEAF_SIZE = 32;\\n    uint256 public constant MAX_ROOT_SIZE = 1 << 50;\\n    uint256 public constant MAX_ENQUEUED_REMOVALS = 2000;\\n    address public constant RANDOMNESS_PRECOMPILE = 0xfE00000000000000000000000000000000000006;\\n    uint256 public constant EXTRA_DATA_MAX_SIZE = 2048;\\n    uint256 public constant SECONDS_IN_DAY = 86400;\\n    IPyth public constant PYTH = IPyth(0xA2aa501b19aff244D90cc15a4Cf739D2725B5729);\\n\\n    // FIL/USD price feed query ID on the Pyth network\\n    bytes32 public constant FIL_USD_PRICE_FEED_ID =\\n        0x150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e;\\n    uint256 public constant NO_CHALLENGE_SCHEDULED = 0;\\n    uint256 public constant NO_PROVEN_EPOCH = 0;\\n\\n    // Events\\n    event ProofSetCreated(uint256 indexed setId, address indexed owner);\\n    event ProofSetOwnerChanged(\\n        uint256 indexed setId,\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n    event ProofSetDeleted(uint256 indexed setId, uint256 deletedLeafCount);\\n    event ProofSetEmpty(uint256 indexed setId);\\n\\n    event RootsAdded(uint256 indexed setId, uint256[] rootIds);\\n    event RootsRemoved(uint256 indexed setId, uint256[] rootIds);\\n\\n    event ProofFeePaid(uint256 indexed setId, uint256 fee, uint64 price, int32 expo);\\n\\n    event PossessionProven(uint256 indexed setId, RootIdAndOffset[] challenges);\\n    event NextProvingPeriod(uint256 indexed setId, uint256 challengeEpoch, uint256 leafCount);\\n\\n    // Types\\n    // State fields\\n    /*\\n    A proof set is the metadata required for tracking data for proof of possession.\\n    It maintains a list of CIDs of data to be proven and metadata needed to\\n    add and remove data to the set and prove possession efficiently.\\n\\n    ** logical structure of the proof set**\\n    /*\\n    struct ProofSet {\\n        Cid[] roots;\\n        uint256[] leafCounts;\\n        uint256[] sumTree;\\n        uint256 leafCount;\\n        address owner;\\n        address proposed owner;\\n        nextRootID uint64;\\n        nextChallengeEpoch: uint64;\\n        listenerAddress: address;\\n        challengeRange: uint256\\n        enqueuedRemovals: uint256[]\\n    }\\n    ** PDP Verifier contract tracks many possible proof sets **\\n    []ProofSet proofsets\\n\\n    To implement this logical structure in the solidity data model we have\\n    arrays tracking the singleton fields and two dimensional arrays\\n    tracking linear proof set data.  The first index is the proof set id\\n    and the second index if any is the index of the data in the array.\\n\\n    Invariant: rootCids.length == rootLeafCount.length == sumTreeCounts.length\\n    */\\n\\n    // Network epoch delay between last proof of possession and next\\n    // randomness sampling for challenge generation.\\n    //\\n    // The purpose of this delay is to prevent SPs from biasing randomness by running forking attacks.\\n    // Given a small enough challengeFinality an SP can run several trials of challenge sampling and\\n    // fork around samples that don't suit them, grinding the challenge randomness.\\n    // For the filecoin L1, a safe value is 150 using the same analysis setting 150 epochs between\\n    // PoRep precommit and PoRep provecommit phases.\\n    //\\n    // We keep this around for future portability to a variety of environments with different assumptions\\n    // behind their challenge randomness sampling methods.\\n    uint256 challengeFinality;\\n\\n    // TODO PERF: https://github.com/FILCAT/pdp/issues/16#issuecomment-2329838769\\n    uint64 nextProofSetId;\\n    // The CID of each root. Roots and all their associated data can be appended and removed but not modified.\\n    mapping(uint256 => mapping(uint256 => Cids.Cid)) rootCids;\\n    // The leaf count of each root\\n    mapping(uint256 => mapping(uint256 => uint256)) rootLeafCounts;\\n    // The sum tree array for finding the root id of a given leaf index.\\n    mapping(uint256 => mapping(uint256 => uint256)) sumTreeCounts;\\n    mapping(uint256 => uint256) nextRootId;\\n    // The number of leaves (32 byte chunks) in the proof set when tallying up all roots.\\n    // This includes the leaves in roots that have been added but are not yet eligible for proving.\\n    mapping(uint256 => uint256) proofSetLeafCount;\\n    // The epoch for which randomness is sampled for challenge generation while proving possession this proving period.\\n    mapping(uint256 => uint256) nextChallengeEpoch;\\n    // Each proof set notifies a configurable listener to implement extensible applications managing data storage.\\n    mapping(uint256 => address) proofSetListener;\\n    // The first index that is not challenged in prove possession calls this proving period.\\n    // Updated to include the latest added leaves when starting the next proving period.\\n    mapping(uint256 => uint256) challengeRange;\\n    // Enqueued root ids for removal when starting the next proving period\\n    mapping(uint256 => uint256[]) scheduledRemovals;\\n    // ownership of proof set is initialized upon creation to create message sender\\n    // proofset owner has exclusive permission to add and remove roots and delete the proof set\\n    mapping(uint256 => address) proofSetOwner;\\n    mapping(uint256 => address) proofSetProposedOwner;\\n    mapping(uint256 => uint256) proofSetLastProvenEpoch;\\n\\n    // Methods\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(uint256 _challengeFinality) public initializer {\\n        __Ownable_init(msg.sender);\\n        __UUPSUpgradeable_init();\\n        challengeFinality = _challengeFinality;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    function burnFee(uint256 amount) internal {\\n        require(msg.value >= amount, \\\"Incorrect fee amount\\\");\\n        (bool success, ) = BURN_ACTOR.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Burn failed\\\");\\n    }\\n\\n    // Returns the current challenge finality value\\n    function getChallengeFinality() public view returns (uint256) {\\n        return challengeFinality;\\n    }\\n\\n    // Returns the next proof set ID\\n    function getNextProofSetId() public view returns (uint64) {\\n        return nextProofSetId;\\n    }\\n\\n    // Returns false if the proof set is 1) not yet created 2) deleted\\n    function proofSetLive(uint256 setId) public view returns (bool) {\\n        return setId < nextProofSetId && proofSetOwner[setId] != address(0);\\n    }\\n\\n    // Returns false if the proof set is not live or if the root id is 1) not yet created 2) deleted\\n    function rootLive(uint256 setId, uint256 rootId) public view returns (bool) {\\n        return\\n            proofSetLive(setId) && rootId < nextRootId[setId] && rootLeafCounts[setId][rootId] > 0;\\n    }\\n\\n    // Returns false if the root is not live or if the root id is not yet in challenge range\\n    function rootChallengable(uint256 setId, uint256 rootId) public view returns (bool) {\\n        uint256 top = 256 - BitOps.clz(nextRootId[setId]);\\n        RootIdAndOffset memory ret = findOneRootId(setId, challengeRange[setId] - 1, top);\\n        require(\\n            ret.offset == rootLeafCounts[setId][ret.rootId] - 1,\\n            \\\"challengeRange -1 should align with the very last leaf of a root\\\"\\n        );\\n        return rootLive(setId, rootId) && rootId <= ret.rootId;\\n    }\\n\\n    // Returns the leaf count of a proof set\\n    function getProofSetLeafCount(uint256 setId) public view returns (uint256) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return proofSetLeafCount[setId];\\n    }\\n\\n    // Returns the next root ID for a proof set\\n    function getNextRootId(uint256 setId) public view returns (uint256) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return nextRootId[setId];\\n    }\\n\\n    // Returns the next challenge epoch for a proof set\\n    function getNextChallengeEpoch(uint256 setId) public view returns (uint256) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return nextChallengeEpoch[setId];\\n    }\\n\\n    // Returns the listener address for a proof set\\n    function getProofSetListener(uint256 setId) public view returns (address) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return proofSetListener[setId];\\n    }\\n\\n    // Returns the owner of a proof set and the proposed owner if any\\n    function getProofSetOwner(uint256 setId) public view returns (address, address) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return (proofSetOwner[setId], proofSetProposedOwner[setId]);\\n    }\\n\\n    function getProofSetLastProvenEpoch(uint256 setId) public view returns (uint256) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return proofSetLastProvenEpoch[setId];\\n    }\\n\\n    // Returns the root CID for a given proof set and root ID\\n    function getRootCid(uint256 setId, uint256 rootId) public view returns (Cids.Cid memory) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return rootCids[setId][rootId];\\n    }\\n\\n    // Returns the root leaf count for a given proof set and root ID\\n    function getRootLeafCount(uint256 setId, uint256 rootId) public view returns (uint256) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return rootLeafCounts[setId][rootId];\\n    }\\n\\n    // Returns the index of the most recently added leaf that is challengeable in the current proving period\\n    function getChallengeRange(uint256 setId) public view returns (uint256) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        return challengeRange[setId];\\n    }\\n\\n    // Returns the root ids of the roots scheduled for removal at the start of the next proving period\\n    function getScheduledRemovals(uint256 setId) public view returns (uint256[] memory) {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        uint256[] storage removals = scheduledRemovals[setId];\\n        uint256[] memory result = new uint256[](removals.length);\\n        for (uint256 i = 0; i < removals.length; i++) {\\n            result[i] = removals[i];\\n        }\\n        return result;\\n    }\\n\\n    // owner proposes new owner.  If the owner proposes themself delete any outstanding proposed owner\\n    function proposeProofSetOwner(uint256 setId, address newOwner) public {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        address owner = proofSetOwner[setId];\\n        require(owner == msg.sender, \\\"Only the current owner can propose a new owner\\\");\\n        if (owner == newOwner) {\\n            // If the owner proposes themself delete any outstanding proposed owner\\n            delete proofSetProposedOwner[setId];\\n        } else {\\n            proofSetProposedOwner[setId] = newOwner;\\n        }\\n    }\\n\\n    function claimProofSetOwnership(uint256 setId) public {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        require(\\n            proofSetProposedOwner[setId] == msg.sender,\\n            \\\"Only the proposed owner can claim ownership\\\"\\n        );\\n        address oldOwner = proofSetOwner[setId];\\n        proofSetOwner[setId] = msg.sender;\\n        delete proofSetProposedOwner[setId];\\n        emit ProofSetOwnerChanged(setId, oldOwner, msg.sender);\\n    }\\n\\n    // A proof set is created empty, with no roots. Creation yields a proof set ID\\n    // for referring to the proof set later.\\n    // Sender of create message is proof set owner.\\n    function createProofSet(\\n        address listenerAddr,\\n        bytes calldata extraData\\n    ) public payable returns (uint256) {\\n        require(extraData.length <= EXTRA_DATA_MAX_SIZE, \\\"Extra data too large\\\");\\n        uint256 sybilFee = PDPFees.sybilFee();\\n        require(msg.value >= sybilFee, \\\"sybil fee not met\\\");\\n        burnFee(sybilFee);\\n\\n        uint256 setId = nextProofSetId++;\\n        proofSetLeafCount[setId] = 0;\\n        nextChallengeEpoch[setId] = NO_CHALLENGE_SCHEDULED; // Initialized on first call to NextProvingPeriod\\n        proofSetOwner[setId] = msg.sender;\\n        proofSetListener[setId] = listenerAddr;\\n        proofSetLastProvenEpoch[setId] = NO_PROVEN_EPOCH;\\n\\n        if (listenerAddr != address(0)) {\\n            PDPListener(listenerAddr).proofSetCreated(setId, msg.sender, extraData);\\n        }\\n        emit ProofSetCreated(setId, msg.sender);\\n\\n        // Return the at the end to avoid any possible re-entrency issues.\\n        if (msg.value > sybilFee) {\\n            (bool success, ) = msg.sender.call{value: msg.value - sybilFee}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        return setId;\\n    }\\n\\n    // Removes a proof set. Must be called by the contract owner.\\n    function deleteProofSet(uint256 setId, bytes calldata extraData) public {\\n        require(extraData.length <= EXTRA_DATA_MAX_SIZE, \\\"Extra data too large\\\");\\n        if (setId >= nextProofSetId) {\\n            revert(\\\"proof set id out of bounds\\\");\\n        }\\n\\n        require(proofSetOwner[setId] == msg.sender, \\\"Only the owner can delete proof sets\\\");\\n        uint256 deletedLeafCount = proofSetLeafCount[setId];\\n        proofSetLeafCount[setId] = 0;\\n        proofSetOwner[setId] = address(0);\\n        nextChallengeEpoch[setId] = 0;\\n        proofSetLastProvenEpoch[setId] = NO_PROVEN_EPOCH;\\n\\n        address listenerAddr = proofSetListener[setId];\\n        if (listenerAddr != address(0)) {\\n            PDPListener(listenerAddr).proofSetDeleted(setId, deletedLeafCount, extraData);\\n        }\\n        emit ProofSetDeleted(setId, deletedLeafCount);\\n    }\\n\\n    // Struct for tracking root data\\n    struct RootData {\\n        Cids.Cid root;\\n        uint256 rawSize;\\n    }\\n\\n    // Appends new roots to the collection managed by a proof set.\\n    // These roots won't be challenged until the next proving period is\\n    // started by calling nextProvingPeriod.\\n    function addRoots(\\n        uint256 setId,\\n        RootData[] calldata rootData,\\n        bytes calldata extraData\\n    ) public returns (uint256) {\\n        uint256 nRoots = rootData.length;\\n        require(extraData.length <= EXTRA_DATA_MAX_SIZE, \\\"Extra data too large\\\");\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        require(nRoots > 0, \\\"Must add at least one root\\\");\\n        require(proofSetOwner[setId] == msg.sender, \\\"Only the owner can add roots\\\");\\n        uint256 firstAdded = nextRootId[setId];\\n        uint256[] memory rootIds = new uint256[](rootData.length);\\n\\n        for (uint256 i = 0; i < nRoots; i++) {\\n            addOneRoot(setId, i, rootData[i].root, rootData[i].rawSize);\\n            rootIds[i] = firstAdded + i;\\n        }\\n        emit RootsAdded(setId, rootIds);\\n\\n        address listenerAddr = proofSetListener[setId];\\n        if (listenerAddr != address(0)) {\\n            PDPListener(listenerAddr).rootsAdded(setId, firstAdded, rootData, extraData);\\n        }\\n\\n        return firstAdded;\\n    }\\n\\n    error IndexedError(uint256 idx, string msg);\\n\\n    function addOneRoot(\\n        uint256 setId,\\n        uint256 callIdx,\\n        Cids.Cid calldata root,\\n        uint256 rawSize\\n    ) internal returns (uint256) {\\n        if (rawSize % LEAF_SIZE != 0) {\\n            revert IndexedError(callIdx, \\\"Size must be a multiple of 32\\\");\\n        }\\n        if (rawSize == 0) {\\n            revert IndexedError(callIdx, \\\"Size must be greater than 0\\\");\\n        }\\n        if (rawSize > MAX_ROOT_SIZE) {\\n            revert IndexedError(callIdx, \\\"Root size must be less than 2^50\\\");\\n        }\\n\\n        uint256 leafCount = rawSize / LEAF_SIZE;\\n        uint256 rootId = nextRootId[setId]++;\\n        sumTreeAdd(setId, leafCount, rootId);\\n        rootCids[setId][rootId] = root;\\n        rootLeafCounts[setId][rootId] = leafCount;\\n        proofSetLeafCount[setId] += leafCount;\\n        return rootId;\\n    }\\n\\n    // scheduleRemovals scheduels removal of a batch of roots from a proof set for the start of the next\\n    // proving period. It must be called by the proof set owner.\\n    function scheduleRemovals(\\n        uint256 setId,\\n        uint256[] calldata rootIds,\\n        bytes calldata extraData\\n    ) public {\\n        require(extraData.length <= EXTRA_DATA_MAX_SIZE, \\\"Extra data too large\\\");\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        require(proofSetOwner[setId] == msg.sender, \\\"Only the owner can schedule removal of roots\\\");\\n        require(\\n            rootIds.length + scheduledRemovals[setId].length <= MAX_ENQUEUED_REMOVALS,\\n            \\\"Too many removals wait for next proving period to schedule\\\"\\n        );\\n\\n        for (uint256 i = 0; i < rootIds.length; i++) {\\n            require(rootIds[i] < nextRootId[setId], \\\"Can only schedule removal of existing roots\\\");\\n            scheduledRemovals[setId].push(rootIds[i]);\\n        }\\n\\n        address listenerAddr = proofSetListener[setId];\\n        if (listenerAddr != address(0)) {\\n            PDPListener(listenerAddr).rootsScheduledRemove(setId, rootIds, extraData);\\n        }\\n    }\\n\\n    struct Proof {\\n        bytes32 leaf;\\n        bytes32[] proof;\\n    }\\n\\n    // Verifies and records that the provider proved possession of the\\n    // proof set Merkle roots at some epoch. The challenge seed is determined\\n    // by the epoch of the previous proof of possession.\\n    function provePossession(uint256 setId, Proof[] calldata proofs) public payable {\\n        uint256 initialGas = gasleft();\\n        uint256 nProofs = proofs.length;\\n        require(msg.sender == proofSetOwner[setId], \\\"Only the owner can prove possession\\\");\\n        require(nProofs > 0, \\\"empty proof\\\");\\n        {\\n            uint256 challengeEpoch = nextChallengeEpoch[setId];\\n            require(block.number >= challengeEpoch, \\\"premature proof\\\");\\n            require(challengeEpoch != NO_CHALLENGE_SCHEDULED, \\\"no challenge scheduled\\\");\\n        }\\n\\n        RootIdAndOffset[] memory challenges = new RootIdAndOffset[](proofs.length);\\n\\n        uint256 seed = drawChallengeSeed(setId);\\n        {\\n            uint256 leafCount = challengeRange[setId];\\n            uint256 sumTreeTop = 256 - BitOps.clz(nextRootId[setId]);\\n            for (uint64 i = 0; i < nProofs; i++) {\\n                // Hash (SHA3) the seed,  proof set id, and proof index to create challenge.\\n                // Note -- there is a slight deviation here from the uniform distribution.\\n                // Some leaves are challenged with probability p and some have probability p + deviation.\\n                // This deviation is bounded by leafCount / 2^256 given a 256 bit hash.\\n                // Deviation grows with proofset leaf count.\\n                // Assuming a 1000EiB = 1 ZiB network size ~ 2^70 bytes of data or 2^65 leaves\\n                // This deviation is bounded by 2^65 / 2^256 = 2^-191 which is negligible.\\n                //   If modifying this code to use a hash function with smaller output size\\n                //   this deviation will increase and caution is advised.\\n                // To remove this deviation we could use the standard solution of rejection sampling\\n                //   This is complicated and slightly more costly at one more hash on average for maximally misaligned proofsets\\n                //   and comes at no practical benefit given how small the deviation is.\\n                bytes memory payload = abi.encodePacked(seed, setId, i);\\n                uint256 challengeIdx = uint256(keccak256(payload)) % leafCount;\\n\\n                // Find the root that has this leaf, and the offset of the leaf within that root.\\n                challenges[i] = findOneRootId(setId, challengeIdx, sumTreeTop);\\n                bytes32 rootHash = Cids.digestFromCid(getRootCid(setId, challenges[i].rootId));\\n                uint256 rootHeight = 256 -\\n                    BitOps.clz(rootLeafCounts[setId][challenges[i].rootId] - 1) +\\n                    1;\\n                bool ok = MerkleVerify.verify(\\n                    proofs[i].proof,\\n                    rootHash,\\n                    proofs[i].leaf,\\n                    challenges[i].offset,\\n                    rootHeight\\n                );\\n                require(ok, \\\"proof did not verify\\\");\\n            }\\n        }\\n\\n        // Note: We don't want to include gas spent on the listener call in the fee calculation\\n        // to only account for proof verification fees and avoid gamability by getting the listener\\n        // to do extraneous work just to inflate the gas fee.\\n        //\\n        // (add 32 bytes to the `callDataSize` to also account for the `setId` calldata param)\\n        uint256 gasUsed = (initialGas - gasleft()) + ((calculateCallDataSize(proofs) + 32) * 1300);\\n        uint256 refund = calculateAndBurnProofFee(setId, gasUsed);\\n\\n        {\\n            address listenerAddr = proofSetListener[setId];\\n            if (listenerAddr != address(0)) {\\n                PDPListener(listenerAddr).possessionProven(\\n                    setId,\\n                    proofSetLeafCount[setId],\\n                    seed,\\n                    proofs.length\\n                );\\n            }\\n        }\\n\\n        proofSetLastProvenEpoch[setId] = block.number;\\n        emit PossessionProven(setId, challenges);\\n\\n        // Return the overpayment after doing everything else to avoid re-entrancy issues (all state has been updated by this point). If this\\n        // call fails, the entire operation reverts.\\n        if (refund > 0) {\\n            (bool success, ) = msg.sender.call{value: refund}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n    }\\n\\n    function calculateProofFee(\\n        uint256 setId,\\n        uint256 estimatedGasFee\\n    ) public view returns (uint256) {\\n        uint256 rawSize = 32 * challengeRange[setId];\\n        (uint64 filUsdPrice, int32 filUsdPriceExpo) = getFILUSDPrice();\\n\\n        return\\n            PDPFees.proofFeeWithGasFeeBound(\\n                estimatedGasFee,\\n                filUsdPrice,\\n                filUsdPriceExpo,\\n                rawSize,\\n                block.number - proofSetLastProvenEpoch[setId]\\n            );\\n    }\\n\\n    function calculateAndBurnProofFee(\\n        uint256 setId,\\n        uint256 gasUsed\\n    ) internal returns (uint256 refund) {\\n        uint256 estimatedGasFee = gasUsed * block.basefee;\\n        uint256 rawSize = 32 * challengeRange[setId];\\n        (uint64 filUsdPrice, int32 filUsdPriceExpo) = getFILUSDPrice();\\n\\n        uint256 proofFee = PDPFees.proofFeeWithGasFeeBound(\\n            estimatedGasFee,\\n            filUsdPrice,\\n            filUsdPriceExpo,\\n            rawSize,\\n            block.number - proofSetLastProvenEpoch[setId]\\n        );\\n        burnFee(proofFee);\\n        emit ProofFeePaid(setId, proofFee, filUsdPrice, filUsdPriceExpo);\\n\\n        return msg.value - proofFee; // burnFee asserts that proofFee <= msg.value;\\n    }\\n\\n    function calculateCallDataSize(Proof[] calldata proofs) internal pure returns (uint256) {\\n        uint256 callDataSize = 0;\\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            // 64 for the (leaf + abi encoding overhead ) + each element in the proof is 32 bytes\\n            callDataSize += 64 + (proofs[i].proof.length * 32);\\n        }\\n        return callDataSize;\\n    }\\n\\n    function getRandomness(uint256 epoch) public view returns (uint256) {\\n        // Call the precompile\\n        (bool success, bytes memory result) = RANDOMNESS_PRECOMPILE.staticcall(\\n            abi.encodePacked(epoch)\\n        );\\n\\n        // Check if the call was successful\\n        require(success, \\\"Randomness precompile call failed\\\");\\n\\n        // Decode and return the result\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function drawChallengeSeed(uint256 setId) internal view returns (uint256) {\\n        return getRandomness(nextChallengeEpoch[setId]);\\n    }\\n\\n    // Roll over to the next proving period\\n    //\\n    // This method updates the collection of provable roots in the proof set by\\n    // 1. Actually removing the roots that have been scheduled for removal\\n    // 2. Updating the challenge range to now include leaves added in the last proving period\\n    // So after this method is called roots scheduled for removal are no longer eligible for challenging\\n    // and can be deleted.  And roots added in the last proving period must be available for challenging.\\n    //\\n    // Additionally this method forces sampling of a new challenge.  It enforces that the new\\n    // challenge epoch is at least `challengeFinality` epochs in the future.\\n    //\\n    // Note that this method can be called at any time but the pdpListener will likely consider it\\n    // a \\\"fault\\\" or other penalizeable behavior to call this method before calling provePossesion.\\n    function nextProvingPeriod(\\n        uint256 setId,\\n        uint256 challengeEpoch,\\n        bytes calldata extraData\\n    ) public {\\n        require(extraData.length <= EXTRA_DATA_MAX_SIZE, \\\"Extra data too large\\\");\\n        require(\\n            msg.sender == proofSetOwner[setId],\\n            \\\"only the owner can move to next proving period\\\"\\n        );\\n        require(proofSetLeafCount[setId] > 0, \\\"can only start proving once leaves are added\\\");\\n\\n        if (proofSetLastProvenEpoch[setId] == NO_PROVEN_EPOCH) {\\n            proofSetLastProvenEpoch[setId] = block.number;\\n        }\\n\\n        // Take removed roots out of proving set\\n        uint256[] storage removals = scheduledRemovals[setId];\\n        uint256 nRemovals = removals.length;\\n        if (nRemovals > 0) {\\n            uint256[] memory removalsToProcess = new uint256[](nRemovals);\\n\\n            for (uint256 i = 0; i < nRemovals; i++) {\\n                removalsToProcess[i] = removals[removals.length - 1];\\n                removals.pop();\\n            }\\n\\n            removeRoots(setId, removalsToProcess);\\n            emit RootsRemoved(setId, removalsToProcess);\\n        }\\n\\n        // Bring added roots into proving set\\n        challengeRange[setId] = proofSetLeafCount[setId];\\n        if (challengeEpoch < block.number + challengeFinality) {\\n            revert(\\\"challenge epoch must be at least challengeFinality epochs in the future\\\");\\n        }\\n        nextChallengeEpoch[setId] = challengeEpoch;\\n\\n        // Clear next challenge epoch if the set is now empty.\\n        // It will be re-set after new data is added and nextProvingPeriod is called.\\n        if (proofSetLeafCount[setId] == 0) {\\n            emit ProofSetEmpty(setId);\\n            proofSetLastProvenEpoch[setId] = NO_PROVEN_EPOCH;\\n            nextChallengeEpoch[setId] = NO_CHALLENGE_SCHEDULED;\\n        }\\n\\n        address listenerAddr = proofSetListener[setId];\\n        if (listenerAddr != address(0)) {\\n            PDPListener(listenerAddr).nextProvingPeriod(\\n                setId,\\n                nextChallengeEpoch[setId],\\n                proofSetLeafCount[setId],\\n                extraData\\n            );\\n        }\\n        emit NextProvingPeriod(setId, challengeEpoch, proofSetLeafCount[setId]);\\n    }\\n\\n    // removes roots from a proof set's state.\\n    function removeRoots(uint256 setId, uint256[] memory rootIds) internal {\\n        require(proofSetLive(setId), \\\"Proof set not live\\\");\\n        uint256 totalDelta = 0;\\n        for (uint256 i = 0; i < rootIds.length; i++) {\\n            totalDelta += removeOneRoot(setId, rootIds[i]);\\n        }\\n        proofSetLeafCount[setId] -= totalDelta;\\n    }\\n\\n    // removeOneRoot removes a root's array entries from the proof sets state and returns\\n    // the number of leafs by which to reduce the total proof set leaf count.\\n    function removeOneRoot(uint256 setId, uint256 rootId) internal returns (uint256) {\\n        uint256 delta = rootLeafCounts[setId][rootId];\\n        sumTreeRemove(setId, rootId, delta);\\n        delete rootLeafCounts[setId][rootId];\\n        delete rootCids[setId][rootId];\\n        return delta;\\n    }\\n\\n    /* Sum tree functions */\\n    /*\\n    A sumtree is a variant of a Fenwick or binary indexed tree.  It is a binary\\n    tree where each node is the sum of its children. It is designed to support\\n    efficient query and update operations on a base array of integers. Here\\n    the base array is the roots leaf count array.  Asymptotically the sum tree\\n    has logarithmic search and update functions.  Each slot of the sum tree is\\n    logically a node in a binary tree.\\n\\n    The node\\u2019s height from the leaf depth is defined as -1 + the ruler function\\n    (https://oeis.org/A001511 [0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,...]) applied to\\n    the slot\\u2019s index + 1, i.e. the number of trailing 0s in the binary representation\\n    of the index + 1.  Each slot in the sum tree array contains the sum of a range\\n    of the base array.  The size of this range is defined by the height assigned\\n    to this slot in the binary tree structure of the sum tree, i.e. the value of\\n    the ruler function applied to the slot\\u2019s index.  The range for height d and\\n    current index j is [j + 1 - 2^d : j] inclusive.  For example if the node\\u2019s\\n    height is 0 its value is set to the base array\\u2019s value at the same index and\\n    if the node\\u2019s height is 3 then its value is set to the sum of the last 2^3 = 8\\n    values of the base array. The reason to do things with recursive partial sums\\n    is to accommodate O(log len(base array)) updates for add and remove operations\\n    on the base array.\\n    */\\n\\n    // Perform sumtree addition\\n    //\\n    function sumTreeAdd(uint256 setId, uint256 count, uint256 rootId) internal {\\n        uint256 index = rootId;\\n        uint256 h = heightFromIndex(index);\\n\\n        uint256 sum = count;\\n        // Sum BaseArray[j - 2^i] for i in [0, h)\\n        for (uint256 i = 0; i < h; i++) {\\n            uint256 j = index - (1 << i);\\n            sum += sumTreeCounts[setId][j];\\n        }\\n        sumTreeCounts[setId][rootId] = sum;\\n    }\\n\\n    // Perform sumtree removal\\n    //\\n    function sumTreeRemove(uint256 setId, uint256 index, uint256 delta) internal {\\n        uint256 top = uint256(256 - BitOps.clz(nextRootId[setId]));\\n        uint256 h = uint256(heightFromIndex(index));\\n\\n        // Deletion traversal either terminates at\\n        // 1) the top of the tree or\\n        // 2) the highest node right of the removal index\\n        while (h <= top && index < nextRootId[setId]) {\\n            sumTreeCounts[setId][index] -= delta;\\n            index += 1 << h;\\n            h = heightFromIndex(index);\\n        }\\n    }\\n\\n    struct RootIdAndOffset {\\n        uint256 rootId;\\n        uint256 offset;\\n    }\\n\\n    // Perform sumtree find\\n    function findOneRootId(\\n        uint256 setId,\\n        uint256 leafIndex,\\n        uint256 top\\n    ) internal view returns (RootIdAndOffset memory) {\\n        require(leafIndex < proofSetLeafCount[setId], \\\"Leaf index out of bounds\\\");\\n        uint256 searchPtr = (1 << top) - 1;\\n        uint256 acc = 0;\\n\\n        // Binary search until we find the index of the sumtree leaf covering the index range\\n        uint256 candidate;\\n        for (uint256 h = top; h > 0; h--) {\\n            // Search has taken us past the end of the sumtree\\n            // Only option is to go left\\n            if (searchPtr >= nextRootId[setId]) {\\n                searchPtr -= 1 << (h - 1);\\n                continue;\\n            }\\n\\n            candidate = acc + sumTreeCounts[setId][searchPtr];\\n            // Go right\\n            if (candidate <= leafIndex) {\\n                acc += sumTreeCounts[setId][searchPtr];\\n                searchPtr += 1 << (h - 1);\\n            } else {\\n                // Go left\\n                searchPtr -= 1 << (h - 1);\\n            }\\n        }\\n        candidate = acc + sumTreeCounts[setId][searchPtr];\\n        if (candidate <= leafIndex) {\\n            // Choose right\\n            return RootIdAndOffset(searchPtr + 1, leafIndex - candidate);\\n        } // Choose left\\n        return RootIdAndOffset(searchPtr, leafIndex - acc);\\n    }\\n\\n    // findRootIds is a batched version of findOneRootId\\n    function findRootIds(\\n        uint256 setId,\\n        uint256[] calldata leafIndexs\\n    ) public view returns (RootIdAndOffset[] memory) {\\n        // The top of the sumtree is the largest power of 2 less than the number of roots\\n        uint256 top = 256 - BitOps.clz(nextRootId[setId]);\\n        RootIdAndOffset[] memory result = new RootIdAndOffset[](leafIndexs.length);\\n        for (uint256 i = 0; i < leafIndexs.length; i++) {\\n            result[i] = findOneRootId(setId, leafIndexs[i], top);\\n        }\\n        return result;\\n    }\\n\\n    // Return height of sumtree node at given index\\n    // Calculated by taking the trailing zeros of 1 plus the index\\n    function heightFromIndex(uint256 index) internal pure returns (uint256) {\\n        return BitOps.ctz(index + 1);\\n    }\\n\\n    // Add function to get FIL/USD price\\n    function getFILUSDPrice() public view returns (uint64, int32) {\\n        // Get FIL/USD price no older than 1 day\\n        PythStructs.Price memory priceData = PYTH.getPriceNoOlderThan(\\n            FIL_USD_PRICE_FEED_ID,\\n            SECONDS_IN_DAY\\n        );\\n        require(priceData.price > 0, \\\"failed to validate: price must be greater than 0\\\");\\n\\n        // Return the price and exponent representing USD per FIL\\n        return (uint64(priceData.price), priceData.expo);\\n    }\\n}\\n\",\"keccak256\":\"0x9f918cb89f8d2754b7bc0f292c8389a83888b33014041266a3abdddef4f592c0\",\"license\":\"UNLICENSED\"},\"contracts/pdp/Proofs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// The verification functions are adapted from OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {BitOps} from \\\"./BitOps.sol\\\";\\n\\n/**\\n * Functions for the generation and verification of Merkle proofs.\\n * These are specialised to the hash function of SHA254 and implicitly balanced trees.\\n * \\n * Note that only the verification functions are intended to execute on-chain.\\n * The commitment and proof generation functions are co-located for convenience and to function\\n * as a specification for off-chain operations.\\n */\\nlibrary MerkleVerify {\\n    /**\\n     * Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root` at `position`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree.\\n     *\\n     * Will only return true if the leaf is at the bottom of the tree for the given tree height\\n     *\\n     * This version handles proofs in memory.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf, uint256 position, uint256 treeHeight) internal view returns (bool) {\\n        // Tree heigh includes root, proof does not \\n        require(proof.length == treeHeight - 1, \\\"proof length does not match tree height\\\");\\n        return processInclusionProofMemory(proof, leaf, position) == root;\\n    }\\n\\n    /**\\n     * Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` at `position` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree.  \\n     *\\n     * This version handles proofs in memory.\\n     */\\n    function processInclusionProofMemory(bytes32[] memory proof, bytes32 leaf, uint256 position) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            // If position is even, the leaf/node is on the left and sibling is on the right.\\n            bytes32 sibling = proof[i];\\n            if (position % 2 == 0) {\\n                computedHash = Hashes.orderedHash(computedHash, sibling);\\n            } else {\\n                computedHash = Hashes.orderedHash(sibling, computedHash);\\n            }\\n            position /= 2;\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * Returns the root of a Merkle tree of all zero leaves and specified height. \\n     * A height of zero returns zero (the leaf value).\\n     * A height of 1 returns the hash of two zero leaves.\\n     * A height of n returns the hash of two nodes of height n-1.\\n     * Height must be <= 50 (representing 2^50 leaves or 32EiB).\\n     */\\n    function zeroRoot(uint height) internal pure returns (bytes32) {\\n        require(height <= 50, \\\"Height must be <= 50\\\");        \\n        // These roots were generated by code in Proots.t.sol.\\n        uint256[51] memory ZERO_ROOTS = [\\n            0x0000000000000000000000000000000000000000000000000000000000000000,\\n            0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb0b,\\n            0x3731bb99ac689f66eef5973e4a94da188f4ddcae580724fc6f3fd60dfd488333,\\n            0x642a607ef886b004bf2c1978463ae1d4693ac0f410eb2d1b7a47fe205e5e750f,\\n            0x57a2381a28652bf47f6bef7aca679be4aede5871ab5cf3eb2c08114488cb8526,\\n            0x1f7ac9595510e09ea41c460b176430bb322cd6fb412ec57cb17d989a4310372f,\\n            0xfc7e928296e516faade986b28f92d44a4f24b935485223376a799027bc18f833,\\n            0x08c47b38ee13bc43f41b915c0eed9911a26086b3ed62401bf9d58b8d19dff624,\\n            0xb2e47bfb11facd941f62af5c750f3ea5cc4df517d5c4f16db2b4d77baec1a32f,\\n            0xf9226160c8f927bfdcc418cdf203493146008eaefb7d02194d5e548189005108,\\n            0x2c1a964bb90b59ebfe0f6da29ad65ae3e417724a8f7c11745a40cac1e5e74011,\\n            0xfee378cef16404b199ede0b13e11b624ff9d784fbbed878d83297e795e024f02,\\n            0x8e9e2403fa884cf6237f60df25f83ee40dca9ed879eb6f6352d15084f5ad0d3f,\\n            0x752d9693fa167524395476e317a98580f00947afb7a30540d625a9291cc12a07,\\n            0x7022f60f7ef6adfa17117a52619e30cea82c68075adf1c667786ec506eef2d19,\\n            0xd99887b973573a96e11393645236c17b1f4c7034d723c7a99f709bb4da61162b,\\n            0xd0b530dbb0b4f25c5d2f2a28dfee808b53412a02931f18c499f5a254086b1326,\\n            0x84c0421ba0685a01bf795a2344064fe424bd52a9d24377b394ff4c4b4568e811,\\n            0x65f29e5d98d246c38b388cfc06db1f6b021303c5a289000bdce832a9c3ec421c,\\n            0xa2247508285850965b7e334b3127b0c042b1d046dc54402137627cd8799ce13a,\\n            0xdafdab6da9364453c26d33726b9fefe343be8f81649ec009aad3faff50617508,\\n            0xd941d5e0d6314a995c33ffbd4fbe69118d73d4e5fd2cd31f0f7c86ebdd14e706,\\n            0x514c435c3d04d349a5365fbd59ffc713629111785991c1a3c53af22079741a2f,\\n            0xad06853969d37d34ff08e09f56930a4ad19a89def60cbfee7e1d3381c1e71c37,\\n            0x39560e7b13a93b07a243fd2720ffa7cb3e1d2e505ab3629e79f46313512cda06,\\n            0xccc3c012f5b05e811a2bbfdd0f6833b84275b47bf229c0052a82484f3c1a5b3d,\\n            0x7df29b69773199e8f2b40b77919d048509eed768e2c7297b1f1437034fc3c62c,\\n            0x66ce05a3667552cf45c02bcc4e8392919bdeac35de2ff56271848e9f7b675107,\\n            0xd8610218425ab5e95b1ca6239d29a2e420d706a96f373e2f9c9a91d759d19b01,\\n            0x6d364b1ef846441a5a4a68862314acc0a46f016717e53443e839eedf83c2853c,\\n            0x077e5fde35c50a9303a55009e3498a4ebedff39c42b710b730d8ec7ac7afa63e,\\n            0xe64005a6bfe3777953b8ad6ef93f0fca1049b2041654f2a411f7702799cece02,\\n            0x259d3d6b1f4d876d1185e1123af6f5501af0f67cf15b5216255b7b178d12051d,\\n            0x3f9a4d411da4ef1b36f35ff0a195ae392ab23fee7967b7c41b03d1613fc29239,\\n            0xfe4ef328c61aa39cfdb2484eaa32a151b1fe3dfd1f96dd8c9711fd86d6c58113,\\n            0xf55d68900e2d8381eccb8164cb9976f24b2de0dd61a31b97ce6eb23850d5e819,\\n            0xaaaa8c4cb40aacee1e02dc65424b2a6c8e99f803b72f7929c4101d7fae6bff32,\\n            0xc91a84c057fd4afcc209c3b482360cf7493b9129fa164cd1fe6b045a683b5322,\\n            0x64a2c1df312ecb443b431946c02fe701514b5291091b888f03189bee8ea11416,\\n            0x739953434ead6e24f1d1bf5b68ca823b2692b3000a7806d08c76640da98c3526,\\n            0x771f5b63af6f7d1d515d134084d535f5f4d8ab8529b2c3f581f143f8cc38be2f,\\n            0x9031a15bf51550a85db1f64f4db739e01125478a50ee332bc2b4f6462214b20b,\\n            0xc83ba84710b74413f3be84a5466aff2d7f0c5472248ffbeb2266466a92ac4f12,\\n            0x2fe598945de393714c10f447cec237039b5944077a78e0a9811cf5f7a45abe1b,\\n            0x395355ae44754a5cde74898a3f2ef60d5871ab35019c610fc413a62d57646501,\\n            0x4bd4712084416c77eec00cab23416eda8c8dbf681c8ccd0b96c0be980a40d818,\\n            0xf6eeae7dee22146564155ebe4bdf633333401de68da4aa2a6e946c2363807a34,\\n            0x8b43a114ba1c1bb80781e85f87b0bbee11c69fdbbd2ed81d6c9b4c7859c04e34,\\n            0xf74dc344ee4fa47f07fb2732ad9443d94892ca8b53d006c9891a32ef2b74491e,\\n            0x6f5246ae0f965e5424162403d3ab81ef8d15439c5f3a49038488e3640ef98718,\\n            0x0b5b44ccf91ff135af58d2cf694b2ac99f22f5264863d6b9272b6155956aa10e\\n        ];\\n        return bytes32(ZERO_ROOTS[height]);\\n    }\\n}\\n\\nlibrary MerkleProve {\\n    // Builds a merkle tree from an array of leaves.\\n    // The tree is an array of arrays of bytes32.\\n    // The last array is the leaves, and each prior array is the result of the hash of pairs in the previous array.\\n    // An unpaired element is paired with the root of a tree of the same height with zero leaves.\\n    // The first element of the first array is the root.\\n    function buildTree(bytes32[] memory leaves) internal view returns (bytes32[][] memory) {\\n        require(leaves.length > 0, \\\"Leaves array must not be empty\\\");\\n\\n        uint256 levels = 256 - BitOps.clz(leaves.length - 1);\\n        bytes32[][] memory tree = new bytes32[][](levels + 1);\\n        tree[levels] = leaves;\\n\\n        for (uint256 i = levels; i > 0; i--) {\\n            bytes32[] memory currentLevel = tree[i];\\n            uint256 nextLevelSize = (currentLevel.length + 1) / 2;\\n            tree[i - 1] = new bytes32[](nextLevelSize);\\n\\n            for (uint256 j = 0; j < nextLevelSize; j++) {\\n                if (2 * j + 1 < currentLevel.length) {\\n                    tree[i - 1][j] = Hashes.orderedHash(currentLevel[2 * j], currentLevel[2 * j + 1]);\\n                } else {\\n                    // Pair final odd node with a zero-tree of same height.\\n                    tree[i - 1][j] = Hashes.orderedHash(currentLevel[2 * j], MerkleVerify.zeroRoot(levels - i));\\n                }\\n            }\\n        }\\n\\n        return tree;\\n    }\\n\\n    // Gets an inclusion proof from a Merkle tree for a leaf at a given index.\\n    // The proof is constructed by traversing up the tree to the root, and the sibling of each node is appended to the proof.\\n    // A final unpaired element in any level is paired with the zero-tree of the same height.\\n    // Every proof thus has length equal to the height of the tree minus 1.\\n    function buildProof(bytes32[][] memory tree, uint256 index) internal pure returns (bytes32[] memory) {\\n        require(index < tree[tree.length - 1].length, \\\"Index out of bounds\\\");\\n\\n        bytes32[] memory proof = new bytes32[](tree.length - 1);\\n        uint256 proofIndex = 0;\\n\\n        for (uint256 i = tree.length - 1; i > 0; i--) {\\n            uint256 levelSize = tree[i].length;\\n            uint256 pairIndex = index ^ 1; // XOR with 1 to get the pair index\\n\\n            if (pairIndex < levelSize) {\\n                proof[proofIndex] = tree[i][pairIndex];\\n            } else {\\n                // Pair final odd node with zero-tree of same height.\\n                proof[proofIndex] = MerkleVerify.zeroRoot(tree.length - 1 - i);\\n            }\\n            proofIndex++;\\n            index /= 2; // Move to the parent node\\n        }\\n        return proof;\\n    }\\n}\\n\\nlibrary Hashes {\\n    // \\\"The Sha254 functions are identical to Sha256 except that the last two bits of the Sha256 256-bit digest are zeroed out.\\\"\\n    // The bytes of uint256 are arranged in big-endian order, MSB first in memory.\\n    // The bits in each byte are arranged in little-endian order.\\n    // Thus, the \\\"last two bits\\\" are the first two bits of the last byte.\\n    uint256 constant SHA254_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF3F;\\n\\n    /** Order-dependent hash of pair of bytes32. */\\n    function orderedHash(bytes32 a, bytes32 b) internal view returns (bytes32) {\\n        return _efficientSHA254(a, b);\\n    }\\n\\n    /** Implementation equivalent to using sha256(abi.encode(a, b)) that doesn't allocate or expand memory. */\\n    function _efficientSHA254(bytes32 a, bytes32 b) private view returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            \\n            // Call the SHA256 precompile\\n            if iszero(staticcall(gas(), 0x2, 0x00, 0x40, 0x00, 0x20)) {\\n                revert(0, 0)\\n            }\\n            \\n            value := mload(0x00)\\n            // SHA254 hash for compatibility with Filecoin piece commitments.\\n            value := and(value, SHA254_MASK)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c4a870d9b9d9ea55826fd8b2d2b377ce54f958652189f74a4361949c401069f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0346200017f57601f620041ad38819003918201601f19168301916001600160401b03831184841017620001845780849260409485528339810103126200017f576200005a602062000052836200019a565b92016200019a565b6001600160a01b0391821691908215620001205716908115620000c15760805260a0523360c052604051613ffd9081620001b0823960805181818161088701528181611272015261148d015260a051818181610bfb01526115ae015260c0518161161b0152f35b60405162461bcd60e51b815260206004820152603160248201527f46444252656769737472793a2050616e646f726153657276657220616464726560448201527073732063616e6e6f74206265207a65726f60781b6064820152608490fd5b60405162461bcd60e51b815260206004820152603160248201527f46444252656769737472793a205061796d656e7420746f6b656e20616464726560448201527073732063616e6e6f74206265207a65726f60781b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200017f5756fe608060405260043610156200001357600080fd5b6000803560e01c80630d40ec3314620018f05780631641ea8014620018d257806325b31a9714620013ef5780633332617f14620013405780633ccfd60b1462001217578063465dcabb146200114b57806365d8955414620008695780636804a95814620010b85780636f458133146200108257806371852c771462000d47578063785f8ee31462000c8d5780637cb63c0e1462000ba7578063852bc0761462000b535780638cf6b0e81462000b175780639056a04b1462000a5d578063939bf6dd1462000a3d5780639aa5ad8c146200094b5780639f1883d614620008b6578063d41c3a65146200086f578063e36339711462000869578063ea25c6af1462000460578063f0ee570414620001715763f8b2cb4f146200013257600080fd5b346200016e5760203660031901126200016e576020906040906001600160a01b036200015d62001a55565b168152600283522054604051908152f35b80fd5b50346200016e5760403660031901126200016e576200018f62001a55565b906024918235906001600160401b0382116200045c57366023830112156200045c578160040135620001c18162001d1c565b92620001d1604051948562001af0565b818452602091868386019160051b8301019136831162000458578701905b82821062000437575050506001600160a01b039182168085526001808352604086208082015491979185163303620004255760ff600d620002339201541662001dfd565b845115620003d65760648551116200039457849694959392955192620002766200025d8562001d1c565b946200026d604051968762001af0565b80865262001d1c565b8488019890601f1901368a3785875b620002c8575b50505050506040519380850191818652518092526040850195925b828110620002b45785870386f35b8351875295810195928101928401620002a6565b819997999895969851811015620003875782620002e6828462001d8c565b516040516335313c2160e11b815291166004820152868186818d8a5af19081156200037c57908b9695949392918b916200033e575b509086916200032b828b62001d8c565b5201909192939497999896959862000285565b80929750888092503d831162000374575b6200035b818362001af0565b810103126200036f57518a9590866200031b565b600080fd5b503d6200034f565b6040513d8c823e3d90fd5b989698979594976200028b565b606490836040519162461bcd60e51b83528160048401528201527f46444252656769737472793a20546f6f206d616e7920726563697069656e74736044820152fd5b8260236084926040519262461bcd60e51b845260048401528201527f46444252656769737472793a204e6f20726563697069656e74732070726f766960448201526219195960ea1b6064820152fd5b604051631a8ca86b60e01b8152600490fd5b81356001600160a01b03811681036200036f578152908301908301620001ef565b8680fd5b8280fd5b50346200016e576101003660031901126200016e576004356001600160401b03811162000865576200049790369060040162001bc4565b906024356001600160401b0381116200086557620004ba90369060040162001bc4565b906044356001600160401b0381116200086557620004dd90369060040162001bc4565b926064356001600160401b0381116200045c576200050090369060040162001bc4565b6084356001600160401b03811162000861576200052290369060040162001bc4565b948251156200084f578451156200083d576200053d62001b12565b60405190816116b38101106001600160401b036116b384011117620007f657620005b882916116b362002915843960606116b3840152620005a16200058a60606116b38601018962001b82565b6116b38501810360206116b3870101528a62001b82565b906116b38401820360406116b38601015262001b82565b039085f09485156200083257604051620005d28162001aa1565b60018060a01b03871681523360208201528460408201528160608201528260808201528360a08201528760c08201526040516200060f8162001ad4565b86815260e0820152604051620006258162001ad4565b86815261010082015260a43561012082015260c43561014082015260e43561016082015242610180820152856101a08201523386528560205260408620805490600160401b8210156200081e57600182018082558210156200080a5782620006b993926200069e928a52600e60208b209102016200205a565b6001600160a01b03881687526001602052604087206200205a565b600354600160401b811015620007f657806001620006db920160035562001d34565b81546001600160a01b0389811660039390931b92831b921b1916179055600454620007069062001d66565b94856004556000198601958611620007e257506200078392620007656020989362000756620007749462000748604051996101008b526101008b019062001b82565b908982038d8b015262001b82565b90878203604089015262001b82565b90858203606087015262001b82565b90838203608085015262001b82565b60a43560a083015260c43560c083015260e43560e083015233916001600160a01b038516917f0a77689d277c33794eaa1b79132d5a57ee0ce655983b68a80452f684a74fa05c919081900390a46040516001600160a01b039091168152f35b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b88526032600452602488fd5b634e487b7160e01b88526041600452602488fd5b6040513d86823e3d90fd5b60405163e1a5a0cb60e01b8152600490fd5b604051630a27f5a960e21b8152600490fd5b8380fd5b5080fd5b62001a83565b50346200016e57806003193601126200016e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346200016e5760203660031901126200016e576001600160a01b0380620008dd62001a55565b16908183526001602052604083209060018201541633036200042557602060ff600d7f79e37877969a45af2a00e507e8e00e9701442e50f51a85dae8dafc20c1341c4d93016200093d8282541615829060ff801983541691151516179055565b54166040519015158152a280f35b50346200016e576020806003193601126200086557906001600160a01b036200097362001a55565b168152808252604081208054916200098b8362001d1c565b926200099b604051948562001af0565b8084528484018093835285832083915b83831062000a155750505050604051928484019085855251809152604084019460408260051b8601019392955b828710620009e65785850386f35b90919293828062000a04600193603f198a8203018652885162001c1f565b9601920196019592919092620009d8565b600e8860019262000a2a859b9a989b62001f6e565b81520192019201919096939596620009ab565b50346200016e57806003193601126200016e576020600454604051908152f35b50346200016e5760203660031901126200016e5762000afe604062000b139262000a8662001a55565b816101a0845162000a978162001aa1565b8281528260208201526060808783015280808301528060808301528060a08301528060c08301528060e083015261010082015282610120820152826101408201528261016082015282610180820152015260018060a01b0316815260016020522062001f6e565b60405191829160208352602083019062001c1f565b0390f35b50346200016e5760203660031901126200016e576020906040906001600160a01b0362000b4362001a55565b1681528083522054604051908152f35b50346200016e5760403660031901126200016e5760209062000b7462001a55565b9062000b7f62001a6c565b6001600160a01b03928316825260018085526040928390200154915190831691909216148152f35b50346200016e57602090816003193601126200016e576001600160a01b03908162000bd162001a55565b16815260018352826009604083200154602460405180958193634141ed4b60e01b835260048301527f0000000000000000000000000000000000000000000000000000000000000000165afa91821562000c8057819262000c4b575b50600782029180830460071490151715620007e25750604051908152f35b9091508281813d831162000c78575b62000c66818362001af0565b810103126200036f5751903862000c2d565b503d62000c5a565b50604051903d90823e3d90fd5b50346200016e57602090816003193601126200016e576024826001600160a01b0362000cd48162000cbd62001a55565b169182865260018452604086205416151562001da1565b6040516370a0823160e01b815233600482015292839182905afa91821562000d3b579162000d08575b506040519015158152f35b90508181813d831162000d33575b62000d22818362001af0565b810103126200036f57513862000cfd565b503d62000d16565b604051903d90823e3d90fd5b50346200016e5760603660031901126200016e5762000d6562001a55565b6024356001600160401b0381116200045c5762000d8790369060040162001bc4565b6044356001600160401b038111620008615762000da990369060040162001bc4565b60018060a01b0391828416855260016020526040852091836001840154163303620004255781516001600160401b0381116200106e578062000def600786015462001e80565b93601f9485811162001018575b5060209085831160011462000fa957899262000f9d575b50508160011b916000199060031b1c19161760078401555b60088301918151916001600160401b0383116200081e5762000e4e845462001e80565b82811162000f56575b50602091831160011462000ee957600d9493929188918362000edd575b50508160011b916000199060031b1c19161790555b019081549060ff82161562000e9c578480f35b7f79e37877969a45af2a00e507e8e00e9701442e50f51a85dae8dafc20c1341c4d92600160209360ff191617905560405193600185521692a2388080808480f35b01519050388062000e74565b838852602088209190601f198416895b81811062000f3d5750916001939185600d989796941062000f23575b505050811b01905562000e89565b015160001960f88460031b161c1916905538808062000f15565b9293602060018192878601518155019501930162000ef9565b848952602089208380860160051c8201926020871062000f93575b0160051c01905b81811062000f87575062000e57565b89815560010162000f78565b9250819262000f71565b01519050388062000e13565b600787018a5260208a209250601f1984168a5b81811062000fff575090846001959493921062000fe5575b505050811b01600784015562000e2b565b015160001960f88460031b161c1916905538808062000fd4565b9293602060018192878601518155019501930162000fbc565b909150600786018952602089208580850160051c8201926020861062001064575b9085949392910160051c01905b81811062001055575062000dfc565b8a815584935060010162001046565b9250819262001039565b634e487b7160e01b87526041600452602487fd5b50346200016e57806003193601126200016e5762000b13620010a362001b12565b60405191829160208352602083019062001b82565b50346200016e57806003193601126200016e57604051600380548083529083526020808301937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b92915b8282106200112a5762000b13856200111d8189038262001af0565b6040519182918262001a0e565b83546001600160a01b03168652948501946001938401939091019062001102565b50346200016e5760403660031901126200016e576200116962001a55565b906200117462001a6c565b60018060a01b0380931690818352602093600185526040842081600182015416330362000425578592620011b160ff600d60249401541662001dfd565b8560405195869485936335313c2160e11b85521660048401525af191821562000d3b5791620011e4575b50604051908152f35b90508181813d83116200120f575b620011fe818362001af0565b810103126200036f575138620011db565b503d620011f2565b50346200016e57806003193601126200016e5733815260206002815260408220549081156200132e57338084526002825260408085208590555163a9059cbb60e01b81526004810191909152602481018390528181604481877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811562000832578491620012fa575b5015620012e1577fddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1906040519283523392a280f35b33835260029052604051635cba196560e01b8152600490fd5b6200131f9150823d841162001326575b62001316818362001af0565b81019062001e66565b38620012ac565b503d6200130a565b60405163184fc3f160e21b8152600490fd5b50346200016e57602090816003193601126200016e576001600160a01b036200136862001a55565b169081815260018352600a60408220015460405192633e5b1e0760e11b845260048401528383602481305afa91821562000d3b5791620013b7575b620013af925062001e58565b604051908152f35b90508282813d8311620013e7575b620013d1818362001af0565b810103126200036f57620013af915190620013a3565b503d620013c5565b50346200016e5760208060031936011262000865576001600160a01b03806200141762001a55565b16908184526001835260408420916200143582845416151562001da1565b6200144760ff600d8501541662001dfd565b604051633e5b1e0760e11b8152600481018290529160249085848381305afa938415620018c757879462001892575b50600a8501946200148985875462001e58565b94827f0000000000000000000000000000000000000000000000000000000000000000166040516370a0823160e01b815233600482015289818781855afa80156200183e5788918c916200185b575b50106200184957604051636eb1769f60e11b815233600482015230868201528981604481855afa80156200183e5788918c9162001803575b5010620017f157888a916064604051809481936323b872dd60e01b8352336004840152308b8401528c60448401525af19081156200037c578a91620017cf575b5015620017bd576040516335313c2160e11b815233600482015296888886818d8a5af19788156200037c578a9862001784575b505493600a8502858104600a14861517156200177157604051630c396c7f60e41b81526064909104957f0000000000000000000000000000000000000000000000000000000000000000861693908b83600481885afa92831562001766578d936200172d575b506007830292808404600714901517156200171a578781039081116200171a578c9291620016179162001e58565b96867f000000000000000000000000000000000000000000000000000000000000000016835260028c52620016526040842091825462001e58565b90556009850154843b156200045c5760449083604051968794859363524ab0a360e01b85526004850152878401525af180156200037c57620016e6575b5050859697620016b19260016040930154168152600289522091825462001e58565b90556040519182527f84a34755616a04d6e547597ec5933d7ca8cf181bb354026be7e93e147edf0ab7853393a4604051908152f35b6001600160401b03829a939a116200170857506040529680620016b16200168f565b634e487b7160e01b8352604160045282fd5b634e487b7160e01b8d526011600452838dfd5b9092508b81813d83116200175e575b62001748818362001af0565b810103126200175a57519138620015e9565b8c80fd5b503d6200173c565b6040513d8f823e3d90fd5b50634e487b7160e01b8a52601160045289fd5b9097508881813d8311620017b5575b6200179f818362001af0565b81010312620017b15751963862001583565b8980fd5b503d62001793565b604051635cba196560e01b8152600490fd5b620017ea9150893d8b11620013265762001316818362001af0565b3862001550565b604051636cf6e1a760e11b8152600490fd5b8092508b8092503d831162001836575b6200181f818362001af0565b8101031262001832578790513862001510565b8a80fd5b503d62001813565b6040513d8d823e3d90fd5b60405163032b9d5d60e21b8152600490fd5b8092508b8092503d83116200188a575b62001877818362001af0565b81010312620018325787905138620014d8565b503d6200186b565b9093508581813d8311620018bf575b620018ad818362001af0565b81010312620004585751923862001476565b503d620018a1565b6040513d89823e3d90fd5b50346200016e57806003193601126200016e57602060405160078152f35b50346200016e57806003193601126200016e57600380549082805b838110620019bc5750620019236200025d8562001d1c565b602090601f1901368683013781805b8581106200194a576040518062000b13898262001a0e565b620019558162001d34565b90546001600160a01b0391871b1c811683526001845260408320600d015460ff1662001986575b5060010162001932565b8194620019b4916200199a60019462001d34565b905490891b1c16620019ad828b62001d8c565b5262001d66565b93906200197c565b620019c78162001d34565b905490841b1c6001600160a01b03168252600160205260408220600d015460ff16620019f7575b6001016200190b565b9362001a0560019162001d66565b949050620019ee565b602090602060408183019282815285518094520193019160005b82811062001a37575050505090565b83516001600160a01b03168552938101939281019260010162001a28565b600435906001600160a01b03821682036200036f57565b602435906001600160a01b03821682036200036f57565b346200036f5760003660031901126200036f576020604051600a8152f35b6101c081019081106001600160401b0382111762001abe57604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b0382111762001abe57604052565b90601f801991011681019081106001600160401b0382111762001abe57604052565b60405190606082018281106001600160401b0382111762001abe57604052603d82527f6366363166346365303039392e72322e6465762f6d657461646174612f0000006040837f68747470733a2f2f7075622d663131383061633039653035343339633934373560208201520152565b919082519283825260005b84811062001baf575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520162001b8d565b81601f820112156200036f578035906001600160401b03821162001abe576040519262001bfc601f8401601f19166020018562001af0565b828452602083830101116200036f57816000926020809301838601378301015290565b9062001ce062001ccb62001cb862001ca562001c9262001c7f62001c6c6101c060018060a01b03808b51168a5260208b01511660208a015260408a0151908060408b015289019062001b82565b606089015188820360608a015262001b82565b6080880151878203608089015262001b82565b60a087015186820360a088015262001b82565b60c086015185820360c087015262001b82565b60e085015184820360e086015262001b82565b61010080850151908483039085015262001b82565b9161012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080910151151591015290565b6001600160401b03811162001abe5760051b60200190565b60035481101562001d5057600360005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b600019811462001d765760010190565b634e487b7160e01b600052601160045260246000fd5b805182101562001d505760209160051b010190565b1562001da957565b60405162461bcd60e51b815260206004820152602660248201527f46444252656769737472793a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b6064820152608490fd5b1562001e0557565b60405162461bcd60e51b815260206004820152602560248201527f46444252656769737472793a20436f6c6c656374696f6e206973206e6f742061604482015264637469766560d81b6064820152608490fd5b9190820180921162001d7657565b908160209103126200036f575180151581036200036f5790565b90600182811c9216801562001eb2575b602083101462001e9c57565b634e487b7160e01b600052602260045260246000fd5b91607f169162001e90565b9060405191826000825462001ed28162001e80565b9081845260209460019160018116908160001462001f4a575060011462001f07575b50505062001f059250038362001af0565b565b600090815285812095935091905b81831062001f3157505062001f05935082010138808062001ef4565b8554888401850152948501948794509183019162001f15565b9250505062001f0594925060ff191682840152151560051b82010138808062001ef4565b9060405162001f7d8162001aa1565b6101a060ff600d839560018060a01b03808254168652600182015416602086015262001fac6002820162001ebd565b604086015262001fbf6003820162001ebd565b606086015262001fd26004820162001ebd565b608086015262001fe56005820162001ebd565b60a086015262001ff86006820162001ebd565b60c08601526200200b6007820162001ebd565b60e08601526200201e6008820162001ebd565b6101008601526009810154610120860152600a810154610140860152600b810154610160860152600c8101546101808601520154161515910152565b815181546001600160a01b03199081166001600160a01b039283161783556020808501516001808601805490941691909416179091556040840151805193949391926001600160401b0392600287019084811162001abe5780620020bf835462001e80565b94601f95868111620028bb575b508790868311600114620028535760009262002847575b5050600019600383901b1c191690831b1790555b600391828701606087015180519086821162001abe5781906200211b845462001e80565b858111620027f1575b5088908583116001146200278a576000926200277e575b505060001982871b1c191690841b1790555b600480880160808801518051908782116200276957819062002170845462001e80565b86811162002713575b508990868311600114620026ac57600092620026a0575b505060001982881b1c191690851b1790555b60059586890160a0890151805190888211620024fb578190620021c6845462001e80565b8781116200264b575b508490878311600114620025e457600092620025d8575b505060001982891b1c191690861b1790555b6006890160c0890151805190888211620024fb5781906200221a845462001e80565b87811162002583575b5084908783116001146200251c5760009262002510575b505060001982891b1c191690861b1790555b6007890160e0890151805190888211620024fb5781906200226e845462001e80565b878111620024a6575b5084908783116001146200243f5760009262002433575b505060001982891b1c191690861b1790555b60088901966101008901519283519788116200241e5750620022c3885462001e80565b90848211620023d5575b5050809286116001146200235757509362001f0597969381600d979481946101a0986000956200234b575b50501b92600019911b1c19161790555b6101208101516009850155610140810151600a850155610160810151600b850155610180810151600c8501550151151591019060ff801983541691151516179055565b015193503880620022f8565b9294939190601f1985168760005284600020946000905b828210620023bd575050928592600d98959262001f059b9a976101a0999610620023a2575b50505050811b01905562002308565b01519060f884600019921b161c191690553880808062002393565b8089869882949787015181550197019401906200236e565b88600052826000209085808a01821c830193858b1062002414575b01901c019085905b828110620024075750620022cd565b60008155018590620023f8565b93508293620023f0565b604190634e487b7160e01b6000525260246000fd5b0151905038806200228e565b90889350601f1983169185600052866000209260005b888282106200248f575050841162002476575b505050811b019055620022a0565b0151600019838b1b60f8161c1916905538808062002468565b8385015186558c9790950194938401930162002455565b9091508360005284600020878085018d1c820192878610620024f1575b918d8b928796959401901c01915b828110620024e157505062002277565b600081558594508a9101620024d1565b92508192620024c3565b604185634e487b7160e01b6000525260246000fd5b0151905038806200223a565b90889350601f1983169185600052866000209260005b888282106200256c575050841162002553575b505050811b0190556200224c565b0151600019838b1b60f8161c1916905538808062002545565b8385015186558c9790950194938401930162002532565b9091508360005284600020878085018d1c820192878610620025ce575b918d8b928796959401901c01915b828110620025be57505062002223565b600081558594508a9101620025ae565b92508192620025a0565b015190503880620021e6565b90889350601f1983169185600052866000209260005b888282106200263457505084116200261b575b505050811b019055620021f8565b0151600019838b1b60f8161c191690553880806200260d565b8385015186558c97909501949384019301620025fa565b9091508360005284600020878085018d1c82019287861062002696575b918d8b928796959401901c01915b82811062002686575050620021cf565b600081558594508a910162002676565b9250819262002668565b01519050388062002190565b90879350601f19831691856000528b6000209260005b8d828210620026fc5750508411620026e3575b505050811b019055620021a2565b0151600019838a1b60f8161c19169055388080620026d5565b8385015186558b97909501949384019301620026c2565b90915083600052896000208680850160051c8201928c86106200275f575b918991869594930160051c01915b8281106200274f57505062002179565b600081558594508991016200273f565b9250819262002731565b604184634e487b7160e01b6000525260246000fd5b0151905038806200213b565b90869350601f19831691856000528a6000209260005b8c828210620027da5750508411620027c1575b505050811b0190556200214d565b015160001983891b60f8161c19169055388080620027b3565b8385015186558a97909501949384019301620027a0565b90915083600052886000208580850160051c8201928b86106200283d575b918891869594930160051c01915b8281106200282d57505062002124565b600081558594508891016200281d565b925081926200280f565b015190503880620020e3565b90859350601f1983169185600052896000209260005b8b828210620028a457505084116200288a575b505050811b019055620020f7565b015160001960f88460031b161c191690553880806200287c565b838501518655899790950194938401930162002869565b909150600084600052886000208780860160051c8201938b87106200290a575b91889187969594930160051c01925b838110620028fb57505050620020cc565b828155869550889101620028ea565b93508193620028db56fe608060405234620004db57620016b3803803806200001d81620004e0565b9283398101606082820312620004db5781516001600160401b039190828111620004db57816200004f91850162000506565b9060209384810151848111620004db57826200006d91830162000506565b916040820151858111620004db5762000087920162000506565b825191848311620004c5576000908154936001958686811c96168015620004ba575b89871014620003c4578190601f9687811162000467575b50899087831160011462000403578592620003f7575b5050600019600383901b1c191690861b1782555b805190868211620003e35785548681811c91168015620003d8575b89821014620003c45790818684931162000371575b5088908683116001146200030d57849262000301575b5050600019600383901b1c191690851b1784555b3315620002e95760068054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a38151948511620002d5576007548481811c91168015620002ca575b87821014620002b6578381116200026d575b508592851160011462000204579394508492919083620001f8575b50501b916000199060031b1c1916176007555b60405161113a9081620005798239f35b015192503880620001d5565b6007815285812093958591601f198316915b8883831062000252575050501062000238575b505050811b01600755620001e8565b015160001960f88460031b161c1916905538808062000229565b85870151885590960195948501948793509081019062000216565b600782528682208480880160051c820192898910620002ac575b0160051c019085905b828110620002a0575050620001ba565b83815501859062000290565b9250819262000287565b634e487b7160e01b82526022600452602482fd5b90607f1690620001a8565b634e487b7160e01b81526041600452602490fd5b60249060405190631e4fbdf760e01b82526004820152fd5b01519050388062000130565b8785528985208894509190601f198416865b8c8282106200035a575050841162000340575b505050811b01845562000144565b015160001960f88460031b161c1916905538808062000332565b8385015186558b979095019493840193016200031f565b9091508684528884208680850160051c8201928b8610620003ba575b918991869594930160051c01915b828110620003ab5750506200011a565b8681558594508991016200039b565b925081926200038d565b634e487b7160e01b84526022600452602484fd5b90607f169062000105565b634e487b7160e01b83526041600452602483fd5b015190503880620000d6565b8580528a86208994509190601f198416875b8d82821062000450575050841162000436575b505050811b018255620000ea565b015160001960f88460031b161c1916905538808062000428565b8385015186558c9790950194938401930162000415565b9091508480528985208780850160051c8201928c8610620004b0575b918a91869594930160051c01915b828110620004a1575050620000c0565b8781558594508a910162000491565b9250819262000483565b95607f1695620000a9565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620004c557604052565b919080601f84011215620004db5782516001600160401b038111620004c5576020906200053c601f8201601f19168301620004e0565b92818452828287010111620004db5760005b8181106200056457508260009394955001015290565b85810183015184820184015282016200054e56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714610c295750806306fdde0314610b7a578063081812fc14610b3f578063095ea7b314610a6357806323b872dd14610a4b57806342842e0e14610a1c5780636352211e146109eb5780636a6278421461078057806370a082311461072b578063715018a6146106ce5780638da5cb5b146106a557806395d89b41146105b8578063a22cb46514610517578063b88d4fde14610482578063c87b56dd146101bc578063e985e9c51461016a5763f2fde38b146100de57600080fd5b34610166576020366003190112610166576100f7610cdd565b90610100610f8d565b6001600160a01b03918216928315610150575050600680546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5050346101b857806003193601126101b85760ff8160209361018a610cdd565b610192610cf8565b6001600160a01b0391821683526005875283832091168252855220549151911615158152f35b5080fd5b508290346101b8576020918260031936011261047f5781356101dd81610f52565b5084519282916007549260019084821c828616958615610475575b8982108714610462578997969492828a928d98969484528a80850198918260001461044557505060011461040a575b5090610234910389610d75565b8751156103eb57818093879172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b90818110156103de575b5050886d04ee2d6d415b85acef8100000000808710156103cf575b5050662386f26fc10000808610156103c0575b506305f5e100808610156103b1575b50612710808610156103a5575b50506064841015610397575b60219082600a80961015610390575b939291906102ed8382016102e56102dc82610d97565b9a519a8b610d75565b808a52610d97565b888b019990601f1901368b3750870101905b61035a575b50505050936103459261032a9492610339610356978a5197889551809288880190610c95565b84019151809386840190610c95565b01038084520182610d75565b925b51928284938452830190610cb8565b0390f35b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561038b579190826102ff565b610304565b01826102c6565b6064909304926002016102b7565b90940493018b806102ab565b6008919295049401908c61029e565b6010919295049401908c61028f565b9091929504940190888d61027c565b0494508691508c80610261565b505050509091506103569250519061040282610d43565b815292610347565b600789528989208992505b81831061042a57505081018801610234610227565b8054838d018c01528c9a8e99508c9450909201918401610415565b60ff1916895291151560051b840190910191506102349050610227565b634e487b7160e01b885260228652602488fd5b90607f16906101f8565b80fd5b5090346101665760803660031901126101665761049d610cdd565b6104a5610cf8565b60443591856064359567ffffffffffffffff87116101b857366023880112156101b857860135956104e16104d888610d97565b96519687610d75565b86865236602488830101116101b8578661051497602460209301838901378601015261050e838383610db3565b33610fb9565b80f35b509034610166578060031936011261016657610531610cdd565b90602435918215158093036105b4576001600160a01b031692831561059f5750338452600560205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b836024925191630b61174360e31b8352820152fd5b8480fd5b50913461047f578060031936011261047f5781519181600192600154938460011c916001861695861561069b575b6020968785108114610688578899509688969785829a529182600014610661575050600114610623575b5050506103569291610347910385610d75565b9190869350600183528383205b8284106106495750505082010181610347610356610610565b8054848a018601528895508794909301928101610630565b60ff19168782015293151560051b8601909301935084925061034791506103569050610610565b634e487b7160e01b835260228a52602483fd5b92607f16926105e6565b5050346101b857816003193601126101b85760065490516001600160a01b039091168152602090f35b833461047f578060031936011261047f576106e7610f8d565b600680546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50913461047f57602036600319011261047f576001600160a01b0361074e610cdd565b1692831561076b5750806020938392526003845220549051908152f35b91516322718ad960e21b815291820152602490fd5b509190346101b857602092836003193601126101665761079e610cdd565b6107a6610f8d565b60085493600019918286146109d857600186016008558451906107c882610d43565b8282526001600160a01b03818116949085156109c15785899182875260028c528987205416801515938461098f575b5081875260038c528987208054600101905582875260028c5289872080546001600160a01b031916831790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8780a4610978573b61085b575b5050505051908152f35b84939591929451878180610896630a85bd0160e11b95868352338c840152886024840152876044840152608060648401526084830190610cb8565b0381878a5af1849181610938575b50610902575050503d6000146108fa573d6108be81610d97565b906108cb84519283610d75565b81528091863d92013e5b805194856108f457505051633250574960e11b81529182015260249150fd5b85925001fd5b5060606108d5565b9195939492506001600160e01b03199091160361092457505038808080610851565b6024925191633250574960e11b8352820152fd5b9091508881813d8311610971575b6109508183610d75565b810103126105b457516001600160e01b0319811681036105b45790386108a4565b503d610946565b85516339e3563760e11b8152808601849052602490fd5b600084815260046020526040902080546001600160a01b031916905581885260038d528a8820908154019055386107f7565b8751633250574960e11b8152808801869052602490fd5b634e487b7160e01b825260118452602482fd5b50913461047f57602036600319011261047f5750610a0b60209235610f52565b90516001600160a01b039091168152f35b5050346101b85761051490610a3036610d0e565b91925192610a3d84610d43565b85845261050e838383610db3565b833461047f57610514610a5d36610d0e565b91610db3565b509034610166578060031936011261016657610a7d610cdd565b91602435610a8a81610f52565b33151580610b2c575b80610b03575b610aed576001600160a01b039485169482918691167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258880a48452602052822080546001600160a01b031916909117905580f35b835163a9fbf51f60e01b81523381850152602490fd5b506001600160a01b03811686526005602090815284872033885290528386205460ff1615610a99565b506001600160a01b038116331415610a93565b503461016657602036600319011261016657918260209335610b6081610f52565b50825283528190205490516001600160a01b039091168152f35b50913461047f578060031936011261047f578151918182549260018460011c9160018616958615610c1f575b6020968785108114610688578899509688969785829a529182600014610661575050600114610be2575050506103569291610347910385610d75565b91908693508280528383205b828410610c075750505082010181610347610356610610565b8054848a018601528895508794909301928101610bee565b92607f1692610ba6565b92505034610166576020366003190112610166573563ffffffff60e01b811680910361016657602092506380ac58cd60e01b8114908115610c84575b8115610c73575b5015158152f35b6301ffc9a760e01b14905038610c6c565b635b5e139f60e01b81149150610c65565b60005b838110610ca85750506000910152565b8181015183820152602001610c98565b90602091610cd181518092818552858086019101610c95565b601f01601f1916010190565b600435906001600160a01b0382168203610cf357565b600080fd5b602435906001600160a01b0382168203610cf357565b6060906003190112610cf3576001600160a01b03906004358281168103610cf357916024359081168103610cf3579060443590565b6020810190811067ffffffffffffffff821117610d5f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610d5f57604052565b67ffffffffffffffff8111610d5f57601f01601f191660200190565b6001600160a01b039182169290918315610f3957600092828452826020956002875260409684888820541696879133151580610ea3575b509060027fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9284610e70575b858352600381528b8320805460010190558683525289812080546001600160a01b0319168517905580a41692838303610e4f5750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b600087815260046020526040902080546001600160a01b0319169055848352600381528b83208054600019019055610e16565b91939450915080610ef8575b15610ebf57859291879138610dea565b878688610edc576024915190637e27328960e01b82526004820152fd5b604491519063177e802f60e01b82523360048301526024820152fd5b503387148015610f1d575b80610eaf5750858252600481523385898420541614610eaf565b5086825260058152878220338352815260ff8883205416610f03565b604051633250574960e11b815260006004820152602490fd5b6000818152600260205260409020546001600160a01b0316908115610f75575090565b60249060405190637e27328960e01b82526004820152fd5b6006546001600160a01b03163303610fa157565b60405163118cdaa760e01b8152336004820152602490fd5b909192833b610fca575b5050505050565b604051630a85bd0160e11b8082526001600160a01b03938416600483015293831660248201526044810191909152608060648201526020959190931693909190839061101a906084830190610cb8565b039285816000958187895af18491816110c4575b5061108e575050503d600014611086573d61104881610d97565b906110566040519283610d75565b81528091843d92013e5b8051928361108157604051633250574960e11b815260048101849052602490fd5b019050fd5b506060611060565b919450915063ffffffff60e01b16036110ac57503880808080610fc3565b60249060405190633250574960e11b82526004820152fd5b9091508681813d83116110fd575b6110dc8183610d75565b810103126105b457516001600160e01b0319811681036105b457903861102e565b503d6110d256fea2646970667358221220718d09d9c126c181f3caa141b468e2f60a8d711834dcb67f2f560214755be7c464736f6c63430008170033a2646970667358221220ec05b9ee22ee3422f0494d97e7f0ed6deea746244fed02cb1da16a4575a7e11364736f6c63430008170033",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b6000803560e01c80630d40ec3314620018f05780631641ea8014620018d257806325b31a9714620013ef5780633332617f14620013405780633ccfd60b1462001217578063465dcabb146200114b57806365d8955414620008695780636804a95814620010b85780636f458133146200108257806371852c771462000d47578063785f8ee31462000c8d5780637cb63c0e1462000ba7578063852bc0761462000b535780638cf6b0e81462000b175780639056a04b1462000a5d578063939bf6dd1462000a3d5780639aa5ad8c146200094b5780639f1883d614620008b6578063d41c3a65146200086f578063e36339711462000869578063ea25c6af1462000460578063f0ee570414620001715763f8b2cb4f146200013257600080fd5b346200016e5760203660031901126200016e576020906040906001600160a01b036200015d62001a55565b168152600283522054604051908152f35b80fd5b50346200016e5760403660031901126200016e576200018f62001a55565b906024918235906001600160401b0382116200045c57366023830112156200045c578160040135620001c18162001d1c565b92620001d1604051948562001af0565b818452602091868386019160051b8301019136831162000458578701905b82821062000437575050506001600160a01b039182168085526001808352604086208082015491979185163303620004255760ff600d620002339201541662001dfd565b845115620003d65760648551116200039457849694959392955192620002766200025d8562001d1c565b946200026d604051968762001af0565b80865262001d1c565b8488019890601f1901368a3785875b620002c8575b50505050506040519380850191818652518092526040850195925b828110620002b45785870386f35b8351875295810195928101928401620002a6565b819997999895969851811015620003875782620002e6828462001d8c565b516040516335313c2160e11b815291166004820152868186818d8a5af19081156200037c57908b9695949392918b916200033e575b509086916200032b828b62001d8c565b5201909192939497999896959862000285565b80929750888092503d831162000374575b6200035b818362001af0565b810103126200036f57518a9590866200031b565b600080fd5b503d6200034f565b6040513d8c823e3d90fd5b989698979594976200028b565b606490836040519162461bcd60e51b83528160048401528201527f46444252656769737472793a20546f6f206d616e7920726563697069656e74736044820152fd5b8260236084926040519262461bcd60e51b845260048401528201527f46444252656769737472793a204e6f20726563697069656e74732070726f766960448201526219195960ea1b6064820152fd5b604051631a8ca86b60e01b8152600490fd5b81356001600160a01b03811681036200036f578152908301908301620001ef565b8680fd5b8280fd5b50346200016e576101003660031901126200016e576004356001600160401b03811162000865576200049790369060040162001bc4565b906024356001600160401b0381116200086557620004ba90369060040162001bc4565b906044356001600160401b0381116200086557620004dd90369060040162001bc4565b926064356001600160401b0381116200045c576200050090369060040162001bc4565b6084356001600160401b03811162000861576200052290369060040162001bc4565b948251156200084f578451156200083d576200053d62001b12565b60405190816116b38101106001600160401b036116b384011117620007f657620005b882916116b362002915843960606116b3840152620005a16200058a60606116b38601018962001b82565b6116b38501810360206116b3870101528a62001b82565b906116b38401820360406116b38601015262001b82565b039085f09485156200083257604051620005d28162001aa1565b60018060a01b03871681523360208201528460408201528160608201528260808201528360a08201528760c08201526040516200060f8162001ad4565b86815260e0820152604051620006258162001ad4565b86815261010082015260a43561012082015260c43561014082015260e43561016082015242610180820152856101a08201523386528560205260408620805490600160401b8210156200081e57600182018082558210156200080a5782620006b993926200069e928a52600e60208b209102016200205a565b6001600160a01b03881687526001602052604087206200205a565b600354600160401b811015620007f657806001620006db920160035562001d34565b81546001600160a01b0389811660039390931b92831b921b1916179055600454620007069062001d66565b94856004556000198601958611620007e257506200078392620007656020989362000756620007749462000748604051996101008b526101008b019062001b82565b908982038d8b015262001b82565b90878203604089015262001b82565b90858203606087015262001b82565b90838203608085015262001b82565b60a43560a083015260c43560c083015260e43560e083015233916001600160a01b038516917f0a77689d277c33794eaa1b79132d5a57ee0ce655983b68a80452f684a74fa05c919081900390a46040516001600160a01b039091168152f35b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b88526032600452602488fd5b634e487b7160e01b88526041600452602488fd5b6040513d86823e3d90fd5b60405163e1a5a0cb60e01b8152600490fd5b604051630a27f5a960e21b8152600490fd5b8380fd5b5080fd5b62001a83565b50346200016e57806003193601126200016e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346200016e5760203660031901126200016e576001600160a01b0380620008dd62001a55565b16908183526001602052604083209060018201541633036200042557602060ff600d7f79e37877969a45af2a00e507e8e00e9701442e50f51a85dae8dafc20c1341c4d93016200093d8282541615829060ff801983541691151516179055565b54166040519015158152a280f35b50346200016e576020806003193601126200086557906001600160a01b036200097362001a55565b168152808252604081208054916200098b8362001d1c565b926200099b604051948562001af0565b8084528484018093835285832083915b83831062000a155750505050604051928484019085855251809152604084019460408260051b8601019392955b828710620009e65785850386f35b90919293828062000a04600193603f198a8203018652885162001c1f565b9601920196019592919092620009d8565b600e8860019262000a2a859b9a989b62001f6e565b81520192019201919096939596620009ab565b50346200016e57806003193601126200016e576020600454604051908152f35b50346200016e5760203660031901126200016e5762000afe604062000b139262000a8662001a55565b816101a0845162000a978162001aa1565b8281528260208201526060808783015280808301528060808301528060a08301528060c08301528060e083015261010082015282610120820152826101408201528261016082015282610180820152015260018060a01b0316815260016020522062001f6e565b60405191829160208352602083019062001c1f565b0390f35b50346200016e5760203660031901126200016e576020906040906001600160a01b0362000b4362001a55565b1681528083522054604051908152f35b50346200016e5760403660031901126200016e5760209062000b7462001a55565b9062000b7f62001a6c565b6001600160a01b03928316825260018085526040928390200154915190831691909216148152f35b50346200016e57602090816003193601126200016e576001600160a01b03908162000bd162001a55565b16815260018352826009604083200154602460405180958193634141ed4b60e01b835260048301527f0000000000000000000000000000000000000000000000000000000000000000165afa91821562000c8057819262000c4b575b50600782029180830460071490151715620007e25750604051908152f35b9091508281813d831162000c78575b62000c66818362001af0565b810103126200036f5751903862000c2d565b503d62000c5a565b50604051903d90823e3d90fd5b50346200016e57602090816003193601126200016e576024826001600160a01b0362000cd48162000cbd62001a55565b169182865260018452604086205416151562001da1565b6040516370a0823160e01b815233600482015292839182905afa91821562000d3b579162000d08575b506040519015158152f35b90508181813d831162000d33575b62000d22818362001af0565b810103126200036f57513862000cfd565b503d62000d16565b604051903d90823e3d90fd5b50346200016e5760603660031901126200016e5762000d6562001a55565b6024356001600160401b0381116200045c5762000d8790369060040162001bc4565b6044356001600160401b038111620008615762000da990369060040162001bc4565b60018060a01b0391828416855260016020526040852091836001840154163303620004255781516001600160401b0381116200106e578062000def600786015462001e80565b93601f9485811162001018575b5060209085831160011462000fa957899262000f9d575b50508160011b916000199060031b1c19161760078401555b60088301918151916001600160401b0383116200081e5762000e4e845462001e80565b82811162000f56575b50602091831160011462000ee957600d9493929188918362000edd575b50508160011b916000199060031b1c19161790555b019081549060ff82161562000e9c578480f35b7f79e37877969a45af2a00e507e8e00e9701442e50f51a85dae8dafc20c1341c4d92600160209360ff191617905560405193600185521692a2388080808480f35b01519050388062000e74565b838852602088209190601f198416895b81811062000f3d5750916001939185600d989796941062000f23575b505050811b01905562000e89565b015160001960f88460031b161c1916905538808062000f15565b9293602060018192878601518155019501930162000ef9565b848952602089208380860160051c8201926020871062000f93575b0160051c01905b81811062000f87575062000e57565b89815560010162000f78565b9250819262000f71565b01519050388062000e13565b600787018a5260208a209250601f1984168a5b81811062000fff575090846001959493921062000fe5575b505050811b01600784015562000e2b565b015160001960f88460031b161c1916905538808062000fd4565b9293602060018192878601518155019501930162000fbc565b909150600786018952602089208580850160051c8201926020861062001064575b9085949392910160051c01905b81811062001055575062000dfc565b8a815584935060010162001046565b9250819262001039565b634e487b7160e01b87526041600452602487fd5b50346200016e57806003193601126200016e5762000b13620010a362001b12565b60405191829160208352602083019062001b82565b50346200016e57806003193601126200016e57604051600380548083529083526020808301937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b92915b8282106200112a5762000b13856200111d8189038262001af0565b6040519182918262001a0e565b83546001600160a01b03168652948501946001938401939091019062001102565b50346200016e5760403660031901126200016e576200116962001a55565b906200117462001a6c565b60018060a01b0380931690818352602093600185526040842081600182015416330362000425578592620011b160ff600d60249401541662001dfd565b8560405195869485936335313c2160e11b85521660048401525af191821562000d3b5791620011e4575b50604051908152f35b90508181813d83116200120f575b620011fe818362001af0565b810103126200036f575138620011db565b503d620011f2565b50346200016e57806003193601126200016e5733815260206002815260408220549081156200132e57338084526002825260408085208590555163a9059cbb60e01b81526004810191909152602481018390528181604481877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811562000832578491620012fa575b5015620012e1577fddc398b321237a8d40ac914388309c2f52a08c134e4dc4ce61e32f57cb7d80f1906040519283523392a280f35b33835260029052604051635cba196560e01b8152600490fd5b6200131f9150823d841162001326575b62001316818362001af0565b81019062001e66565b38620012ac565b503d6200130a565b60405163184fc3f160e21b8152600490fd5b50346200016e57602090816003193601126200016e576001600160a01b036200136862001a55565b169081815260018352600a60408220015460405192633e5b1e0760e11b845260048401528383602481305afa91821562000d3b5791620013b7575b620013af925062001e58565b604051908152f35b90508282813d8311620013e7575b620013d1818362001af0565b810103126200036f57620013af915190620013a3565b503d620013c5565b50346200016e5760208060031936011262000865576001600160a01b03806200141762001a55565b16908184526001835260408420916200143582845416151562001da1565b6200144760ff600d8501541662001dfd565b604051633e5b1e0760e11b8152600481018290529160249085848381305afa938415620018c757879462001892575b50600a8501946200148985875462001e58565b94827f0000000000000000000000000000000000000000000000000000000000000000166040516370a0823160e01b815233600482015289818781855afa80156200183e5788918c916200185b575b50106200184957604051636eb1769f60e11b815233600482015230868201528981604481855afa80156200183e5788918c9162001803575b5010620017f157888a916064604051809481936323b872dd60e01b8352336004840152308b8401528c60448401525af19081156200037c578a91620017cf575b5015620017bd576040516335313c2160e11b815233600482015296888886818d8a5af19788156200037c578a9862001784575b505493600a8502858104600a14861517156200177157604051630c396c7f60e41b81526064909104957f0000000000000000000000000000000000000000000000000000000000000000861693908b83600481885afa92831562001766578d936200172d575b506007830292808404600714901517156200171a578781039081116200171a578c9291620016179162001e58565b96867f000000000000000000000000000000000000000000000000000000000000000016835260028c52620016526040842091825462001e58565b90556009850154843b156200045c5760449083604051968794859363524ab0a360e01b85526004850152878401525af180156200037c57620016e6575b5050859697620016b19260016040930154168152600289522091825462001e58565b90556040519182527f84a34755616a04d6e547597ec5933d7ca8cf181bb354026be7e93e147edf0ab7853393a4604051908152f35b6001600160401b03829a939a116200170857506040529680620016b16200168f565b634e487b7160e01b8352604160045282fd5b634e487b7160e01b8d526011600452838dfd5b9092508b81813d83116200175e575b62001748818362001af0565b810103126200175a57519138620015e9565b8c80fd5b503d6200173c565b6040513d8f823e3d90fd5b50634e487b7160e01b8a52601160045289fd5b9097508881813d8311620017b5575b6200179f818362001af0565b81010312620017b15751963862001583565b8980fd5b503d62001793565b604051635cba196560e01b8152600490fd5b620017ea9150893d8b11620013265762001316818362001af0565b3862001550565b604051636cf6e1a760e11b8152600490fd5b8092508b8092503d831162001836575b6200181f818362001af0565b8101031262001832578790513862001510565b8a80fd5b503d62001813565b6040513d8d823e3d90fd5b60405163032b9d5d60e21b8152600490fd5b8092508b8092503d83116200188a575b62001877818362001af0565b81010312620018325787905138620014d8565b503d6200186b565b9093508581813d8311620018bf575b620018ad818362001af0565b81010312620004585751923862001476565b503d620018a1565b6040513d89823e3d90fd5b50346200016e57806003193601126200016e57602060405160078152f35b50346200016e57806003193601126200016e57600380549082805b838110620019bc5750620019236200025d8562001d1c565b602090601f1901368683013781805b8581106200194a576040518062000b13898262001a0e565b620019558162001d34565b90546001600160a01b0391871b1c811683526001845260408320600d015460ff1662001986575b5060010162001932565b8194620019b4916200199a60019462001d34565b905490891b1c16620019ad828b62001d8c565b5262001d66565b93906200197c565b620019c78162001d34565b905490841b1c6001600160a01b03168252600160205260408220600d015460ff16620019f7575b6001016200190b565b9362001a0560019162001d66565b949050620019ee565b602090602060408183019282815285518094520193019160005b82811062001a37575050505090565b83516001600160a01b03168552938101939281019260010162001a28565b600435906001600160a01b03821682036200036f57565b602435906001600160a01b03821682036200036f57565b346200036f5760003660031901126200036f576020604051600a8152f35b6101c081019081106001600160401b0382111762001abe57604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b0382111762001abe57604052565b90601f801991011681019081106001600160401b0382111762001abe57604052565b60405190606082018281106001600160401b0382111762001abe57604052603d82527f6366363166346365303039392e72322e6465762f6d657461646174612f0000006040837f68747470733a2f2f7075622d663131383061633039653035343339633934373560208201520152565b919082519283825260005b84811062001baf575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520162001b8d565b81601f820112156200036f578035906001600160401b03821162001abe576040519262001bfc601f8401601f19166020018562001af0565b828452602083830101116200036f57816000926020809301838601378301015290565b9062001ce062001ccb62001cb862001ca562001c9262001c7f62001c6c6101c060018060a01b03808b51168a5260208b01511660208a015260408a0151908060408b015289019062001b82565b606089015188820360608a015262001b82565b6080880151878203608089015262001b82565b60a087015186820360a088015262001b82565b60c086015185820360c087015262001b82565b60e085015184820360e086015262001b82565b61010080850151908483039085015262001b82565b9161012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080910151151591015290565b6001600160401b03811162001abe5760051b60200190565b60035481101562001d5057600360005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b600019811462001d765760010190565b634e487b7160e01b600052601160045260246000fd5b805182101562001d505760209160051b010190565b1562001da957565b60405162461bcd60e51b815260206004820152602660248201527f46444252656769737472793a20436f6c6c656374696f6e20646f6573206e6f7460448201526508195e1a5cdd60d21b6064820152608490fd5b1562001e0557565b60405162461bcd60e51b815260206004820152602560248201527f46444252656769737472793a20436f6c6c656374696f6e206973206e6f742061604482015264637469766560d81b6064820152608490fd5b9190820180921162001d7657565b908160209103126200036f575180151581036200036f5790565b90600182811c9216801562001eb2575b602083101462001e9c57565b634e487b7160e01b600052602260045260246000fd5b91607f169162001e90565b9060405191826000825462001ed28162001e80565b9081845260209460019160018116908160001462001f4a575060011462001f07575b50505062001f059250038362001af0565b565b600090815285812095935091905b81831062001f3157505062001f05935082010138808062001ef4565b8554888401850152948501948794509183019162001f15565b9250505062001f0594925060ff191682840152151560051b82010138808062001ef4565b9060405162001f7d8162001aa1565b6101a060ff600d839560018060a01b03808254168652600182015416602086015262001fac6002820162001ebd565b604086015262001fbf6003820162001ebd565b606086015262001fd26004820162001ebd565b608086015262001fe56005820162001ebd565b60a086015262001ff86006820162001ebd565b60c08601526200200b6007820162001ebd565b60e08601526200201e6008820162001ebd565b6101008601526009810154610120860152600a810154610140860152600b810154610160860152600c8101546101808601520154161515910152565b815181546001600160a01b03199081166001600160a01b039283161783556020808501516001808601805490941691909416179091556040840151805193949391926001600160401b0392600287019084811162001abe5780620020bf835462001e80565b94601f95868111620028bb575b508790868311600114620028535760009262002847575b5050600019600383901b1c191690831b1790555b600391828701606087015180519086821162001abe5781906200211b845462001e80565b858111620027f1575b5088908583116001146200278a576000926200277e575b505060001982871b1c191690841b1790555b600480880160808801518051908782116200276957819062002170845462001e80565b86811162002713575b508990868311600114620026ac57600092620026a0575b505060001982881b1c191690851b1790555b60059586890160a0890151805190888211620024fb578190620021c6845462001e80565b8781116200264b575b508490878311600114620025e457600092620025d8575b505060001982891b1c191690861b1790555b6006890160c0890151805190888211620024fb5781906200221a845462001e80565b87811162002583575b5084908783116001146200251c5760009262002510575b505060001982891b1c191690861b1790555b6007890160e0890151805190888211620024fb5781906200226e845462001e80565b878111620024a6575b5084908783116001146200243f5760009262002433575b505060001982891b1c191690861b1790555b60088901966101008901519283519788116200241e5750620022c3885462001e80565b90848211620023d5575b5050809286116001146200235757509362001f0597969381600d979481946101a0986000956200234b575b50501b92600019911b1c19161790555b6101208101516009850155610140810151600a850155610160810151600b850155610180810151600c8501550151151591019060ff801983541691151516179055565b015193503880620022f8565b9294939190601f1985168760005284600020946000905b828210620023bd575050928592600d98959262001f059b9a976101a0999610620023a2575b50505050811b01905562002308565b01519060f884600019921b161c191690553880808062002393565b8089869882949787015181550197019401906200236e565b88600052826000209085808a01821c830193858b1062002414575b01901c019085905b828110620024075750620022cd565b60008155018590620023f8565b93508293620023f0565b604190634e487b7160e01b6000525260246000fd5b0151905038806200228e565b90889350601f1983169185600052866000209260005b888282106200248f575050841162002476575b505050811b019055620022a0565b0151600019838b1b60f8161c1916905538808062002468565b8385015186558c9790950194938401930162002455565b9091508360005284600020878085018d1c820192878610620024f1575b918d8b928796959401901c01915b828110620024e157505062002277565b600081558594508a9101620024d1565b92508192620024c3565b604185634e487b7160e01b6000525260246000fd5b0151905038806200223a565b90889350601f1983169185600052866000209260005b888282106200256c575050841162002553575b505050811b0190556200224c565b0151600019838b1b60f8161c1916905538808062002545565b8385015186558c9790950194938401930162002532565b9091508360005284600020878085018d1c820192878610620025ce575b918d8b928796959401901c01915b828110620025be57505062002223565b600081558594508a9101620025ae565b92508192620025a0565b015190503880620021e6565b90889350601f1983169185600052866000209260005b888282106200263457505084116200261b575b505050811b019055620021f8565b0151600019838b1b60f8161c191690553880806200260d565b8385015186558c97909501949384019301620025fa565b9091508360005284600020878085018d1c82019287861062002696575b918d8b928796959401901c01915b82811062002686575050620021cf565b600081558594508a910162002676565b9250819262002668565b01519050388062002190565b90879350601f19831691856000528b6000209260005b8d828210620026fc5750508411620026e3575b505050811b019055620021a2565b0151600019838a1b60f8161c19169055388080620026d5565b8385015186558b97909501949384019301620026c2565b90915083600052896000208680850160051c8201928c86106200275f575b918991869594930160051c01915b8281106200274f57505062002179565b600081558594508991016200273f565b9250819262002731565b604184634e487b7160e01b6000525260246000fd5b0151905038806200213b565b90869350601f19831691856000528a6000209260005b8c828210620027da5750508411620027c1575b505050811b0190556200214d565b015160001983891b60f8161c19169055388080620027b3565b8385015186558a97909501949384019301620027a0565b90915083600052886000208580850160051c8201928b86106200283d575b918891869594930160051c01915b8281106200282d57505062002124565b600081558594508891016200281d565b925081926200280f565b015190503880620020e3565b90859350601f1983169185600052896000209260005b8b828210620028a457505084116200288a575b505050811b019055620020f7565b015160001960f88460031b161c191690553880806200287c565b838501518655899790950194938401930162002869565b909150600084600052886000208780860160051c8201938b87106200290a575b91889187969594930160051c01925b838110620028fb57505050620020cc565b828155869550889101620028ea565b93508193620028db56fe608060405234620004db57620016b3803803806200001d81620004e0565b9283398101606082820312620004db5781516001600160401b039190828111620004db57816200004f91850162000506565b9060209384810151848111620004db57826200006d91830162000506565b916040820151858111620004db5762000087920162000506565b825191848311620004c5576000908154936001958686811c96168015620004ba575b89871014620003c4578190601f9687811162000467575b50899087831160011462000403578592620003f7575b5050600019600383901b1c191690861b1782555b805190868211620003e35785548681811c91168015620003d8575b89821014620003c45790818684931162000371575b5088908683116001146200030d57849262000301575b5050600019600383901b1c191690851b1784555b3315620002e95760068054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a38151948511620002d5576007548481811c91168015620002ca575b87821014620002b6578381116200026d575b508592851160011462000204579394508492919083620001f8575b50501b916000199060031b1c1916176007555b60405161113a9081620005798239f35b015192503880620001d5565b6007815285812093958591601f198316915b8883831062000252575050501062000238575b505050811b01600755620001e8565b015160001960f88460031b161c1916905538808062000229565b85870151885590960195948501948793509081019062000216565b600782528682208480880160051c820192898910620002ac575b0160051c019085905b828110620002a0575050620001ba565b83815501859062000290565b9250819262000287565b634e487b7160e01b82526022600452602482fd5b90607f1690620001a8565b634e487b7160e01b81526041600452602490fd5b60249060405190631e4fbdf760e01b82526004820152fd5b01519050388062000130565b8785528985208894509190601f198416865b8c8282106200035a575050841162000340575b505050811b01845562000144565b015160001960f88460031b161c1916905538808062000332565b8385015186558b979095019493840193016200031f565b9091508684528884208680850160051c8201928b8610620003ba575b918991869594930160051c01915b828110620003ab5750506200011a565b8681558594508991016200039b565b925081926200038d565b634e487b7160e01b84526022600452602484fd5b90607f169062000105565b634e487b7160e01b83526041600452602483fd5b015190503880620000d6565b8580528a86208994509190601f198416875b8d82821062000450575050841162000436575b505050811b018255620000ea565b015160001960f88460031b161c1916905538808062000428565b8385015186558c9790950194938401930162000415565b9091508480528985208780850160051c8201928c8610620004b0575b918a91869594930160051c01915b828110620004a1575050620000c0565b8781558594508a910162000491565b9250819262000483565b95607f1695620000a9565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620004c557604052565b919080601f84011215620004db5782516001600160401b038111620004c5576020906200053c601f8201601f19168301620004e0565b92818452828287010111620004db5760005b8181106200056457508260009394955001015290565b85810183015184820184015282016200054e56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714610c295750806306fdde0314610b7a578063081812fc14610b3f578063095ea7b314610a6357806323b872dd14610a4b57806342842e0e14610a1c5780636352211e146109eb5780636a6278421461078057806370a082311461072b578063715018a6146106ce5780638da5cb5b146106a557806395d89b41146105b8578063a22cb46514610517578063b88d4fde14610482578063c87b56dd146101bc578063e985e9c51461016a5763f2fde38b146100de57600080fd5b34610166576020366003190112610166576100f7610cdd565b90610100610f8d565b6001600160a01b03918216928315610150575050600680546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5050346101b857806003193601126101b85760ff8160209361018a610cdd565b610192610cf8565b6001600160a01b0391821683526005875283832091168252855220549151911615158152f35b5080fd5b508290346101b8576020918260031936011261047f5781356101dd81610f52565b5084519282916007549260019084821c828616958615610475575b8982108714610462578997969492828a928d98969484528a80850198918260001461044557505060011461040a575b5090610234910389610d75565b8751156103eb57818093879172184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b90818110156103de575b5050886d04ee2d6d415b85acef8100000000808710156103cf575b5050662386f26fc10000808610156103c0575b506305f5e100808610156103b1575b50612710808610156103a5575b50506064841015610397575b60219082600a80961015610390575b939291906102ed8382016102e56102dc82610d97565b9a519a8b610d75565b808a52610d97565b888b019990601f1901368b3750870101905b61035a575b50505050936103459261032a9492610339610356978a5197889551809288880190610c95565b84019151809386840190610c95565b01038084520182610d75565b925b51928284938452830190610cb8565b0390f35b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561038b579190826102ff565b610304565b01826102c6565b6064909304926002016102b7565b90940493018b806102ab565b6008919295049401908c61029e565b6010919295049401908c61028f565b9091929504940190888d61027c565b0494508691508c80610261565b505050509091506103569250519061040282610d43565b815292610347565b600789528989208992505b81831061042a57505081018801610234610227565b8054838d018c01528c9a8e99508c9450909201918401610415565b60ff1916895291151560051b840190910191506102349050610227565b634e487b7160e01b885260228652602488fd5b90607f16906101f8565b80fd5b5090346101665760803660031901126101665761049d610cdd565b6104a5610cf8565b60443591856064359567ffffffffffffffff87116101b857366023880112156101b857860135956104e16104d888610d97565b96519687610d75565b86865236602488830101116101b8578661051497602460209301838901378601015261050e838383610db3565b33610fb9565b80f35b509034610166578060031936011261016657610531610cdd565b90602435918215158093036105b4576001600160a01b031692831561059f5750338452600560205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b836024925191630b61174360e31b8352820152fd5b8480fd5b50913461047f578060031936011261047f5781519181600192600154938460011c916001861695861561069b575b6020968785108114610688578899509688969785829a529182600014610661575050600114610623575b5050506103569291610347910385610d75565b9190869350600183528383205b8284106106495750505082010181610347610356610610565b8054848a018601528895508794909301928101610630565b60ff19168782015293151560051b8601909301935084925061034791506103569050610610565b634e487b7160e01b835260228a52602483fd5b92607f16926105e6565b5050346101b857816003193601126101b85760065490516001600160a01b039091168152602090f35b833461047f578060031936011261047f576106e7610f8d565b600680546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50913461047f57602036600319011261047f576001600160a01b0361074e610cdd565b1692831561076b5750806020938392526003845220549051908152f35b91516322718ad960e21b815291820152602490fd5b509190346101b857602092836003193601126101665761079e610cdd565b6107a6610f8d565b60085493600019918286146109d857600186016008558451906107c882610d43565b8282526001600160a01b03818116949085156109c15785899182875260028c528987205416801515938461098f575b5081875260038c528987208054600101905582875260028c5289872080546001600160a01b031916831790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8780a4610978573b61085b575b5050505051908152f35b84939591929451878180610896630a85bd0160e11b95868352338c840152886024840152876044840152608060648401526084830190610cb8565b0381878a5af1849181610938575b50610902575050503d6000146108fa573d6108be81610d97565b906108cb84519283610d75565b81528091863d92013e5b805194856108f457505051633250574960e11b81529182015260249150fd5b85925001fd5b5060606108d5565b9195939492506001600160e01b03199091160361092457505038808080610851565b6024925191633250574960e11b8352820152fd5b9091508881813d8311610971575b6109508183610d75565b810103126105b457516001600160e01b0319811681036105b45790386108a4565b503d610946565b85516339e3563760e11b8152808601849052602490fd5b600084815260046020526040902080546001600160a01b031916905581885260038d528a8820908154019055386107f7565b8751633250574960e11b8152808801869052602490fd5b634e487b7160e01b825260118452602482fd5b50913461047f57602036600319011261047f5750610a0b60209235610f52565b90516001600160a01b039091168152f35b5050346101b85761051490610a3036610d0e565b91925192610a3d84610d43565b85845261050e838383610db3565b833461047f57610514610a5d36610d0e565b91610db3565b509034610166578060031936011261016657610a7d610cdd565b91602435610a8a81610f52565b33151580610b2c575b80610b03575b610aed576001600160a01b039485169482918691167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258880a48452602052822080546001600160a01b031916909117905580f35b835163a9fbf51f60e01b81523381850152602490fd5b506001600160a01b03811686526005602090815284872033885290528386205460ff1615610a99565b506001600160a01b038116331415610a93565b503461016657602036600319011261016657918260209335610b6081610f52565b50825283528190205490516001600160a01b039091168152f35b50913461047f578060031936011261047f578151918182549260018460011c9160018616958615610c1f575b6020968785108114610688578899509688969785829a529182600014610661575050600114610be2575050506103569291610347910385610d75565b91908693508280528383205b828410610c075750505082010181610347610356610610565b8054848a018601528895508794909301928101610bee565b92607f1692610ba6565b92505034610166576020366003190112610166573563ffffffff60e01b811680910361016657602092506380ac58cd60e01b8114908115610c84575b8115610c73575b5015158152f35b6301ffc9a760e01b14905038610c6c565b635b5e139f60e01b81149150610c65565b60005b838110610ca85750506000910152565b8181015183820152602001610c98565b90602091610cd181518092818552858086019101610c95565b601f01601f1916010190565b600435906001600160a01b0382168203610cf357565b600080fd5b602435906001600160a01b0382168203610cf357565b6060906003190112610cf3576001600160a01b03906004358281168103610cf357916024359081168103610cf3579060443590565b6020810190811067ffffffffffffffff821117610d5f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610d5f57604052565b67ffffffffffffffff8111610d5f57601f01601f191660200190565b6001600160a01b039182169290918315610f3957600092828452826020956002875260409684888820541696879133151580610ea3575b509060027fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9284610e70575b858352600381528b8320805460010190558683525289812080546001600160a01b0319168517905580a41692838303610e4f5750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b600087815260046020526040902080546001600160a01b0319169055848352600381528b83208054600019019055610e16565b91939450915080610ef8575b15610ebf57859291879138610dea565b878688610edc576024915190637e27328960e01b82526004820152fd5b604491519063177e802f60e01b82523360048301526024820152fd5b503387148015610f1d575b80610eaf5750858252600481523385898420541614610eaf565b5086825260058152878220338352815260ff8883205416610f03565b604051633250574960e11b815260006004820152602490fd5b6000818152600260205260409020546001600160a01b0316908115610f75575090565b60249060405190637e27328960e01b82526004820152fd5b6006546001600160a01b03163303610fa157565b60405163118cdaa760e01b8152336004820152602490fd5b909192833b610fca575b5050505050565b604051630a85bd0160e11b8082526001600160a01b03938416600483015293831660248201526044810191909152608060648201526020959190931693909190839061101a906084830190610cb8565b039285816000958187895af18491816110c4575b5061108e575050503d600014611086573d61104881610d97565b906110566040519283610d75565b81528091843d92013e5b8051928361108157604051633250574960e11b815260048101849052602490fd5b019050fd5b506060611060565b919450915063ffffffff60e01b16036110ac57503880808080610fc3565b60249060405190633250574960e11b82526004820152fd5b9091508681813d83116110fd575b6110dc8183610d75565b810103126105b457516001600160e01b0319811681036105b457903861102e565b503d6110d256fea2646970667358221220718d09d9c126c181f3caa141b468e2f60a8d711834dcb67f2f560214755be7c464736f6c63430008170033a2646970667358221220ec05b9ee22ee3422f0494d97e7f0ed6deea746244fed02cb1da16a4575a7e11364736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9446,
        "contract": "contracts/FDBRegistry.sol:FDBRegistry",
        "label": "s_userCollections",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(Collection)9440_storage)dyn_storage)"
      },
      {
        "astId": 9451,
        "contract": "contracts/FDBRegistry.sol:FDBRegistry",
        "label": "s_collectionInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Collection)9440_storage)"
      },
      {
        "astId": 9455,
        "contract": "contracts/FDBRegistry.sol:FDBRegistry",
        "label": "s_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9458,
        "contract": "contracts/FDBRegistry.sol:FDBRegistry",
        "label": "s_allCollections",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9460,
        "contract": "contracts/FDBRegistry.sol:FDBRegistry",
        "label": "s_totalCollections",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Collection)9440_storage)dyn_storage": {
        "base": "t_struct(Collection)9440_storage",
        "encoding": "dynamic_array",
        "label": "struct FDBRegistry.Collection[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Collection)9440_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FDBRegistry.Collection[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Collection)9440_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Collection)9440_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FDBRegistry.Collection)",
        "numberOfBytes": "32",
        "value": "t_struct(Collection)9440_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Collection)9440_storage": {
        "encoding": "inplace",
        "label": "struct FDBRegistry.Collection",
        "members": [
          {
            "astId": 9413,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "nftContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9415,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9417,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 9419,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 9421,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 9423,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "privateColumns",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 9425,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "publicColumns",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 9427,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "publicCid",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 9429,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "privateCid",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 9431,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "proofSetId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 9433,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "price",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 9435,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "size",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 9437,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "createdAt",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 9439,
            "contract": "contracts/FDBRegistry.sol:FDBRegistry",
            "label": "isActive",
            "offset": 0,
            "slot": "13",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}